

----STARTUP---- (25 May 2022 17:48:17) as /home/lisandro/Documents/Facultad/ING1/linux64/CuisUniversity-5096.image!


----End fileIn of /media/lisandro/47FC-0197/Portfolio-Ejercicio.st----!

!classRemoval: #ReceptiveAccount stamp: 'ldmaf 5/25/2022 17:49:51'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'ldmaf 5/25/2022 17:49:51'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'ldmaf 5/25/2022 17:49:52'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'ldmaf 5/25/2022 17:49:52'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'ldmaf 5/25/2022 17:49:52'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----STARTUP---- (25 May 2022 17:51:13) as /home/lisandro/Documents/Facultad/ING1/linux64/CuisUniversity-5096.image!


----End fileIn of /home/lisandro/Downloads/Portfolio-Solucion.st----!

TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'ldmaf 5/25/2022 17:59:40'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'ldmaf 5/25/2022 18:05:16'!
Object subclass: #Transfer
	instanceVariableNames: 'transferValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'nil' stamp: 'ldmaf 5/25/2022 18:04:56'!
test01xxx
	|transfer sendingAccount receivingAccount |
	sendingAccount _ ReceptiveAccount new.
	receivingAccount _ ReceptiveAccount new.
	transfer _ Transfer from: sendingAccount to: receivingAccount of: 50.
	self assert: (transfer value = 50).
	self assert: (sendingAccount balance = -50).
	self assert: (receivingAccount balance = 50).! !

!testRun: #TransferTest #test01xxx stamp: 'ldmaf 5/25/2022 18:07:16'!
ERROR!
!Transfer class methodsFor: 'instance creation' stamp: 'ldmaf 5/25/2022 18:07:20'!
from: aReceptiveAccount to: aReceptiveAccount2 of: aSmallInteger 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFrom: aReceptiveAccount to: aReceptiveAccount2 of: aSmallInteger ! !
!Transfer class methodsFor: 'instance creation' stamp: 'ldmaf 5/25/2022 18:10:09' prior: 50474868!
from: aSendingAccount to: aReceivingAccount of: anAmount 
	Deposit register: anAmount on: aReceivingAccount.
	Withdraw register: anAmount on: aSendingAccount.
	^self new with: anAmount.! !

!testRun: #TransferTest #test01xxx stamp: 'ldmaf 5/25/2022 18:10:16'!
ERROR!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ldmaf 5/25/2022 18:10:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ldmaf 5/25/2022 18:10:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ldmaf 5/25/2022 18:10:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ldmaf 5/25/2022 18:10:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ldmaf 5/25/2022 18:10:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ldmaf 5/25/2022 18:10:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ldmaf 5/25/2022 18:10:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ldmaf 5/25/2022 18:10:23'!
PASSED!

!testRun: #TransferTest #test01xxx stamp: 'ldmaf 5/25/2022 18:10:27'!
ERROR!
!Transfer methodsFor: 'init' stamp: 'ldmaf 5/25/2022 18:10:34'!
with: aSmallInteger 
	self shouldBeImplemented.! !
!Transfer methodsFor: 'init' stamp: 'ldmaf 5/25/2022 18:10:50' prior: 50474923!
with: anAmount
	transferValue  _ anAmount.! !

!testRun: #TransferTest #test01xxx stamp: 'ldmaf 5/25/2022 18:10:53'!
FAILURE!

!testRun: #TransferTest #test01xxx stamp: 'ldmaf 5/25/2022 18:10:53'!
FAILURE!
!Transfer methodsFor: 'nil' stamp: 'ldmaf 5/25/2022 18:11:39'!
isOf: anAmount
	^anAmount = transferValue.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 18:11:48' prior: 50474852!
test01xxx
	|transfer sendingAccount receivingAccount |
	sendingAccount _ ReceptiveAccount new.
	receivingAccount _ ReceptiveAccount new.
	transfer _ Transfer from: sendingAccount to: receivingAccount of: 50.
	self assert: (transfer isOf: 50).
	self assert: (sendingAccount balance = -50).
	self assert: (receivingAccount balance = 50).! !

!testRun: #TransferTest #test01xxx stamp: 'ldmaf 5/25/2022 18:11:49'!
PASSED!

!testRun: #TransferTest #test01xxx stamp: 'ldmaf 5/25/2022 18:11:49'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 18:13:30'!
test01ATransferBetweenTwoAccountsReflectsTheSameBalance
	|transfer sendingAccount receivingAccount |
	sendingAccount _ ReceptiveAccount new.
	receivingAccount _ ReceptiveAccount new.
	transfer _ Transfer from: sendingAccount to: receivingAccount of: 50.
	self assert: (transfer isOf: 50).
	self assert: (sendingAccount balance = -50).
	self assert: (receivingAccount balance = 50).! !

!methodRemoval: TransferTest #test01xxx stamp: 'ldmaf 5/25/2022 18:13:30'!
test01xxx
	|transfer sendingAccount receivingAccount |
	sendingAccount _ ReceptiveAccount new.
	receivingAccount _ ReceptiveAccount new.
	transfer _ Transfer from: sendingAccount to: receivingAccount of: 50.
	self assert: (transfer isOf: 50).
	self assert: (sendingAccount balance = -50).
	self assert: (receivingAccount balance = 50).!

!testRun: #TransferTest #test01ATransferBetweenTwoAccountsReflectsTheSameBalance stamp: 'ldmaf 5/25/2022 18:13:33'!
PASSED!

!testRun: #TransferTest #test01ATransferBetweenTwoAccountsReflectsTheSameBalance stamp: 'ldmaf 5/25/2022 18:13:33'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 18:31:24'!
test02xxx
	|transfer sendingAccount receivingAccount |
	sendingAccount _ ReceptiveAccount new.
	receivingAccount _ ReceptiveAccount new.
	transfer _ Transfer from: sendingAccount to: receivingAccount of: 50.
	self assert: (sendingAccount hasRegistered: transfer).
	self assert: (receivingAccount hasRegistered: transfer).! !

!testRun: #TransferTest #test02xxx stamp: 'ldmaf 5/25/2022 18:31:26'!
FAILURE!
!ReceptiveAccount methodsFor: 'testing' stamp: 'ldmaf 5/25/2022 18:44:01' prior: 50474700 overrides: 50474490!
hasRegistered: aTransaction
	(aTransaction isKindOf: Transfer) ifTrue: [^true].
	^ transactions includes: aTransaction 
! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ldmaf 5/25/2022 18:44:05'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ldmaf 5/25/2022 18:44:05'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ldmaf 5/25/2022 18:44:05'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ldmaf 5/25/2022 18:44:05'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ldmaf 5/25/2022 18:44:05'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ldmaf 5/25/2022 18:44:05'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ldmaf 5/25/2022 18:44:05'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ldmaf 5/25/2022 18:44:05'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ldmaf 5/25/2022 18:44:05'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ldmaf 5/25/2022 18:44:05'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ldmaf 5/25/2022 18:44:05'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ldmaf 5/25/2022 18:44:05'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ldmaf 5/25/2022 18:44:05'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ldmaf 5/25/2022 18:44:05'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ldmaf 5/25/2022 18:44:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ldmaf 5/25/2022 18:44:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ldmaf 5/25/2022 18:44:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ldmaf 5/25/2022 18:44:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ldmaf 5/25/2022 18:44:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ldmaf 5/25/2022 18:44:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ldmaf 5/25/2022 18:44:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ldmaf 5/25/2022 18:44:08'!
PASSED!

!testRun: #TransferTest #test01ATransferBetweenTwoAccountsReflectsTheSameBalance stamp: 'ldmaf 5/25/2022 18:44:11'!
PASSED!

!testRun: #TransferTest #test02xxx stamp: 'ldmaf 5/25/2022 18:44:11'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 18:44:51'!
test02ATransferBetweenTwoAccountsIsRegisteredOnBothAccounts
	|transfer sendingAccount receivingAccount |
	sendingAccount _ ReceptiveAccount new.
	receivingAccount _ ReceptiveAccount new.
	transfer _ Transfer from: sendingAccount to: receivingAccount of: 50.
	self assert: (sendingAccount hasRegistered: transfer).
	self assert: (receivingAccount hasRegistered: transfer).! !

!methodRemoval: TransferTest #test02xxx stamp: 'ldmaf 5/25/2022 18:44:55'!
test02xxx
	|transfer sendingAccount receivingAccount |
	sendingAccount _ ReceptiveAccount new.
	receivingAccount _ ReceptiveAccount new.
	transfer _ Transfer from: sendingAccount to: receivingAccount of: 50.
	self assert: (sendingAccount hasRegistered: transfer).
	self assert: (receivingAccount hasRegistered: transfer).!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 18:45:42'!
test03xxxx
	|transfer sendingAccount receivingAccount anotherAccount |
	sendingAccount _ ReceptiveAccount new.
	receivingAccount _ ReceptiveAccount new.
	anotherAccount _ ReceptiveAccount new.
	transfer _ Transfer from: sendingAccount to: receivingAccount of: 50.
	self assert: false.! !

AccountTransaction subclass: #Transfer
	instanceVariableNames: 'transferValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'ldmaf 5/25/2022 18:48:13'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: 'transferValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'ldmaf 5/25/2022 18:59:42'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 18:59:42' prior: 50474928!
with: anAmount
	value  _ anAmount.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 18:59:42' prior: 50474937!
isOf: anAmount
	^anAmount = value.! !

AccountTransaction subclass: #Transfer
	instanceVariableNames: 'value sendingAccount receivingAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'ldmaf 5/25/2022 19:01:11'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: 'value sendingAccount receivingAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer class methodsFor: 'instance creation' stamp: 'ldmaf 5/25/2022 19:03:33' prior: 50474879!
from: aSendingAccount to: aReceivingAccount of: anAmount 
	Deposit register: anAmount on: aReceivingAccount.
	Withdraw register: anAmount on: aSendingAccount.
	^self new withSender: aSendingAccount andReceiver: aReceivingAccount of: anAmount.! !
!Transfer class methodsFor: 'instance creation' stamp: 'ldmaf 5/25/2022 19:04:09' prior: 50475197!
from: aSendingAccount to: aReceivingAccount of: anAmount 
	^self new withSender: aSendingAccount andReceiver: aReceivingAccount of: anAmount.! !
!Transfer methodsFor: 'init' stamp: 'ldmaf 5/25/2022 19:07:57'!
withSender: aSendingAccount andReceiver: aReceivingAccount of: anAmount.
	sendingAccount _ aSendingAccount.
	receivingAccount _ aReceivingAccount.
	value  _ anAmount.
	! !
!Transfer methodsFor: 'init' stamp: 'ldmaf 5/25/2022 19:08:26' prior: 50475215!
withSender: aSendingAccount andReceiver: aReceivingAccount of: anAmount.
	sendingAccount _ aSendingAccount.
	receivingAccount _ aReceivingAccount.
	value  _ anAmount.
	aSendingAccount register: self.
	aReceivingAccount register: self.! !
!Transfer methodsFor: 'value' stamp: 'ldmaf 5/25/2022 19:09:16' overrides: 50474728!
value
	^value.! !
!Transfer methodsFor: 'balance' stamp: 'ldmaf 5/25/2022 19:16:29' overrides: 50474732!
affectBalance: aBalance

	^aBalance + value ! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'ldmaf 5/25/2022 19:17:41'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'ldmaf 5/25/2022 19:17:41'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'ldmaf 5/25/2022 19:17:41'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'ldmaf 5/25/2022 19:17:41'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'ldmaf 5/25/2022 19:17:41'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'ldmaf 5/25/2022 19:17:41'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'ldmaf 5/25/2022 19:17:41'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'ldmaf 5/25/2022 19:17:41'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'ldmaf 5/25/2022 19:17:41'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'ldmaf 5/25/2022 19:17:41'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'ldmaf 5/25/2022 19:17:41'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'ldmaf 5/25/2022 19:17:41'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'ldmaf 5/25/2022 19:17:41'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'ldmaf 5/25/2022 19:17:41'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'ldmaf 5/25/2022 19:17:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ldmaf 5/25/2022 19:17:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ldmaf 5/25/2022 19:17:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ldmaf 5/25/2022 19:17:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ldmaf 5/25/2022 19:17:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ldmaf 5/25/2022 19:17:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ldmaf 5/25/2022 19:17:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ldmaf 5/25/2022 19:17:44'!
PASSED!

Transfer subclass: #DepositTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositTransfer category: 'Portfolio-Solucion' stamp: 'ldmaf 5/25/2022 19:30:46'!
Transfer subclass: #DepositTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transfer subclass: #WithdrawTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #WithdrawTransfer category: 'Portfolio-Solucion' stamp: 'ldmaf 5/25/2022 19:30:54'!
Transfer subclass: #WithdrawTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'balance' stamp: 'ldmaf 5/25/2022 19:31:20' prior: 50475238 overrides: 50474732!
affectBalance: aBalance
	self subclassResponsibility ! !
!DepositTransfer methodsFor: 'balance' stamp: 'ldmaf 5/25/2022 19:32:12' overrides: 50475353!
affectBalance: aBalance
	^aBalance + value.! !
!WithdrawTransfer methodsFor: 'balance' stamp: 'ldmaf 5/25/2022 19:32:48' overrides: 50475353!
affectBalance: aBalance
	^aBalance - value.! !
!Transfer methodsFor: 'init' stamp: 'ldmaf 5/25/2022 19:41:46' prior: 50475223!
withSender: aSendingAccount andReceiver: aReceivingAccount of: anAmount.
	sendingAccount _ aSendingAccount.
	receivingAccount _ aReceivingAccount.
	value  _ anAmount.
	aSendingAccount register: (WithdrawTransfer of: anAmount on: self).
	aReceivingAccount register: (DepositTransfer of: anAmount on: self).! !
!DepositTransfer class methodsFor: 'no messages' stamp: 'ldmaf 5/25/2022 19:43:46'!
of: anAmount on: aTransfer
	^DepositTransfer new with: anAmount on: aTransfer.! !
!DepositTransfer class methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 19:43:58' prior: 50475380!
of: anAmount on: aTransfer
	^(DepositTransfer new) with: anAmount on: aTransfer.! !

!classDefinition: #DepositTransfer category: 'Portfolio-Solucion' stamp: 'ldmaf 5/25/2022 19:44:57'!
Transfer subclass: #DepositTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!DepositTransfer methodsFor: 'nil' stamp: 'ldmaf 5/25/2022 19:44:56'!
on: aTransfer.
	^transfer _ aTransfer.! !
!DepositTransfer class methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 19:45:04' prior: 50475386!
of: anAmount on: aTransfer
	^(DepositTransfer new) on: aTransfer.! !
!DepositTransfer class methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 19:45:40'!
on: aTransfer
	^(DepositTransfer new) on: aTransfer.! !

!methodRemoval: DepositTransfer class #on: stamp: 'ldmaf 5/25/2022 19:45:43'!
on: aTransfer
	^(DepositTransfer new) on: aTransfer.!
!DepositTransfer class methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 19:45:54'!
on: aTransfer
	^(DepositTransfer new) on: aTransfer.! !

!methodRemoval: DepositTransfer class #of:on: stamp: 'ldmaf 5/25/2022 19:46:07'!
of: anAmount on: aTransfer
	^(DepositTransfer new) on: aTransfer.!

!classDefinition: #WithdrawTransfer category: 'Portfolio-Solucion' stamp: 'ldmaf 5/25/2022 19:46:47'!
Transfer subclass: #WithdrawTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!WithdrawTransfer methodsFor: 'balance' stamp: 'ldmaf 5/25/2022 19:46:46'!
on: aTransfer
	transfer _ aTransfer.! !
!WithdrawTransfer class methodsFor: 'no messages' stamp: 'ldmaf 5/25/2022 19:46:59'!
on: aTransfer
	^(DepositTransfer new) on: aTransfer.! !
!Transfer methodsFor: 'init' stamp: 'ldmaf 5/25/2022 19:47:39' prior: 50475367!
withSender: aSendingAccount andReceiver: aReceivingAccount of: anAmount.
	sendingAccount _ aSendingAccount.
	receivingAccount _ aReceivingAccount.
	value  _ anAmount.
	aSendingAccount register: (WithdrawTransfer on: self).
	aReceivingAccount register: (DepositTransfer on: self).! !
!DepositTransfer methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 19:49:01' overrides: 50475234!
value	
	^transfer value.! !
!WithdrawTransfer methodsFor: 'balance' stamp: 'ldmaf 5/25/2022 19:49:07' overrides: 50475234!
value	
	^transfer value.! !

!testRun: #TransferTest #test01ATransferBetweenTwoAccountsReflectsTheSameBalance stamp: 'ldmaf 5/25/2022 19:49:17'!
ERROR!

!testRun: #TransferTest #test01ATransferBetweenTwoAccountsReflectsTheSameBalance stamp: 'ldmaf 5/25/2022 19:49:17'!
ERROR!

!testRun: #TransferTest #test01ATransferBetweenTwoAccountsReflectsTheSameBalance stamp: 'ldmaf 5/25/2022 19:49:36'!
ERROR!

!testRun: #TransferTest #test01ATransferBetweenTwoAccountsReflectsTheSameBalance stamp: 'ldmaf 5/25/2022 19:49:36'!
ERROR!

!testRun: #TransferTest #test01ATransferBetweenTwoAccountsReflectsTheSameBalance stamp: 'ldmaf 5/25/2022 19:50:27'!
ERROR!

!testRun: #TransferTest #test01ATransferBetweenTwoAccountsReflectsTheSameBalance stamp: 'ldmaf 5/25/2022 19:50:27'!
ERROR!

	WithdrawTransfer on: self.!
!DepositTransfer class methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 19:52:38' prior: 50475419!
on: aTransfer
	^DepositTransfer new on: aTransfer.! !
!WithdrawTransfer class methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 19:52:48' prior: 50475440!
on: aTransfer
	^DepositTransfer new on: aTransfer.! !
!WithdrawTransfer class methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 19:53:12' prior: 50475497!
on: aTransfer
	^WithdrawTransfer new on: aTransfer.! !

!testRun: #TransferTest #test01ATransferBetweenTwoAccountsReflectsTheSameBalance stamp: 'ldmaf 5/25/2022 19:53:34'!
ERROR!

!testRun: #TransferTest #test01ATransferBetweenTwoAccountsReflectsTheSameBalance stamp: 'ldmaf 5/25/2022 19:53:34'!
ERROR!

!testRun: #TransferTest #test01ATransferBetweenTwoAccountsReflectsTheSameBalance stamp: 'ldmaf 5/25/2022 19:53:50'!
ERROR!
!WithdrawTransfer methodsFor: 'balance' stamp: 'ldmaf 5/25/2022 19:54:22' prior: 50475363 overrides: 50475353!
affectBalance: aBalance
	^aBalance - (self value).! !
!DepositTransfer methodsFor: 'balance' stamp: 'ldmaf 5/25/2022 19:54:31' prior: 50475358 overrides: 50475353!
affectBalance: aBalance
	^aBalance + (self value).! !

!testRun: #TransferTest #test01ATransferBetweenTwoAccountsReflectsTheSameBalance stamp: 'ldmaf 5/25/2022 19:54:34'!
ERROR!

!testRun: #TransferTest #test01ATransferBetweenTwoAccountsReflectsTheSameBalance stamp: 'ldmaf 5/25/2022 19:54:34'!
ERROR!

	WithdrawTransfer on: self.!

	DepositTransfer on: self.!
!DepositTransfer methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 19:56:10' prior: 50475399!
on: aTransfer.
	transfer _ aTransfer.! !

!testRun: #TransferTest #test01ATransferBetweenTwoAccountsReflectsTheSameBalance stamp: 'ldmaf 5/25/2022 19:56:16'!
PASSED!

!testRun: #TransferTest #test02ATransferBetweenTwoAccountsIsRegisteredOnBothAccounts stamp: 'ldmaf 5/25/2022 19:56:22'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 19:56:59' prior: 50475140!
test03xxxx
	|transfer sendingAccount receivingAccount anotherAccount |
	sendingAccount _ ReceptiveAccount new.
	receivingAccount _ ReceptiveAccount new.
	anotherAccount _ ReceptiveAccount new.
	transfer _ Transfer from: sendingAccount to: receivingAccount of: 50.
	self assert: (anotherAccount hasRegistered: transfer).! !

!testRun: #TransferTest #test03xxxx stamp: 'ldmaf 5/25/2022 19:57:01'!
PASSED!

!testRun: #TransferTest #test01ATransferBetweenTwoAccountsReflectsTheSameBalance stamp: 'ldmaf 5/25/2022 19:57:01'!
PASSED!

!testRun: #TransferTest #test02ATransferBetweenTwoAccountsIsRegisteredOnBothAccounts stamp: 'ldmaf 5/25/2022 19:57:01'!
PASSED!

!testRun: #TransferTest #test03xxxx stamp: 'ldmaf 5/25/2022 19:57:01'!
PASSED!
!ReceptiveAccount methodsFor: 'testing' stamp: 'ldmaf 5/25/2022 19:57:10' prior: 50475014 overrides: 50474490!
hasRegistered: aTransaction
	^ transactions includes: aTransaction 
! !

!testRun: #TransferTest #test02ATransferBetweenTwoAccountsIsRegisteredOnBothAccounts stamp: 'ldmaf 5/25/2022 19:57:14'!
FAILURE!

!testRun: #TransferTest #test02ATransferBetweenTwoAccountsIsRegisteredOnBothAccounts stamp: 'ldmaf 5/25/2022 19:57:14'!
FAILURE!
!ReceptiveAccount methodsFor: 'testing' stamp: 'ldmaf 5/25/2022 20:00:16' prior: 50475581 overrides: 50474490!
hasRegistered: aTransaction
	( aTransaction isKindOf: Transfer ) ifTrue: [
			^ ((transactions includes: (aTransaction depositTransfer)) or: [transactions includes: (aTransaction withdrawTransfer)]).
		].
	^ transactions includes: aTransaction 
! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'ldmaf 5/25/2022 20:01:24'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: 'value sendingAccount receivingAccount withdrawTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'ldmaf 5/25/2022 20:01:25'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: 'value sendingAccount receivingAccount withdrawTransfer depositTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'init' stamp: 'ldmaf 5/25/2022 20:01:41' prior: 50475445!
withSender: aSendingAccount andReceiver: aReceivingAccount of: anAmount.
	sendingAccount _ aSendingAccount.
	receivingAccount _ aReceivingAccount.
	withdrawTransfer _ (WithdrawTransfer on: self).
	depositTransfer _ (DepositTransfer on: self).
	value  _ anAmount.
	aSendingAccount register: withdrawTransfer.
	aReceivingAccount register: depositTransfer.! !
!Transfer methodsFor: 'value' stamp: 'ldmaf 5/25/2022 20:02:02'!
withdrawTransfer
	^withdrawTransfer.! !
!Transfer methodsFor: 'value' stamp: 'ldmaf 5/25/2022 20:02:08'!
depositTransfer
	^depositTransfer.! !

!testRun: #TransferTest #test02ATransferBetweenTwoAccountsIsRegisteredOnBothAccounts stamp: 'ldmaf 5/25/2022 20:02:17'!
PASSED!

!testRun: #TransferTest #test02ATransferBetweenTwoAccountsIsRegisteredOnBothAccounts stamp: 'ldmaf 5/25/2022 20:02:20'!
PASSED!

!testRun: #TransferTest #test03xxxx stamp: 'ldmaf 5/25/2022 20:02:23'!
FAILURE!

!testRun: #TransferTest #test03xxxx stamp: 'ldmaf 5/25/2022 20:02:23'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 20:02:41' prior: 50475554!
test03xxxx
	|transfer sendingAccount receivingAccount anotherAccount |
	sendingAccount _ ReceptiveAccount new.
	receivingAccount _ ReceptiveAccount new.
	anotherAccount _ ReceptiveAccount new.
	transfer _ Transfer from: sendingAccount to: receivingAccount of: 50.
	self assert: ((anotherAccount hasRegistered: transfer) not).! !

!testRun: #TransferTest #test03xxxx stamp: 'ldmaf 5/25/2022 20:02:43'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 20:03:29'!
test03ATransferIsOnlyRegisteredInReceiverAndSenderAccount
	|transfer sendingAccount receivingAccount anotherAccount |
	sendingAccount _ ReceptiveAccount new.
	receivingAccount _ ReceptiveAccount new.
	anotherAccount _ ReceptiveAccount new.
	transfer _ Transfer from: sendingAccount to: receivingAccount of: 50.
	self assert: ((anotherAccount hasRegistered: transfer) not).! !

!methodRemoval: TransferTest #test03xxxx stamp: 'ldmaf 5/25/2022 20:03:33'!
test03xxxx
	|transfer sendingAccount receivingAccount anotherAccount |
	sendingAccount _ ReceptiveAccount new.
	receivingAccount _ ReceptiveAccount new.
	anotherAccount _ ReceptiveAccount new.
	transfer _ Transfer from: sendingAccount to: receivingAccount of: 50.
	self assert: ((anotherAccount hasRegistered: transfer) not).!
!Transfer methodsFor: 'nil' stamp: 'ldmaf 5/25/2022 20:16:28' overrides: 16901772!
= aTransaction
	^aTransaction = self.! !
!DepositTransfer methodsFor: 'nil' stamp: 'ldmaf 5/25/2022 20:17:41' overrides: 50475704!
= aTransaction
	^aTransaction = transfer.! !

!methodRemoval: Transfer #= stamp: 'ldmaf 5/25/2022 20:18:26'!
= aTransaction
	^aTransaction = self.!
!WithdrawTransfer methodsFor: 'nil' stamp: 'ldmaf 5/25/2022 20:18:51' overrides: 16901772!
= aTransaction
	^aTransaction = transfer.! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'ldmaf 5/25/2022 20:19:38' prior: 50475595 overrides: 50474490!
hasRegistered: aTransaction
	^ transactions includes: aTransaction 
! !

!testRun: #TransferTest #test01ATransferBetweenTwoAccountsReflectsTheSameBalance stamp: 'ldmaf 5/25/2022 20:19:42'!
PASSED!

!testRun: #TransferTest #test02ATransferBetweenTwoAccountsIsRegisteredOnBothAccounts stamp: 'ldmaf 5/25/2022 20:19:47'!
PASSED!

!testRun: #TransferTest #test03ATransferIsOnlyRegisteredInReceiverAndSenderAccount stamp: 'ldmaf 5/25/2022 20:19:50'!
PASSED!

!testRun: #TransferTest #test01ATransferBetweenTwoAccountsReflectsTheSameBalance stamp: 'ldmaf 5/25/2022 20:20:02'!
PASSED!

!testRun: #TransferTest #test02ATransferBetweenTwoAccountsIsRegisteredOnBothAccounts stamp: 'ldmaf 5/25/2022 20:20:02'!
PASSED!

!testRun: #TransferTest #test03ATransferIsOnlyRegisteredInReceiverAndSenderAccount stamp: 'ldmaf 5/25/2022 20:20:02'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 20:23:23'!
test04ATransferOfAmountZeroThrowsAnError
	|transfer sendingAccount receivingAccount|
	sendingAccount _ ReceptiveAccount new.
	receivingAccount _ ReceptiveAccount new.
	self should: [
			Transfer from: sendingAccount to: receivingAccount of: 0.
		] raise: Error 
	withExceptionDo: [:error | self assert: error messageText equals: (Transfer cannotCreateAZeroAmountTransfer)].
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 20:23:31' prior: 50475751!
test04ATransferOfAmountZeroThrowsAnError
	|sendingAccount receivingAccount|
	sendingAccount _ ReceptiveAccount new.
	receivingAccount _ ReceptiveAccount new.
	self should: [
			Transfer from: sendingAccount to: receivingAccount of: 0.
		] raise: Error 
	withExceptionDo: [:error | self assert: error messageText equals: (Transfer cannotCreateAZeroAmountTransfer)].
! !

!testRun: #TransferTest #test04ATransferOfAmountZeroThrowsAnError stamp: 'ldmaf 5/25/2022 20:23:34'!
FAILURE!

!testRun: #TransferTest #test04ATransferOfAmountZeroThrowsAnError stamp: 'ldmaf 5/25/2022 20:23:34'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'ldmaf 5/25/2022 20:24:28'!
cannotCreateAZeroAmountTransfer
	^'Cannot create a transfer of an amount of zero.'.! !

!testRun: #TransferTest #test04ATransferOfAmountZeroThrowsAnError stamp: 'ldmaf 5/25/2022 20:24:33'!
FAILURE!

!testRun: #TransferTest #test04ATransferOfAmountZeroThrowsAnError stamp: 'ldmaf 5/25/2022 20:24:33'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'ldmaf 5/25/2022 20:25:07' prior: 50475208!
from: aSendingAccount to: aReceivingAccount of: anAmount 
	(anAmount = 0) ifTrue: [self error: Transfer cannotCreateAZeroAmountTransfer].
	^self new withSender: aSendingAccount andReceiver: aReceivingAccount of: anAmount.! !

!testRun: #TransferTest #test01ATransferBetweenTwoAccountsReflectsTheSameBalance stamp: 'ldmaf 5/25/2022 20:25:09'!
PASSED!

!testRun: #TransferTest #test02ATransferBetweenTwoAccountsIsRegisteredOnBothAccounts stamp: 'ldmaf 5/25/2022 20:25:09'!
PASSED!

!testRun: #TransferTest #test03ATransferIsOnlyRegisteredInReceiverAndSenderAccount stamp: 'ldmaf 5/25/2022 20:25:09'!
PASSED!

!testRun: #TransferTest #test04ATransferOfAmountZeroThrowsAnError stamp: 'ldmaf 5/25/2022 20:25:09'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 20:25:51'!
test05ATransferOfNegativeAmountThrowsAnError
	|sendingAccount receivingAccount|
	sendingAccount _ ReceptiveAccount new.
	receivingAccount _ ReceptiveAccount new.
	self should: [
			Transfer from: sendingAccount to: receivingAccount of: (-1).
		] raise: Error 
	withExceptionDo: [:error | self assert: error messageText equals: (Transfer cannotCreateAZeroAmountTransfer)].
! !

!testRun: #TransferTest #test05ATransferOfNegativeAmountThrowsAnError stamp: 'ldmaf 5/25/2022 20:25:53'!
FAILURE!

!testRun: #TransferTest #test05ATransferOfNegativeAmountThrowsAnError stamp: 'ldmaf 5/25/2022 20:25:53'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'ldmaf 5/25/2022 20:26:18' prior: 50475788!
cannotCreateAZeroAmountTransfer
	^'Cannot create a transfer of an amount of zero.'.! !
!Transfer class methodsFor: 'instance creation' stamp: 'ldmaf 5/25/2022 20:26:33'!
cannotCreateAZeroOrLessAmountTransfer
	^'Cannot create a transfer of an amount of zero.'.! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 20:26:33' prior: 50475801!
from: aSendingAccount to: aReceivingAccount of: anAmount 
	(anAmount = 0) ifTrue: [self error: Transfer cannotCreateAZeroOrLessAmountTransfer].
	^self new withSender: aSendingAccount andReceiver: aReceivingAccount of: anAmount.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 20:26:33' prior: 50475826!
test05ATransferOfNegativeAmountThrowsAnError
	|sendingAccount receivingAccount|
	sendingAccount _ ReceptiveAccount new.
	receivingAccount _ ReceptiveAccount new.
	self should: [
			Transfer from: sendingAccount to: receivingAccount of: (-1).
		] raise: Error 
	withExceptionDo: [:error | self assert: error messageText equals: (Transfer cannotCreateAZeroOrLessAmountTransfer)].
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 20:26:33' prior: 50475766!
test04ATransferOfAmountZeroThrowsAnError
	|sendingAccount receivingAccount|
	sendingAccount _ ReceptiveAccount new.
	receivingAccount _ ReceptiveAccount new.
	self should: [
			Transfer from: sendingAccount to: receivingAccount of: 0.
		] raise: Error 
	withExceptionDo: [:error | self assert: error messageText equals: (Transfer cannotCreateAZeroOrLessAmountTransfer)].
! !

!methodRemoval: Transfer class #cannotCreateAZeroAmountTransfer stamp: 'ldmaf 5/25/2022 20:26:33'!
cannotCreateAZeroAmountTransfer
	^'Cannot create a transfer of an amount of zero.'.!
!Transfer class methodsFor: 'instance creation' stamp: 'ldmaf 5/25/2022 20:26:43' prior: 50475862!
from: aSendingAccount to: aReceivingAccount of: anAmount 
	(anAmount <= 0) ifTrue: [self error: Transfer cannotCreateAZeroOrLessAmountTransfer].
	^self new withSender: aSendingAccount andReceiver: aReceivingAccount of: anAmount.! !
!Transfer class methodsFor: 'instance creation' stamp: 'ldmaf 5/25/2022 20:26:50' prior: 50475855!
cannotCreateAZeroOrLessAmountTransfer
	^'Cannot create a transfer of an amount of zero or less.'.! !

!testRun: #TransferTest #test01ATransferBetweenTwoAccountsReflectsTheSameBalance stamp: 'ldmaf 5/25/2022 20:27:01'!
PASSED!

!testRun: #TransferTest #test02ATransferBetweenTwoAccountsIsRegisteredOnBothAccounts stamp: 'ldmaf 5/25/2022 20:27:01'!
PASSED!

!testRun: #TransferTest #test03ATransferIsOnlyRegisteredInReceiverAndSenderAccount stamp: 'ldmaf 5/25/2022 20:27:01'!
PASSED!

!testRun: #TransferTest #test04ATransferOfAmountZeroThrowsAnError stamp: 'ldmaf 5/25/2022 20:27:01'!
PASSED!

!testRun: #TransferTest #test05ATransferOfNegativeAmountThrowsAnError stamp: 'ldmaf 5/25/2022 20:27:01'!
PASSED!

----SNAPSHOT----(25 May 2022 22:59:22) CuisUniversity-5096.image priorSource: 4557982!

TestCase subclass: #ReportsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportsTest category: 'Portfolio-Solucion' stamp: 'ldmaf 5/25/2022 23:22:01'!
TestCase subclass: #ReportsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportsTest methodsFor: 'nil' stamp: 'ldmaf 5/25/2022 23:26:12'!
test01xxx
	|account|
	account _ ReceptiveAccount new.
	Deposit register: 50 on: account.
	self assert: ( (account accountSummaryReport) equals: 'Deposito por 100.')! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 23:26:24' prior: 50475960!
test01xxx
	|account|
	account _ ReceptiveAccount new.
	Deposit register: 50 on: account.
	self assert: ( (account accountSummaryReport) = 'Deposito por 100.').! !

!testRun: #ReportsTest #test01xxx stamp: 'ldmaf 5/25/2022 23:26:27'!
ERROR!

!testRun: #ReportsTest #test01xxx stamp: 'ldmaf 5/25/2022 23:26:27'!
ERROR!
!ReceptiveAccount methodsFor: 'reports' stamp: 'ldmaf 5/25/2022 23:26:40'!
accountSummaryReport
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'ldmaf 5/25/2022 23:26:57' prior: 50475982!
accountSummaryReport
	^'Deposito por 100.'! !

!testRun: #ReportsTest #test01xxx stamp: 'ldmaf 5/25/2022 23:27:02'!
PASSED!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 23:27:23'!
test01AccountSummaryReportOfSingleTransactionIsCorrectlyDisplayed
	|account|
	account _ ReceptiveAccount new.
	Deposit register: 50 on: account.
	self assert: ( (account accountSummaryReport) = 'Deposito por 100.').! !

!methodRemoval: ReportsTest #test01xxx stamp: 'ldmaf 5/25/2022 23:27:23'!
test01xxx
	|account|
	account _ ReceptiveAccount new.
	Deposit register: 50 on: account.
	self assert: ( (account accountSummaryReport) = 'Deposito por 100.').!

'asdasdasda\nasdasdas'!

'asdasdasda\nasdasdas' print!

'asdasdasda <br> asdasd'!

msg := 'hello world!!'.!

msg := 'hello world!! \\n asdas'.!

msg := 'hello world!!\n asda' printText !

#(1 2 3) do: [:a | 
		'puto' print
	]!

		'puto' print!

#(1 2 3) do: [:a | 
		'puto' print
	]!

----End fileIn of /home/lisandro/Documents/Facultad/ING1/linux64/Packages/TerseGuide.pck.st----!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 23:36:53'!
test02yyy
	|account|
	account _ ReceptiveAccount new.
	Deposit register: 50 on: account. 
	Withdraw register: 100 on: account.
	Deposit register: 50 on: account.
	self assert: (account accountSummaryReport = 'Deposito por 50. Extraccion por 100. Deposito por 50. Balance = 0').! !

!testRun: #ReportsTest #test02yyy stamp: 'ldmaf 5/25/2022 23:36:55'!
FAILURE!

!testRun: #ReportsTest #test02yyy stamp: 'ldmaf 5/25/2022 23:36:55'!
FAILURE!

'asda' + 5 + 'asdasd'!

'asda' + (5 asString) + 'asdasd'!

5 asString !

'asda' , (5 asString) , 'asdasd'!

----STARTUP---- (25 May 2022 23:41:16) as /home/lisandro/Documents/Facultad/ING1/linux64/CuisUniversity-5096.image!


!testRun: #TransferTest #test01ATransferBetweenTwoAccountsReflectsTheSameBalance stamp: 'ldmaf 5/25/2022 23:41:59'!
PASSED!

!testRun: #TransferTest #test02ATransferBetweenTwoAccountsIsRegisteredOnBothAccounts stamp: 'ldmaf 5/25/2022 23:41:59'!
PASSED!

!testRun: #TransferTest #test03ATransferIsOnlyRegisteredInReceiverAndSenderAccount stamp: 'ldmaf 5/25/2022 23:41:59'!
PASSED!

!testRun: #TransferTest #test04ATransferOfAmountZeroThrowsAnError stamp: 'ldmaf 5/25/2022 23:41:59'!
PASSED!

!testRun: #TransferTest #test05ATransferOfNegativeAmountThrowsAnError stamp: 'ldmaf 5/25/2022 23:41:59'!
PASSED!

TestCase subclass: #ReportsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportsTest category: 'Portfolio-Solucion' stamp: 'ldmaf 5/25/2022 23:42:54'!
TestCase subclass: #ReportsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportsTest methodsFor: 'no messages' stamp: 'ldmaf 5/25/2022 23:45:01'!
test01AccountSummaryReportFromAccountWithNoTransactionsIsCorrectlyDisplayed
	
	|account|
	
	account _ ReceptiveAccount new.
	self assert: (account accountSummaryReport = 'Balance 0').! !

!testRun: #ReportsTest #test01AccountSummaryReportFromAccountWithNoTransactionsIsCorrectlyDisplayed stamp: 'ldmaf 5/25/2022 23:45:05'!
ERROR!

!testRun: #ReportsTest #test01AccountSummaryReportFromAccountWithNoTransactionsIsCorrectlyDisplayed stamp: 'ldmaf 5/25/2022 23:45:05'!
ERROR!
!ReceptiveAccount methodsFor: 'reports' stamp: 'ldmaf 5/25/2022 23:45:12'!
accountSummaryReport
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'ldmaf 5/25/2022 23:45:19' prior: 50476001!
accountSummaryReport
	^'Balance 0'! !

!testRun: #ReportsTest #test01AccountSummaryReportFromAccountWithNoTransactionsIsCorrectlyDisplayed stamp: 'ldmaf 5/25/2022 23:45:21'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryReportFromAccountWithNoTransactionsIsCorrectlyDisplayed stamp: 'ldmaf 5/25/2022 23:45:23'!
PASSED!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 23:45:59'!
test02xxx
	
	|account|
	
	account _ ReceptiveAccount new.
	Deposit register: 50 on: account.
	self assert: (account accountSummaryReport = 'Deposito por 50. Balance 0').! !

!testRun: #ReportsTest #test02xxx stamp: 'ldmaf 5/25/2022 23:45:59'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'ldmaf 5/25/2022 23:50:35' prior: 50476006!
accountSummaryReport
	|res|
	res _ ''.
	transactions do: [:aTransaction |
			( aTransaction isKindOf: Deposit ) ifTrue: [res _ res , 'Deposito por ', (aTransaction value asString), '.' ].
		].
	res _ res , 'Balance ', (self balance asString). 
	^res.! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 23:50:50' prior: 50476019!
test02xxx
	
	|account|
	
	account _ ReceptiveAccount new.
	Deposit register: 50 on: account.
	self assert: (account accountSummaryReport = 'Deposito por 50. Balance 50').! !

!testRun: #ReportsTest #test02xxx stamp: 'ldmaf 5/25/2022 23:50:52'!
FAILURE!

!testRun: #ReportsTest #test02xxx stamp: 'ldmaf 5/25/2022 23:50:52'!
FAILURE!

	account accountSummaryReport !
!ReceptiveAccount methodsFor: 'reports' stamp: 'ldmaf 5/25/2022 23:51:23' prior: 50476030!
accountSummaryReport
	|res|
	res _ ''.
	transactions do: [:aTransaction |
			( aTransaction isKindOf: Deposit ) ifTrue: [res _ res , 'Deposito por ', (aTransaction value asString), '.' ].
		].
	res _ res , ' Balance ', (self balance asString). 
	^res.! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'ldmaf 5/25/2022 23:51:28' prior: 50476056!
accountSummaryReport
	|res|
	res _ ''.
	transactions do: [:aTransaction |
			( aTransaction isKindOf: Deposit ) ifTrue: [res _ res , 'Deposito por ', (aTransaction value asString), '. ' ].
		].
	res _ res , 'Balance ', (self balance asString). 
	^res.! !

!testRun: #ReportsTest #test01AccountSummaryReportFromAccountWithNoTransactionsIsCorrectlyDisplayed stamp: 'ldmaf 5/25/2022 23:51:32'!
PASSED!

!testRun: #ReportsTest #test02xxx stamp: 'ldmaf 5/25/2022 23:51:32'!
PASSED!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 23:51:52'!
test02AccountSummaryReportWithOneDepositDisplaysDepositInfoAndBalance
	
	|account|
	
	account _ ReceptiveAccount new.
	Deposit register: 50 on: account.
	self assert: (account accountSummaryReport = 'Deposito por 50. Balance 50').! !

!methodRemoval: ReportsTest #test02xxx stamp: 'ldmaf 5/25/2022 23:51:54'!
test02xxx
	
	|account|
	
	account _ ReceptiveAccount new.
	Deposit register: 50 on: account.
	self assert: (account accountSummaryReport = 'Deposito por 50. Balance 50').!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 23:52:28'!
test03xxx
	
	|account|
	
	account _ ReceptiveAccount new.
	Deposit register: 50 on: account.
	Withdraw register: 20 on: account.
	self assert: (account accountSummaryReport = 'Deposito por 50. Extraccion por 20. Balance 30').! !

!testRun: #ReportsTest #test03xxx stamp: 'ldmaf 5/25/2022 23:52:30'!
FAILURE!

!testRun: #ReportsTest #test03xxx stamp: 'ldmaf 5/25/2022 23:52:30'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'ldmaf 5/25/2022 23:52:52' prior: 50476067!
accountSummaryReport
	|res|
	res _ ''.
	transactions do: [:aTransaction |
			( aTransaction isKindOf: Deposit ) ifTrue: [res _ res , 'Deposito por ', (aTransaction value asString), '. ' ].
			( aTransaction isKindOf: Withdraw ) ifTrue: [res _ res , 'Extraccion por ', (aTransaction value asString), '. ' ].
		].
	res _ res , 'Balance ', (self balance asString). 
	^res.! !

!testRun: #ReportsTest #test03xxx stamp: 'ldmaf 5/25/2022 23:52:59'!
PASSED!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 23:53:25'!
test03AccountSummaryReportWithOneDepositAndOneWithdrawDisplaysBothTransactionsInfoPlusDisplay
	
	|account|
	
	account _ ReceptiveAccount new.
	Deposit register: 50 on: account.
	Withdraw register: 20 on: account.
	self assert: (account accountSummaryReport = 'Deposito por 50. Extraccion por 20. Balance 30').! !

!methodRemoval: ReportsTest #test03AccountSummaryReportWithOneDepositAndOneWithdrawDisplaysBothTransactionsInfoPlusDisplay stamp: 'ldmaf 5/25/2022 23:53:28'!
test03AccountSummaryReportWithOneDepositAndOneWithdrawDisplaysBothTransactionsInfoPlusDisplay
	
	|account|
	
	account _ ReceptiveAccount new.
	Deposit register: 50 on: account.
	Withdraw register: 20 on: account.
	self assert: (account accountSummaryReport = 'Deposito por 50. Extraccion por 20. Balance 30').!

----SNAPSHOT----(25 May 2022 23:53:38) CuisUniversity-5096.image priorSource: 4617441!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 23:54:35'!
test03AccountSummaryReportWithOneDepositAndOneWithdrawDisplaysBothTransactionsPlusBalance
	
	|account|
	
	account _ ReceptiveAccount new.
	Deposit register: 50 on: account.
	Withdraw register: 20 on: account.
	self assert: (account accountSummaryReport = 'Deposito por 50. Extraccion por 20. Balance 30').! !

!methodRemoval: ReportsTest #test03xxx stamp: 'ldmaf 5/25/2022 23:54:35'!
test03xxx
	
	|account|
	
	account _ ReceptiveAccount new.
	Deposit register: 50 on: account.
	Withdraw register: 20 on: account.
	self assert: (account accountSummaryReport = 'Deposito por 50. Extraccion por 20. Balance 30').!

!testRun: #ReportsTest #test03AccountSummaryReportWithOneDepositAndOneWithdrawDisplaysBothTransactionsPlusBalance stamp: 'ldmaf 5/25/2022 23:54:39'!
PASSED!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/25/2022 23:57:33'!
test04xxx
	
	|accountSender accountReceiver|
	
	accountSender _ ReceptiveAccount new.
	Deposit register: 50 on: accountSender.
	Withdraw register: 20 on: accountSender .
	accountReceiver _ ReceptiveAccount new.
	Transfer from: accountSender to: accountReceiver of: 10.
	
	self assert: (accountSender accountSummaryReport = 'Deposito por 50. Extraccion por 20. Salida por transferencia de 10. Balance 20').
	self assert: (accountReceiver accountSummaryReport = 'Entrada por transferencia de 10. Balance 10.').! !

!testRun: #ReportsTest #test04xxx stamp: 'ldmaf 5/25/2022 23:57:34'!
FAILURE!

!testRun: #ReportsTest #test04xxx stamp: 'ldmaf 5/25/2022 23:57:34'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'ldmaf 5/25/2022 23:58:59' prior: 50476118!
accountSummaryReport
	|res|
	res _ ''.
	transactions do: [:aTransaction |
			( aTransaction isKindOf: Deposit ) ifTrue: [res _ res , 'Deposito por ', (aTransaction value asString), '. ' ].
			( aTransaction isKindOf: Withdraw ) ifTrue: [res _ res , 'Extraccion por ', (aTransaction value asString), '. ' ].
			( aTransaction isKindOf: WithdrawTransfer ) ifTrue: [res _ res , 'Salida por transferencia de ', (aTransaction value asString), '. ' ].
			( aTransaction isKindOf: DepositTransfer ) ifTrue: [res _ res , 'Entrada por transferencia de ', (aTransaction value asString), '. ' ].
		].
	res _ res , 'Balance ', (self balance asString). 
	^res.! !

!testRun: #ReportsTest #test04xxx stamp: 'ldmaf 5/25/2022 23:59:08'!
FAILURE!

!testRun: #ReportsTest #test04xxx stamp: 'ldmaf 5/25/2022 23:59:08'!
FAILURE!

	accountSender accountSummaryReport !

	accountReceiver accountSummaryReport !

	'Entrada por transferencia de 10. Balance 10' = 'Entrada por transferencia de 10. Balance 10.'!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/26/2022 00:00:20' prior: 50476192!
test04xxx
	
	|accountSender accountReceiver|
	
	accountSender _ ReceptiveAccount new.
	Deposit register: 50 on: accountSender.
	Withdraw register: 20 on: accountSender .
	accountReceiver _ ReceptiveAccount new.
	Transfer from: accountSender to: accountReceiver of: 10.
	
	self assert: (accountSender accountSummaryReport = 'Deposito por 50. Extraccion por 20. Salida por transferencia de 10. Balance 20').
	self assert: (accountReceiver accountSummaryReport = 'Entrada por transferencia de 10. Balance 10').! !

!testRun: #ReportsTest #test04xxx stamp: 'ldmaf 5/26/2022 00:00:22'!
PASSED!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/26/2022 00:01:13'!
test04AccountSummaryReportWithOneTransferDisplaysReportInReceiverAndSender
	
	|accountSender accountReceiver|
	
	accountSender _ ReceptiveAccount new.
	Deposit register: 50 on: accountSender.
	Withdraw register: 20 on: accountSender .
	accountReceiver _ ReceptiveAccount new.
	Transfer from: accountSender to: accountReceiver of: 10.
	
	self assert: (accountSender accountSummaryReport = 'Deposito por 50. Extraccion por 20. Salida por transferencia de 10. Balance 20').
	self assert: (accountReceiver accountSummaryReport = 'Entrada por transferencia de 10. Balance 10').! !

!methodRemoval: ReportsTest #test04xxx stamp: 'ldmaf 5/26/2022 00:01:13'!
test04xxx
	
	|accountSender accountReceiver|
	
	accountSender _ ReceptiveAccount new.
	Deposit register: 50 on: accountSender.
	Withdraw register: 20 on: accountSender .
	accountReceiver _ ReceptiveAccount new.
	Transfer from: accountSender to: accountReceiver of: 10.
	
	self assert: (accountSender accountSummaryReport = 'Deposito por 50. Extraccion por 20. Salida por transferencia de 10. Balance 20').
	self assert: (accountReceiver accountSummaryReport = 'Entrada por transferencia de 10. Balance 10').!

----SNAPSHOT----(26 May 2022 00:01:47) CuisUniversity-5096.image priorSource: 4624366!

----SNAPSHOT----(26 May 2022 00:01:49) CuisUniversity-5096.image priorSource: 4629095!

----SNAPSHOT----(26 May 2022 00:01:50) CuisUniversity-5096.image priorSource: 4629183!

----QUIT----(26 May 2022 00:02:06) CuisUniversity-5096.image priorSource: 4629271!

----STARTUP---- (26 May 2022 20:00:49) as /home/clinux01/Descargas/linux64/CuisUniversity-5096.image!


----End fileIn of /media/clinux01/47FC-0197/PORTFOLIO2 2/Portfolio-Solucion.st----!

----QUIT----(26 May 2022 21:42:25) CuisUniversity-5096.image priorSource: 4655823!

----STARTUP---- (30 May 2022 20:05:18) as /home/clinux01/Descargas/linux64/CuisUniversity-5096.image!


----End fileIn of /home/clinux01/Descargas/MarsRover-WithHeading.st----!

TestCase subclass: #AlgoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #AlgoTest category: 'MarsRover-WithHeading' stamp: 'ldmaf 5/30/2022 20:06:21'!
TestCase subclass: #AlgoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverLogger category: 'MarsRover-WithHeading' stamp: 'ldmaf 5/30/2022 20:17:36'!
Object subclass: #MarsRoverLogger
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!AlgoTest methodsFor: 'no messages' stamp: 'ldmaf 5/30/2022 20:17:25'!
tes01
	| marsRover logger |
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	logger _ MarsRoverLogger followPositionChangesOn: marsRover .
	marsRover process: ''.
	
	self assert: logger readStream atEnd.
	
	! !
!AlgoTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/30/2022 20:17:50'!
test01
	| marsRover logger |
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	logger _ MarsRoverLogger followPositionChangesOn: marsRover .
	marsRover process: ''.
	
	self assert: logger readStream atEnd.
	
	! !

!methodRemoval: AlgoTest #tes01 stamp: 'ldmaf 5/30/2022 20:17:50'!
tes01
	| marsRover logger |
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	logger _ MarsRoverLogger followPositionChangesOn: marsRover .
	marsRover process: ''.
	
	self assert: logger readStream atEnd.
	
	!

!testRun: #AlgoTest #test01 stamp: 'ldmaf 5/30/2022 20:17:52'!
ERROR!
!MarsRoverLogger class methodsFor: 'instance creation' stamp: 'ldmaf 5/30/2022 20:17:58'!
followPositionChangesOn: aMarsRover 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFollowPositionChangesOn: aMarsRover ! !
!MarsRoverLogger class methodsFor: 'instance creation' stamp: 'ldmaf 5/30/2022 20:19:28' prior: 50477931!
followPositionChangesOn: aMarsRover 
	! !
!MarsRoverLogger methodsFor: 'no messages' stamp: 'ldmaf 5/30/2022 20:20:32'!
readStream
	^''! !

!testRun: #AlgoTest #test01 stamp: 'ldmaf 5/30/2022 20:20:39'!
ERROR!

!testRun: #AlgoTest #test01 stamp: 'ldmaf 5/30/2022 20:20:39'!
ERROR!
!MarsRoverLogger class methodsFor: 'instance creation' stamp: 'ldmaf 5/30/2022 20:21:46' prior: 50477941!
followPositionChangesOn: aMarsRover 
	^self class new.! !

!testRun: #AlgoTest #test01 stamp: 'ldmaf 5/30/2022 20:21:50'!
ERROR!

!testRun: #AlgoTest #test01 stamp: 'ldmaf 5/30/2022 20:21:50'!
ERROR!
!MarsRoverLogger class methodsFor: 'instance creation' stamp: 'ldmaf 5/30/2022 20:22:11' prior: 50477954!
followPositionChangesOn: aMarsRover 
	^MarsRoverLogger new.! !

!classDefinition: #MarsRoverLogger category: 'MarsRover-WithHeading' stamp: 'ldmaf 5/30/2022 20:52:16'!
Object subclass: #MarsRoverLogger
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverLogger methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/30/2022 20:52:15' prior: 50477945!
readStream
	^ReadStream on: log contents.! !
!MarsRoverLogger methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/30/2022 20:52:29' overrides: 16920235!
initialize
	log _ ''.! !

!testRun: #AlgoTest #test01 stamp: 'ldmaf 5/30/2022 20:52:33'!
PASSED!

!classRemoval: #MarsRoverLogger stamp: 'ldmaf 5/30/2022 20:57:49'!
Object subclass: #MarsRoverLogger
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingWest stamp: 'ldmaf 5/30/2022 20:57:50'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingSouth stamp: 'ldmaf 5/30/2022 20:57:50'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingNorth stamp: 'ldmaf 5/30/2022 20:57:50'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingEast stamp: 'ldmaf 5/30/2022 20:57:50'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeading stamp: 'ldmaf 5/30/2022 20:57:51'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRover stamp: 'ldmaf 5/30/2022 20:57:51'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverTest stamp: 'ldmaf 5/30/2022 20:57:51'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #AlgoTest stamp: 'ldmaf 5/30/2022 20:57:52'!
TestCase subclass: #AlgoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

----End fileIn of /home/clinux01/Descargas/MarsRover-Logger.st----!
!AlgoTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/30/2022 21:05:32'!
test01LoggerLogsNothingWhenNoCommandsWhereSentToMarsRover

	| marsRover logger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	logger := MarsRoverLogger followPositionChangesOn: marsRover.
	
	marsRover process: ''.
	
	self assert: logger readStream atEnd.
! !

!methodRemoval: AlgoTest #test01 stamp: 'ldmaf 5/30/2022 21:05:32'!
test01

	| marsRover logger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	logger := MarsRoverLogger followPositionChangesOn: marsRover.
	
	marsRover process: ''.
	
	self assert: logger readStream atEnd.
!
!AlgoTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/30/2022 21:09:00'!
test02LoggerLogsOnlyOneLineWhenForwardCommandIsSent

	| marsRover logger logStream |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	logger := MarsRoverLogger followPositionChangesOn: marsRover.
	
	marsRover process: 'f'.
	
	logStream := logger readStream.
	self assert: '1@2' equals: logStream nextLine.
	self assert: logStream atEnd.
! !

!methodRemoval: AlgoTest #test02 stamp: 'ldmaf 5/30/2022 21:09:00'!
test02

	| marsRover logger logStream |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	logger := MarsRoverLogger followPositionChangesOn: marsRover.
	
	marsRover process: 'f'.
	
	logStream := logger readStream.
	self assert: '1@2' equals: logStream nextLine.
	self assert: logStream atEnd.
!
!AlgoTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/30/2022 21:10:36'!
test03LoggerLogsOnlyOneLineWhenBackwardCommandIsSent

	| marsRover logger logStream |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	logger := MarsRoverLogger followPositionChangesOn: marsRover.
	
	marsRover process: 'b'.
	
	logStream := logger readStream.
	self assert: '1@0' equals: logStream nextLine.
	self assert: logStream atEnd.
! !

!methodRemoval: AlgoTest #test03 stamp: 'ldmaf 5/30/2022 21:10:36'!
test03

	| marsRover logger logStream |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	logger := MarsRoverLogger followPositionChangesOn: marsRover.
	
	marsRover process: 'b'.
	
	logStream := logger readStream.
	self assert: '1@0' equals: logStream nextLine.
	self assert: logStream atEnd.
!
!AlgoTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/30/2022 21:11:10'!
test04LoggerLogsOnlyTwoLinesWhenForwardAndBackwardCommandsAreSent

	| marsRover logger logStream |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast.
	logger := MarsRoverLogger followPositionChangesOn: marsRover.
	
	marsRover process: 'fb'.
	
	logStream := logger readStream.
	self assert: '2@1' equals: logStream nextLine.
	self assert: '1@1' equals: logStream nextLine.
	self assert: logStream atEnd.
! !

!methodRemoval: AlgoTest #test04 stamp: 'ldmaf 5/30/2022 21:11:10'!
test04

	| marsRover logger logStream |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast.
	logger := MarsRoverLogger followPositionChangesOn: marsRover.
	
	marsRover process: 'fb'.
	
	logStream := logger readStream.
	self assert: '2@1' equals: logStream nextLine.
	self assert: '1@1' equals: logStream nextLine.
	self assert: logStream atEnd.
!
!AlgoTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/30/2022 21:12:07'!
test05LoggerLogsOnlyOneLineWhenRightRotateCommandIsSent

	| marsRover logger logStream |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	logger := MarsRoverLogger followHeadingChangesOn: marsRover.
	
	marsRover process: 'r'.
	
	logStream := logger readStream.
	self assert: 'East' equals: logStream nextLine.
	self assert: logStream atEnd.
! !

!methodRemoval: AlgoTest #test05 stamp: 'ldmaf 5/30/2022 21:12:07'!
test05

	| marsRover logger logStream |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	logger := MarsRoverLogger followHeadingChangesOn: marsRover.
	
	marsRover process: 'r'.
	
	logStream := logger readStream.
	self assert: 'East' equals: logStream nextLine.
	self assert: logStream atEnd.
!

!testRun: #AlgoTest #test05LoggerLogsOnlyOneLineWhenRightRotateCommandIsSent stamp: 'ldmaf 5/30/2022 21:17:46'!
PASSED!
!AlgoTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/30/2022 21:22:56'!
test06LoggerLogsOnlyOneLineWhenLeftRotateCommandIsSent

	| marsRover logger logStream |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	logger := MarsRoverLogger followHeadingChangesOn: marsRover.
	
	marsRover process: 'l'.
	
	logStream := logger readStream.
	self assert: 'West' equals: logStream nextLine.
	self assert: logStream atEnd.
! !

!testRun: #AlgoTest #test06LoggerLogsOnlyOneLineWhenLeftRotateCommandIsSent stamp: 'ldmaf 5/30/2022 21:23:02'!
FAILURE!

!testRun: #AlgoTest #test06LoggerLogsOnlyOneLineWhenLeftRotateCommandIsSent stamp: 'ldmaf 5/30/2022 21:23:02'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'ldmaf 5/30/2022 21:24:24' prior: 50478336!
headWest
	
	head := MarsRoverHeadingWest for: self. 
	headingLogger ifNotNil: [headingLogger headingChangedTo: head]! !

!testRun: #AlgoTest #test06LoggerLogsOnlyOneLineWhenLeftRotateCommandIsSent stamp: 'ldmaf 5/30/2022 21:24:52'!
ERROR!

!testRun: #AlgoTest #test06LoggerLogsOnlyOneLineWhenLeftRotateCommandIsSent stamp: 'ldmaf 5/30/2022 21:24:52'!
ERROR!

!testRun: #AlgoTest #test06LoggerLogsOnlyOneLineWhenLeftRotateCommandIsSent stamp: 'ldmaf 5/30/2022 21:24:58'!
ERROR!

!testRun: #AlgoTest #test06LoggerLogsOnlyOneLineWhenLeftRotateCommandIsSent stamp: 'ldmaf 5/30/2022 21:24:58'!
ERROR!

!testRun: #AlgoTest #test06LoggerLogsOnlyOneLineWhenLeftRotateCommandIsSent stamp: 'ldmaf 5/30/2022 21:25:07'!
ERROR!
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'ldmaf 5/30/2022 21:25:48'!
accept: aVisitor

	^aVisitor visitMarsRoverHeadingWest: self! !

!testRun: #AlgoTest #test06LoggerLogsOnlyOneLineWhenLeftRotateCommandIsSent stamp: 'ldmaf 5/30/2022 21:28:42'!
ERROR!

!testRun: #AlgoTest #test06LoggerLogsOnlyOneLineWhenLeftRotateCommandIsSent stamp: 'ldmaf 5/30/2022 21:28:42'!
ERROR!
!MarsRoverHeadingWest methodsFor: 'heading' stamp: 'ldmaf 5/30/2022 21:28:55'!
accept: aMarsRoverLogger 
	self shouldBeImplemented.! !
!MarsRoverHeadingEast methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/30/2022 21:29:47' prior: 50478533!
accept: aVisitor

	^aVisitor visitMarsRoverHeadingEast: self! !
!MarsRoverHeadingWest methodsFor: 'heading' stamp: 'ldmaf 5/30/2022 21:30:00' prior: 50478903!
accept: aVisitor 
	^aVisitor visitMarsRoverHeadingWest: self! !
!MarsRoverLogger methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/30/2022 21:30:17'!
visitMarsRoverHeadingWest: aMarsRoverHeadingWest
	
	log nextPutAll: 'West'; newLine! !

!testRun: #AlgoTest #test01LoggerLogsNothingWhenNoCommandsWhereSentToMarsRover stamp: 'ldmaf 5/30/2022 21:30:22'!
PASSED!

!testRun: #AlgoTest #test02LoggerLogsOnlyOneLineWhenForwardCommandIsSent stamp: 'ldmaf 5/30/2022 21:30:22'!
PASSED!

!testRun: #AlgoTest #test03LoggerLogsOnlyOneLineWhenBackwardCommandIsSent stamp: 'ldmaf 5/30/2022 21:30:22'!
PASSED!

!testRun: #AlgoTest #test04LoggerLogsOnlyTwoLinesWhenForwardAndBackwardCommandsAreSent stamp: 'ldmaf 5/30/2022 21:30:22'!
PASSED!

!testRun: #AlgoTest #test05LoggerLogsOnlyOneLineWhenRightRotateCommandIsSent stamp: 'ldmaf 5/30/2022 21:30:22'!
PASSED!

!testRun: #AlgoTest #test06LoggerLogsOnlyOneLineWhenLeftRotateCommandIsSent stamp: 'ldmaf 5/30/2022 21:30:22'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'ldmaf 5/30/2022 21:30:26'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'ldmaf 5/30/2022 21:30:26'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'ldmaf 5/30/2022 21:30:26'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'ldmaf 5/30/2022 21:30:26'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'ldmaf 5/30/2022 21:30:26'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'ldmaf 5/30/2022 21:30:26'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'ldmaf 5/30/2022 21:30:26'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'ldmaf 5/30/2022 21:30:26'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'ldmaf 5/30/2022 21:30:26'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'ldmaf 5/30/2022 21:30:26'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'ldmaf 5/30/2022 21:30:26'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'ldmaf 5/30/2022 21:30:26'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'ldmaf 5/30/2022 21:30:26'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'ldmaf 5/30/2022 21:30:26'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'ldmaf 5/30/2022 21:30:26'!
PASSED!
!AlgoTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/30/2022 21:32:26'!
test07LoggerLogsOnlyTwoLinesWhenTwoLeftRotateCommandAreSent

	| marsRover logger logStream |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	logger := MarsRoverLogger followHeadingChangesOn: marsRover.
	
	marsRover process: 'll'.
	
	logStream := logger readStream.
	self assert: 'South' equals: logStream nextLine.
	self assert: logStream atEnd.
! !

!testRun: #AlgoTest #test07LoggerLogsOnlyTwoLinesWhenTwoLeftRotateCommandAreSent stamp: 'ldmaf 5/30/2022 21:32:28'!
FAILURE!

!testRun: #AlgoTest #test07LoggerLogsOnlyTwoLinesWhenTwoLeftRotateCommandAreSent stamp: 'ldmaf 5/30/2022 21:32:28'!
FAILURE!

!testRun: #AlgoTest #test07LoggerLogsOnlyTwoLinesWhenTwoLeftRotateCommandAreSent stamp: 'ldmaf 5/30/2022 21:32:50'!
FAILURE!

!testRun: #AlgoTest #test07LoggerLogsOnlyTwoLinesWhenTwoLeftRotateCommandAreSent stamp: 'ldmaf 5/30/2022 21:32:50'!
FAILURE!
!MarsRoverHeadingNorth methodsFor: 'moving' stamp: 'ldmaf 5/30/2022 21:35:04' prior: 50478891!
accept: aVisitor

	^aVisitor visitMarsRoverHeadingNorth: self! !
!MarsRoverHeadingSouth methodsFor: 'moving' stamp: 'ldmaf 5/30/2022 21:35:46'!
accept: aVisitor

	^aVisitor visitMarsRoverHeadingSouth: self! !

!testRun: #AlgoTest #test07LoggerLogsOnlyTwoLinesWhenTwoLeftRotateCommandAreSent stamp: 'ldmaf 5/30/2022 21:35:53'!
FAILURE!

!testRun: #AlgoTest #test07LoggerLogsOnlyTwoLinesWhenTwoLeftRotateCommandAreSent stamp: 'ldmaf 5/30/2022 21:35:53'!
FAILURE!
!MarsRoverLogger methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/30/2022 21:36:39'!
visitMarsRoverHeadingSouth: aMarsRoverHeadingSouth
	
	log nextPutAll: 'South'; newLine! !

!testRun: #AlgoTest #test07LoggerLogsOnlyTwoLinesWhenTwoLeftRotateCommandAreSent stamp: 'ldmaf 5/30/2022 21:36:55'!
FAILURE!

!testRun: #AlgoTest #test07LoggerLogsOnlyTwoLinesWhenTwoLeftRotateCommandAreSent stamp: 'ldmaf 5/30/2022 21:36:55'!
FAILURE!
!AlgoTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 5/30/2022 21:37:32' prior: 50479003!
test07LoggerLogsOnlyTwoLinesWhenTwoLeftRotateCommandAreSent

	| marsRover logger logStream |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	logger := MarsRoverLogger followHeadingChangesOn: marsRover.
	
	marsRover process: 'll'.
	
	logStream := logger readStream.
	self assert: 'West' equals: logStream nextLine.
	self assert: 'South' equals: logStream nextLine.
	self assert: logStream atEnd.
! !

!testRun: #AlgoTest #test07LoggerLogsOnlyTwoLinesWhenTwoLeftRotateCommandAreSent stamp: 'ldmaf 5/30/2022 21:37:36'!
FAILURE!

!testRun: #AlgoTest #test07LoggerLogsOnlyTwoLinesWhenTwoLeftRotateCommandAreSent stamp: 'ldmaf 5/30/2022 21:37:36'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'ldmaf 5/30/2022 21:38:40' prior: 50478332!
headSouth
	
	head := MarsRoverHeadingSouth for: self.
	headingLogger ifNotNil: [headingLogger headingChangedTo: head].! !

!testRun: #AlgoTest #test07LoggerLogsOnlyTwoLinesWhenTwoLeftRotateCommandAreSent stamp: 'ldmaf 5/30/2022 21:39:07'!
PASSED!

----QUIT----(30 May 2022 21:41:18) CuisUniversity-5096.image priorSource: 4663559!

----STARTUP---- (2 June 2022 18:38:04) as /home/clinux01/Descargas/linux64/CuisUniversity-5096.image!


!classRemoval: #MarsRoverLogger stamp: 'ldmaf 6/2/2022 18:38:13'!
Object subclass: #MarsRoverLogger
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingWest stamp: 'ldmaf 6/2/2022 18:38:13'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingSouth stamp: 'ldmaf 6/2/2022 18:38:13'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingNorth stamp: 'ldmaf 6/2/2022 18:38:13'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingEast stamp: 'ldmaf 6/2/2022 18:38:14'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeading stamp: 'ldmaf 6/2/2022 18:38:14'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRover stamp: 'ldmaf 6/2/2022 18:38:14'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionLogger headingLogger'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverTest stamp: 'ldmaf 6/2/2022 18:38:14'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #AlgoTest stamp: 'ldmaf 6/2/2022 18:38:15'!
TestCase subclass: #AlgoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

----End fileIn of /home/clinux01/Descargas/MarsRover-WithHeading.st----!

!testRun: #MarsRoverCurrentPositionWindowTest #test01WindowLogsNothingWhenNoCommandsAreSent stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverCurrentPositionWindowTest #test02WindowLogsPositionWhenForwardCommandIsSent stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverCurrentPositionWindowTest #test03WindowLogsPositionWhenBackwardCommandIsSent stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverCurrentPositionWindowTest #test04WindowLogsOnlyCurrentChangeWhenMultipleCommandsAreSentStepByStep stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverCurrentPositionWindowTest #test05WindowLogsHeadingWhenRightRotateCommandIsSent stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverCurrentPositionWindowTest #test06WindowLogsHeadingWhenLeftRotateCommandIsSent stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverCurrentPositionWindowTest #test07WindowLogsHeadingAndPositionWhenMultipleCommandsAreSentStepByStep stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverLoggerTest #test01LoggerLogsNothingWhenNoCommandsWhereSentToMarsRover stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverLoggerTest #test02LoggerLogsOnlyOneLineWhenForwardCommandIsSent stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverLoggerTest #test03LoggerLogsOnlyOneLineWhenBackwardCommandIsSent stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverLoggerTest #test04LoggerLogsOnlyTwoLinesWhenForwardAndBackwardCommandsAreSent stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverLoggerTest #test05LoggerLogsOnlyOneLineWhenRightRotateCommandIsSent stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverLoggerTest #test06LoggerLogsOnlyOneLineWhenLeftRotateCommandIsSent stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverLoggerTest #test07LoggerLogsOnlyTwoLinesWhenTwoLeftRotateCommandAreSent stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverLoggerTest #test08LoggerLogsOnlyTwoLinesWhenLeftAndRightRotateCommandAreSent stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverLoggerTest #test09LoggerLogsChangesOfBothRotationsAndPositionsCommands stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverVisitorTest #test01BothVisitorsLogCorrectlyWhenSingleCommandIsExecuted stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

!testRun: #MarsRoverVisitorTest #test02BothVisitorsLogCorrectlyWhenMultipleCommandsAreExecuted stamp: 'ldmaf 6/2/2022 18:38:40'!
PASSED!

----QUIT----(2 June 2022 18:42:09) CuisUniversity-5096.image priorSource: 4718390!

----STARTUP---- (2 June 2022 20:38:04) as /home/clinux01/Descargas/linux64/CuisUniversity-5096.image!


Object subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'ldmaf 6/2/2022 20:42:05'!
Object subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'ldmaf 6/2/2022 20:43:31'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'no messages' stamp: 'ldmaf 6/2/2022 20:43:26'!
test01CartIsEmptyWhenIsCreated
	|aCart|
	
	aCart _ Cart new! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/2/2022 20:44:14' prior: 50480500!
test01CartIsEmptyWhenIsCreated
	|aCart|
	
	aCart _ Cart new.
	
	self assert: (true equals: (aCart isEmpty))! !

TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'ldmaf 6/2/2022 20:44:28'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CartTest #test01CartIsEmptyWhenIsCreated stamp: 'ldmaf 6/2/2022 20:44:30'!
ERROR!

!testRun: #CartTest #test01CartIsEmptyWhenIsCreated stamp: 'ldmaf 6/2/2022 20:44:30'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'ldmaf 6/2/2022 20:44:41'!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'assertions' stamp: 'ldmaf 6/2/2022 20:44:49' prior: 50480527!
isEmpty
	^true.! !

!testRun: #CartTest #test01CartIsEmptyWhenIsCreated stamp: 'ldmaf 6/2/2022 20:44:51'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/2/2022 20:45:00' prior: 50480505!
test01CartIsEmptyWhenIsCreated
	|aCart|
	
	aCart _ Cart new.
	
	self assert: (aCart isEmpty)! !

!testRun: #CartTest #test01CartIsEmptyWhenIsCreated stamp: 'ldmaf 6/2/2022 20:45:01'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenIsCreated stamp: 'ldmaf 6/2/2022 20:45:01'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenIsCreated stamp: 'ldmaf 6/2/2022 20:45:19'!
PASSED!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'ldmaf 6/2/2022 20:45:56'!
TestCase subclass: #CartTest
	instanceVariableNames: 'aProduct'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/2/2022 20:45:55'!
test02CartIsNotEmptyWhenAProductIsAdded
	|aCart|
	
	aCart _ Cart new.
	
	aCart add: aProduct
	
	self assert: (aCart isEmpty)! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/2/2022 20:46:15' prior: 50480560!
test02CartIsNotEmptyWhenAProductIsAdded
	|aCart aBook|
	
	aCart _ Cart new.
	
	aCart add: aBook.
	
	self assert: (aCart isEmpty not)! !

!classDefinition: #Book category: 'TusLibros' stamp: 'ldmaf 6/2/2022 20:47:41'!
Object subclass: #Book
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/2/2022 20:47:37' prior: 50480567!
test02CartIsNotEmptyWhenAProductIsAdded
	|aCart aBook|
	
	aCart _ Cart new.
	aBook _ Book with: '9782253096405'.
	aCart add: aBook.
	
	self assert: (aCart isEmpty not)! !

!testRun: #CartTest #test02CartIsNotEmptyWhenAProductIsAdded stamp: 'ldmaf 6/2/2022 20:47:54'!
ERROR!

!testRun: #CartTest #test02CartIsNotEmptyWhenAProductIsAdded stamp: 'ldmaf 6/2/2022 20:47:54'!
ERROR!
!Book class methodsFor: 'instance creation' stamp: 'ldmaf 6/2/2022 20:47:58'!
with: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aString ! !
!Book class methodsFor: 'instance creation' stamp: 'ldmaf 6/2/2022 20:48:38' prior: 50480596!
with: anISBN 
	^self new initializeWith: anISBN.! !

!testRun: #CartTest #test02CartIsNotEmptyWhenAProductIsAdded stamp: 'ldmaf 6/2/2022 20:48:40'!
ERROR!

!classDefinition: #Book category: 'TusLibros' stamp: 'ldmaf 6/2/2022 20:48:47'!
Object subclass: #Book
	instanceVariableNames: 'iSBN'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Book methodsFor: 'initialize' stamp: 'ldmaf 6/2/2022 20:48:47'!
initializeWith: anISBN 
	self shouldBeImplemented.
	iSBN := anISBN.! !
!Book methodsFor: 'initialize' stamp: 'ldmaf 6/2/2022 20:49:01' prior: 50480618!
initializeWith: anISBN 
	ISBN _ anISBN.! !
!Book methodsFor: 'initialize' stamp: 'ldmaf 6/2/2022 20:49:12' prior: 50480623!
initializeWith: anISBN 
	ISBN _ anISBN.! !

!classDefinition: #Book category: 'TusLibros' stamp: 'ldmaf 6/2/2022 20:49:21'!
Object subclass: #Book
	instanceVariableNames: 'iSBN isbn'
	classVariableNames: 'ISBN'
	poolDictionaries: ''
	category: 'TusLibros'!
!Book methodsFor: 'initialize' stamp: 'ldmaf 6/2/2022 20:49:20' prior: 50480627!
initializeWith: anISBN 
	isbn _ anISBN.! !

Object subclass: #Book
	instanceVariableNames: 'isbn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Book category: 'TusLibros' stamp: 'ldmaf 6/2/2022 20:49:36'!
Object subclass: #Book
	instanceVariableNames: 'isbn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CartTest #test02CartIsNotEmptyWhenAProductIsAdded stamp: 'ldmaf 6/2/2022 20:49:42'!
ERROR!

!testRun: #CartTest #test02CartIsNotEmptyWhenAProductIsAdded stamp: 'ldmaf 6/2/2022 20:49:42'!
ERROR!
!Cart methodsFor: 'operations' stamp: 'ldmaf 6/2/2022 20:49:53'!
add: aBook 
	self shouldBeImplemented.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'ldmaf 6/2/2022 20:50:36'!
Object subclass: #Cart
	instanceVariableNames: 'items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'operations' stamp: 'ldmaf 6/2/2022 20:50:35' prior: 50480659!
add: aBook 
	items add: aBook.! !
!Cart methodsFor: 'initialize' stamp: 'ldmaf 6/2/2022 20:50:57' overrides: 16920235!
initialize
	items _ OrderedCollection new.! !

!testRun: #CartTest #test02CartIsNotEmptyWhenAProductIsAdded stamp: 'ldmaf 6/2/2022 20:51:01'!
FAILURE!

!testRun: #CartTest #test02CartIsNotEmptyWhenAProductIsAdded stamp: 'ldmaf 6/2/2022 20:51:01'!
FAILURE!
!Cart methodsFor: 'assertions' stamp: 'ldmaf 6/2/2022 20:51:11' prior: 50480531!
isEmpty
	^items isEmpty.! !

!testRun: #CartTest #test02CartIsNotEmptyWhenAProductIsAdded stamp: 'ldmaf 6/2/2022 20:51:15'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenIsCreated stamp: 'ldmaf 6/2/2022 20:51:25'!
PASSED!

!testRun: #CartTest #test02CartIsNotEmptyWhenAProductIsAdded stamp: 'ldmaf 6/2/2022 20:51:29'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenIsCreated stamp: 'ldmaf 6/2/2022 20:51:32'!
PASSED!

!testRun: #CartTest #test02CartIsNotEmptyWhenAProductIsAdded stamp: 'ldmaf 6/2/2022 20:51:32'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/2/2022 20:56:17'!
test03CantAddBooksNotEditedByEditorToCart
	|aCart aBook|
	
	aCart _ Cart new.
	aBook _ Book with: '9786070776564'.
	
	self should: [aCart add: aBook] raise: Error description: 'Cannot add a book not registered in our inventory.'.! !

!testRun: #CartTest #test03CantAddBooksNotEditedByEditorToCart stamp: 'ldmaf 6/2/2022 20:56:19'!
FAILURE!

!testRun: #CartTest #test03CantAddBooksNotEditedByEditorToCart stamp: 'ldmaf 6/2/2022 20:56:24'!
FAILURE!

Object subclass: #Cart
	instanceVariableNames: 'items inventory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'ldmaf 6/2/2022 21:10:58'!
Object subclass: #Cart
	instanceVariableNames: 'items inventory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'ldmaf 6/2/2022 21:11:26'!
Object subclass: #Cart
	instanceVariableNames: 'items inventory catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialize' stamp: 'ldmaf 6/2/2022 21:11:25' prior: 50480674 overrides: 16920235!
initialize
	items _ OrderedCollection new.
	catalogue _ OrderedCollection new.! !

Object subclass: #Cart
	instanceVariableNames: 'items catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'ldmaf 6/2/2022 21:11:34'!
Object subclass: #Cart
	instanceVariableNames: 'items catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'operations' stamp: 'ldmaf 6/2/2022 21:12:42' prior: 50480670!
add: aBook 
	(catalogue includes: aBook) ifFalse: [self error: ''.].
	items add: aBook.! !
!Cart methodsFor: 'operations' stamp: 'ldmaf 6/2/2022 21:12:44' prior: 50480757!
add: aBook 
	(catalogue includes: aBook) ifFalse: [self error: ''].
	items add: aBook.! !
!Cart methodsFor: 'operations' stamp: 'ldmaf 6/2/2022 21:12:58' prior: 50480763!
add: aBook 
	(catalogue includes: aBook) ifFalse: [self error: 'Cannot add a book not registered in our inventory.'].
	items add: aBook.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/2/2022 21:14:11' prior: 50480704!
test03CantAddBooksNotEditedByEditorToCart
	|aCart aBook aCatalogue|
	aCatalogue _ OrderedCollection new.
	aCart _ Cart with: aCatalogue.
	aBook _ Book with: '9786070776564'.
	
	self should: [aCart add: aBook] raise: Error description: 'Cannot add a book not registered in our inventory.'.! !

!testRun: #CartTest #test03CantAddBooksNotEditedByEditorToCart stamp: 'ldmaf 6/2/2022 21:14:14'!
ERROR!

!testRun: #CartTest #test03CantAddBooksNotEditedByEditorToCart stamp: 'ldmaf 6/2/2022 21:14:14'!
ERROR!
!Cart class methodsFor: 'instance creation' stamp: 'ldmaf 6/2/2022 21:14:19'!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!Cart class methodsFor: 'instance creation' stamp: 'ldmaf 6/2/2022 21:14:30' prior: 50480796!
with: aCatalogue
	^self new initializeWith: aCatalogue! !

!testRun: #CartTest #test03CantAddBooksNotEditedByEditorToCart stamp: 'ldmaf 6/2/2022 21:14:31'!
ERROR!
!Cart methodsFor: 'initialize' stamp: 'ldmaf 6/2/2022 21:14:36'!
initializeWith: aCatalogue 
	self shouldBeImplemented.
	catalogue := aCatalogue.! !
!Cart methodsFor: 'initialize' stamp: 'ldmaf 6/2/2022 21:14:51' prior: 50480813!
initializeWith: aCatalogue 
	items _ OrderedCollection new.
	catalogue _ aCatalogue.! !

!testRun: #CartTest #test03CantAddBooksNotEditedByEditorToCart stamp: 'ldmaf 6/2/2022 21:14:56'!
PASSED!

!testRun: #CartTest #test03CantAddBooksNotEditedByEditorToCart stamp: 'ldmaf 6/2/2022 21:14:59'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/2/2022 21:15:15' prior: 50480777!
test03CantAddBooksNotEditedByEditorToCart
	|aCart aBook aCatalogue|
	
	aCatalogue _ OrderedCollection new.
	aCart _ Cart with: aCatalogue.
	aBook _ Book with: '9786070776564'.
	
	self should: [aCart add: aBook] raise: Error description: 'Cannot add a book not registered in our inventory.'.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/2/2022 21:16:05' prior: 50480581!
test02CartIsNotEmptyWhenAProductIsAdded
	|aCart aBook|
	
	aCart _ Cart with: (OrderedCollection with: '9782253096405').
	aBook _ Book with: '9782253096405'.
	aCart add: aBook.
	
	self assert: (aCart isEmpty not)! !

!testRun: #CartTest #test02CartIsNotEmptyWhenAProductIsAdded stamp: 'ldmaf 6/2/2022 21:16:09'!
ERROR!

!testRun: #CartTest #test02CartIsNotEmptyWhenAProductIsAdded stamp: 'ldmaf 6/2/2022 21:16:09'!
ERROR!

	(OrderedCollection with: '9782253096405')!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/2/2022 21:17:13' prior: 50480845!
test02CartIsNotEmptyWhenAProductIsAdded
	|aCart aBook aCatalogue|
	aCatalogue _ (OrderedCollection with: '9782253096405').
	aCart _ Cart with: aCatalogue.
	aBook _ Book with: '9782253096405'.
	aCart add: aBook.
	
	self assert: (aCart isEmpty not)! !

!testRun: #CartTest #test02CartIsNotEmptyWhenAProductIsAdded stamp: 'ldmaf 6/2/2022 21:17:25'!
ERROR!

!testRun: #CartTest #test02CartIsNotEmptyWhenAProductIsAdded stamp: 'ldmaf 6/2/2022 21:17:32'!
ERROR!

!testRun: #CartTest #test02CartIsNotEmptyWhenAProductIsAdded stamp: 'ldmaf 6/2/2022 21:17:32'!
ERROR!

!testRun: #CartTest #test02CartIsNotEmptyWhenAProductIsAdded stamp: 'ldmaf 6/2/2022 21:19:18'!
ERROR!
!Cart methodsFor: 'operations' stamp: 'ldmaf 6/2/2022 21:19:44' prior: 50480769!
add: aBook 
	(catalogue includes: aBook) ifFalse: [self error: 'Cannot add a book not registered in our inventory.'].
	items add: aBook.! !
!Cart methodsFor: 'initialize' stamp: 'ldmaf 6/2/2022 21:20:30' prior: 50480819!
initializeWith: aCatalogue 
	items _ OrderedCollection new.
	catalogue _ OrderedCollection new.
	aCatalogue do: [:isbn | catalogue add: (Book with: isbn)].! !

!testRun: #CartTest #test02CartIsNotEmptyWhenAProductIsAdded stamp: 'ldmaf 6/2/2022 21:20:34'!
ERROR!

!testRun: #CartTest #test02CartIsNotEmptyWhenAProductIsAdded stamp: 'ldmaf 6/2/2022 21:20:34'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/2/2022 21:21:14' prior: 50480863!
test02CartIsNotEmptyWhenAProductIsAdded
	|aCart aBook aCatalogue|
	aCatalogue _ (OrderedCollection with: '9782253096405').
	aCart _ Cart with: aCatalogue.
	aBook _ Book with: '9782253096405'.
	aCart add: aBook.
	
	self assert: (aCart isEmpty not)! !

	(catalogue includes: aBook)!

	catalogue first!
!Cart methodsFor: 'operations' stamp: 'ldmaf 6/2/2022 21:22:09' prior: 50480887!
add: aBook 
	(catalogue includes: aBook) ifFalse: [self error: 'Cannot add a book not registered in our inventory.'].
	items add: aBook.! !
!Cart methodsFor: 'operations' stamp: 'ldmaf 6/2/2022 21:23:46' prior: 50480921!
add: aBook 
	(catalogue anySatisfy: [:aCatalogueBook | 
			(aCatalogueBook isbn) = (aBook isbn)
		]) ifFalse: [self error: 'Cannot add a book not registered in our inventory.'].
	items add: aBook.! !
!Book methodsFor: 'nil' stamp: 'ldmaf 6/2/2022 21:24:01'!
isbn
	^isbn! !

!testRun: #CartTest #test02CartIsNotEmptyWhenAProductIsAdded stamp: 'ldmaf 6/2/2022 21:24:28'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenIsCreated stamp: 'ldmaf 6/2/2022 21:24:31'!
PASSED!

!testRun: #CartTest #test03CantAddBooksNotEditedByEditorToCart stamp: 'ldmaf 6/2/2022 21:24:35'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/2/2022 21:29:17'!
test04CartCanAddMultipleAmountsOfTheSameBook
	|aCart aBook aCatalogue|
	
	aCatalogue _ OrderedCollection with: '9789500708517'.
	aCart _ Cart with: aCatalogue.
	aBook _ Book with: '9789500708517'.
	aCart add: 10 of: aBook.
	
	self assert: (aCart booksQuantity = 10).! !

!testRun: #CartTest #test04CartCanAddMultipleAmountsOfTheSameBook stamp: 'ldmaf 6/2/2022 21:29:24'!
ERROR!

!testRun: #CartTest #test04CartCanAddMultipleAmountsOfTheSameBook stamp: 'ldmaf 6/2/2022 21:29:24'!
ERROR!
!Cart methodsFor: 'operations' stamp: 'ldmaf 6/2/2022 21:29:27'!
add: aSmallInteger of: aBook 
	self shouldBeImplemented.! !

----End fileIn of /home/clinux01/Descargas/linux64/Packages/TerseGuide.pck.st----!
!Cart methodsFor: 'operations' stamp: 'ldmaf 6/2/2022 21:31:47' prior: 50480968!
add: anAmount of: aBook 
	anAmount timesRepeat: [self add: aBook].! !

!testRun: #CartTest #test04CartCanAddMultipleAmountsOfTheSameBook stamp: 'ldmaf 6/2/2022 21:31:53'!
ERROR!

!testRun: #CartTest #test04CartCanAddMultipleAmountsOfTheSameBook stamp: 'ldmaf 6/2/2022 21:31:53'!
ERROR!
!Cart methodsFor: 'operations' stamp: 'ldmaf 6/2/2022 21:31:58'!
booksQuantity
	self shouldBeImplemented.! !
!Cart methodsFor: 'operations' stamp: 'ldmaf 6/2/2022 21:32:27' prior: 50483903!
booksQuantity
	^items size.! !

!testRun: #CartTest #test04CartCanAddMultipleAmountsOfTheSameBook stamp: 'ldmaf 6/2/2022 21:32:31'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/2/2022 21:35:15'!
test05CartThrowsErrorWhenAnInvalidAmountIsRequested
	|aCart aBook aCatalogue|
	
	aCatalogue _ OrderedCollection with: '9789500708517'.
	aCart _ Cart with: aCatalogue.
	aBook _ Book with: '9789500708517'.
	aCart add: 10 of: aBook.
	
	self assert: false.! !

----QUIT----(2 June 2022 21:38:26) CuisUniversity-5096.image priorSource: 4762464!

----STARTUP---- (4 June 2022 15:49:05) as /home/lisandro/Documents/Facultad/ING1/linux64/CuisUniversity-5096.image!


----End fileIn of /home/lisandro/Documents/Facultad/ING1/linux64/TusLibros.st----!

!testRun: #CartTest #test01CartIsEmptyWhenIsCreated stamp: 'ldmaf 6/4/2022 15:50:41'!
PASSED!

!testRun: #CartTest #test02CartIsNotEmptyWhenAProductIsAdded stamp: 'ldmaf 6/4/2022 15:50:41'!
PASSED!

!testRun: #CartTest #test03CantAddBooksNotEditedByEditorToCart stamp: 'ldmaf 6/4/2022 15:50:41'!
PASSED!

!testRun: #CartTest #test04CartCanAddMultipleAmountsOfTheSameBook stamp: 'ldmaf 6/4/2022 15:50:41'!
PASSED!

!testRun: #CartTest #test05CartThrowsErrorWhenAnInvalidAmountIsRequested stamp: 'ldmaf 6/4/2022 15:50:41'!
FAILURE!

!testRun: #CartTest #test05CartThrowsErrorWhenAnInvalidAmountIsRequested stamp: 'ldmaf 6/4/2022 15:50:41'!
FAILURE!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/4/2022 15:53:25' prior: 50483982!
test05CartThrowsErrorWhenAnInvalidAmountIsRequested
	|aCart aBook aCatalogue|
	
	aCatalogue _ OrderedCollection with: '9789500708517'.
	aCart _ Cart with: aCatalogue.
	aBook _ Book with: '9789500708517'.
	
	self should: [aCart add: 0 of: aBook] raise: Error description: 'Cannot add an invalid amount of books.'.
	self should: [aCart add: -1 of: aBook] raise: Error description: 'Cannot add an invalid amount of books.'.! !

!testRun: #CartTest #test05CartThrowsErrorWhenAnInvalidAmountIsRequested stamp: 'ldmaf 6/4/2022 15:53:27'!
FAILURE!

!testRun: #CartTest #test05CartThrowsErrorWhenAnInvalidAmountIsRequested stamp: 'ldmaf 6/4/2022 15:53:27'!
FAILURE!
!Cart methodsFor: 'operations' stamp: 'ldmaf 6/4/2022 15:54:04' prior: 50484044!
add: anAmount of: aBook 
	(anAmount <= 0) ifTrue: [self error: ''].
	anAmount timesRepeat: [self add: aBook].! !
!Cart methodsFor: 'operations' stamp: 'ldmaf 6/4/2022 15:54:18' prior: 50484125!
add: anAmount of: aBook 
	(anAmount <= 0) ifTrue: [self error: 'Cannot add an invalid amount of books.'].
	anAmount timesRepeat: [self add: aBook].! !

!testRun: #CartTest #test05CartThrowsErrorWhenAnInvalidAmountIsRequested stamp: 'ldmaf 6/4/2022 15:54:25'!
PASSED!

OrderedCollection with: '9789500708517' with: '9781644730942'.!

OrderedCollection with: '9789500708517' with: '9781644730942'.!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/4/2022 15:56:40'!
test06CartAddedBooksAreCorrect
	|aCart aBook1 aBook2 aCatalogue|
	
	aCatalogue _ OrderedCollection with: '9789500708517' with: '9781644730942'.
	aCart _ Cart with: aCatalogue.
	aBook1 _ Book with: '9789500708517'.
	aBook2 _ Book with: '9781644730942'.
	
	! !

!testRun: #CartTest #test06CartAddedBooksAreCorrect stamp: 'ldmaf 6/4/2022 15:58:46'!
PASSED!

!testRun: #CartTest #test06CartAddedBooksAreCorrect stamp: 'ldmaf 6/4/2022 15:58:54'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/4/2022 15:59:05' prior: 50484147!
test06CartAddedBooksAreCorrect
	|aCart aBook1 aBook2 aCatalogue|
	
	aCatalogue _ OrderedCollection with: '9789500708517' with: '9781644730942'.
	aCart _ Cart with: aCatalogue.
	aBook1 _ Book with: '9789500708517'.
	aBook2 _ Book with: '9781644730942'.
	
	aCart add: aBook1.
	aCart add: 3 of: aBook2.
	self assert: (aCart doesInclude: 3 of: aBook2).
	self assert: (aCart doesInclude: 1 of: aBook1).
	self assert: (aCart booksQuantity = 4).
	
	
	! !

!testRun: #CartTest #test06CartAddedBooksAreCorrect stamp: 'ldmaf 6/4/2022 15:59:16'!
ERROR!

!testRun: #CartTest #test06CartAddedBooksAreCorrect stamp: 'ldmaf 6/4/2022 15:59:16'!
ERROR!
!Cart methodsFor: 'operations' stamp: 'ldmaf 6/4/2022 15:59:21'!
doesInclude: aSmallInteger of: aBook 
	self shouldBeImplemented.! !
!Cart methodsFor: 'operations' stamp: 'ldmaf 6/4/2022 16:00:38' prior: 50484186!
doesInclude: anAmount of: aBook 
	^(items occurrencesOf: aBook = anAmount).! !

!testRun: #CartTest #test06CartAddedBooksAreCorrect stamp: 'ldmaf 6/4/2022 16:00:40'!
ERROR!
!Cart methodsFor: 'operations' stamp: 'ldmaf 6/4/2022 16:00:54' prior: 50484191!
doesInclude: anAmount of: aBook 
	^(items occurrencesOf: aBook) = anAmount.! !

!testRun: #CartTest #test06CartAddedBooksAreCorrect stamp: 'ldmaf 6/4/2022 16:00:57'!
PASSED!
!Cart methodsFor: 'assertions' stamp: 'ldmaf 6/4/2022 16:03:30'!
contents
	^items copy.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/4/2022 16:06:58'!
test07CartCanRequestItsContents
	|aCart aBook1 aBook2 aCatalogue cartContents|
	
	aCatalogue _ OrderedCollection with: '9788499983196' with: '9786070731747'.
	aCart _ Cart with: aCatalogue.
	aBook1 _ Book with: '9788499983196'.
	aBook2 _ Book with: '9786070731747'.
	
	aCart add: aBook1.
	aCart add: 2 of: aBook2.
	cartContents _ aCart contents.
	self assert: (( cartContents occurrencesOf: aBook1 ) = 1).
	self assert: (( cartContents occurrencesOf: aBook2 ) = 2).
	
	! !

!testRun: #CartTest #test07CartCanRequestItsContents stamp: 'ldmaf 6/4/2022 16:07:00'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/4/2022 16:07:40' prior: 50484211!
test07CartCanRequestItsContents
	|aCart aBook1 aBook2 aCatalogue cartContents|
	
	aCatalogue _ OrderedCollection with: '9788499983196' with: '9786070731747'.
	aCart _ Cart with: aCatalogue.
	aBook1 _ Book with: '9788499983196'.
	aBook2 _ Book with: '9786070731747'.
	
	aCart add: aBook1.
	aCart add: 2 of: aBook2.
	cartContents _ aCart contents.
	self assert: (( cartContents occurrencesOf: aBook1 ) = 1).
	self assert: (( cartContents occurrencesOf: aBook2 ) = 2).
	self assert: (cartContents size = 3).
	
	! !

!testRun: #CartTest #test07CartCanRequestItsContents stamp: 'ldmaf 6/4/2022 16:07:42'!
PASSED!

----QUIT----(4 June 2022 16:16:43) CuisUniversity-5096.image priorSource: 4866980!

----STARTUP---- (4 June 2022 16:17:05) as /home/lisandro/Documents/Facultad/ING1/linux64/CuisUniversity-5096.image!


----QUIT----(4 June 2022 16:17:21) CuisUniversity-5096.image priorSource: 4883295!

----STARTUP---- (8 June 2022 18:31:16) as /home/lisandro/Documents/Facultad/ING1/linux64/CuisUniversity-5096.image!


!classRemoval: #Cart stamp: 'ldmaf 6/8/2022 18:31:23'!
Object subclass: #Cart
	instanceVariableNames: 'items catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Book stamp: 'ldmaf 6/8/2022 18:31:23'!
Object subclass: #Book
	instanceVariableNames: 'isbn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'ldmaf 6/8/2022 18:31:23'!
TestCase subclass: #CartTest
	instanceVariableNames: 'aProduct'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/lisandro/Documents/Facultad/ING1/linux64/TusLibros.st----!

!classDefinition: #Card category: 'TusLibros' stamp: 'ldmaf 6/8/2022 18:38:04'!
Object subclass: #Card
	instanceVariableNames: 'owner goodThru number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 18:42:38'!
test06CheckoutOfACartWithAValidCardCheckoutsCorrectly
	| aCart aCatalogue aCashier aCard |
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567' -> 10; add: '9789505157532' -> 50.
	
	aCart := Cart with: aCatalogue.
	aCart add: 5 of: '9789504974567'.
	aCart add: 3 of: '9789505157532'.
	
	aCard _ Card withNumber: '1234567812345678' goodThru: '07/27' owner: 'Jorge Messi'. 
	
	aCashier := Cashier with: aCatalogue.
	
	self assert: ( (aCashier checkout: aCart) lastTicket: 'Compra por 200 a la tarjeta 1234567812345678' ).
! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 18:42:49' prior: 50484603!
test06CheckoutOfACartWithAValidCardCheckoutsCorrectly
	| aCart aCatalogue aCashier aCard |
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567' -> 10; add: '9789505157532' -> 50.
	
	aCart := Cart with: aCatalogue.
	aCart add: 5 of: '9789504974567'.
	aCart add: 3 of: '9789505157532'.
	
	aCard _ Card withNumber: '1234567812345678' goodThru: '07/27' owner: 'Jorge Messi'. 
	
	aCashier := Cashier with: aCatalogue.
	
	self assert: ( (aCashier checkout: aCart with: aCard) lastTicket: 'Compra por 200 a la tarjeta 1234567812345678' ).
! !

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/8/2022 18:42:53'!
ERROR!

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/8/2022 18:42:53'!
ERROR!
!Card class methodsFor: 'instance creation' stamp: 'ldmaf 6/8/2022 18:42:58'!
withNumber: aString goodThru: aString2 owner: aString3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithNumber: aString goodThru: aString2 owner: aString3 ! !
!Card class methodsFor: 'instance creation' stamp: 'ldmaf 6/8/2022 18:43:46' prior: 50484651!
withNumber: aCardNumber goodThru: aMonthAndYear owner: aName 
	^self new initializeWithCardNumber: aCardNumber goodThru: aMonthAndYear owner: aName ! !

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/8/2022 18:43:48'!
ERROR!

!classDefinition: #Card category: 'TusLibros' stamp: 'ldmaf 6/8/2022 18:43:55'!
Object subclass: #Card
	instanceVariableNames: 'owner goodThru number cardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Card category: 'TusLibros' stamp: 'ldmaf 6/8/2022 18:43:55'!
Object subclass: #Card
	instanceVariableNames: 'owner goodThru number cardNumber monthAndYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Card category: 'TusLibros' stamp: 'ldmaf 6/8/2022 18:43:56'!
Object subclass: #Card
	instanceVariableNames: 'owner goodThru number cardNumber monthAndYear name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Card methodsFor: 'init' stamp: 'ldmaf 6/8/2022 18:43:56'!
initializeWithCardNumber: aCardNumber goodThru: aMonthAndYear owner: aName 
	self shouldBeImplemented.
	cardNumber := aCardNumber.
	monthAndYear := aMonthAndYear.
	name := aName.! !
!Card methodsFor: 'init' stamp: 'ldmaf 6/8/2022 18:44:09' prior: 50484696!
initializeWithCardNumber: aCardNumber goodThru: aMonthAndYear owner: aName 
	self shouldBeImplemented.
	cardNumber := aCardNumber.
	monthAndYear := aMonthAndYear. "TODO: Hay que validar que esto este ok!!"
	name := aName.! !

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/8/2022 18:44:11'!
ERROR!

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/8/2022 18:44:32'!
ERROR!

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/8/2022 18:44:32'!
ERROR!
!Card methodsFor: 'init' stamp: 'ldmaf 6/8/2022 18:45:13' prior: 50484705!
initializeWithCardNumber: aCardNumber goodThru: aMonthAndYear owner: aName 
	cardNumber := aCardNumber.
	monthAndYear := aMonthAndYear. "TODO: Hay que validar que esto este ok!!"
	name := aName.! !

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/8/2022 18:45:14'!
ERROR!

Date today!
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 18:46:48'!
checkout: aCart with: aCard
	(aCart isEmpty) ifTrue: [^self error: 'Cannot checkout an empty cart.'].
	(aCard isValidAt: Date today) ifFalse: [^self error: 'Cannot checkout with an invalid card.'].
	aCart contents do: [:aBook | 
		totalPurchase _ totalPurchase + (catalogue at: aBook).
		products add: aBook		
		].! !
!Card methodsFor: 'nil' stamp: 'ldmaf 6/8/2022 18:47:02'!
isValidAt: aDate
	^true.! !

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/8/2022 18:47:16'!
ERROR!

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/8/2022 18:47:16'!
ERROR!
!Cashier methodsFor: 'ticketing' stamp: 'ldmaf 6/8/2022 18:47:23'!
lastTicket: aString 
	self shouldBeImplemented.! !

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/8/2022 18:47:41'!
ERROR!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 18:47:51' prior: 50484623!
test06CheckoutOfACartWithAValidCardCheckoutsCorrectly
	| aCart aCatalogue aCashier aCard |
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567' -> 10; add: '9789505157532' -> 50.
	
	aCart := Cart with: aCatalogue.
	aCart add: 5 of: '9789504974567'.
	aCart add: 3 of: '9789505157532'.
	
	aCard _ Card withNumber: '1234567812345678' goodThru: '07/27' owner: 'Jorge Messi'. 
	
	aCashier := Cashier with: aCatalogue.
	
	self assert: ( (aCashier checkout: aCart with: aCard) lastTicket = 'Compra por 200 a la tarjeta 1234567812345678' ).
! !
!Cashier methodsFor: 'ticketing' stamp: 'ldmaf 6/8/2022 18:48:19'!
lastTicket
	^'Compra realizada con la tarjeta 1234567812345678 por 200.'! !

!methodRemoval: Cashier #lastTicket: stamp: 'ldmaf 6/8/2022 18:48:29'!
lastTicket: aString 
	self shouldBeImplemented.!
!Cashier methodsFor: 'ticketing' stamp: 'ldmaf 6/8/2022 18:48:34' prior: 50484791!
lastTicket
	^'Compra por 200 a la tarjeta 1234567812345678'! !

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/8/2022 18:48:37'!
PASSED!

!testRun: #CheckoutTest #test01CheckoutOfAnEmptyCartShouldFail stamp: 'ldmaf 6/8/2022 18:48:56'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfACartWithOneItemShouldHaveACorrectCheckoutPrice stamp: 'ldmaf 6/8/2022 18:48:56'!
ERROR!

!testRun: #CheckoutTest #test03CheckoutOfACartWithManyTimesOfAnItemCheckoutsCorrectPrice stamp: 'ldmaf 6/8/2022 18:48:56'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfACartWithManyTimesOfManyItemsCheckoutsCorrectPrice stamp: 'ldmaf 6/8/2022 18:48:56'!
PASSED!

!testRun: #CheckoutTest #test05CheckoutOfACartWithManyTimesOfManyItemsCheckoutsCorrectProducts stamp: 'ldmaf 6/8/2022 18:48:56'!
PASSED!

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/8/2022 18:48:56'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfACartWithOneItemShouldHaveACorrectCheckoutPrice stamp: 'ldmaf 6/8/2022 18:48:56'!
ERROR!

!testRun: #CheckoutTest #test01CheckoutOfAnEmptyCartShouldFail stamp: 'ldmaf 6/8/2022 18:49:06'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfACartWithOneItemShouldHaveACorrectCheckoutPrice stamp: 'ldmaf 6/8/2022 18:49:06'!
ERROR!

!testRun: #CheckoutTest #test03CheckoutOfACartWithManyTimesOfAnItemCheckoutsCorrectPrice stamp: 'ldmaf 6/8/2022 18:49:06'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfACartWithManyTimesOfManyItemsCheckoutsCorrectPrice stamp: 'ldmaf 6/8/2022 18:49:06'!
PASSED!

!testRun: #CheckoutTest #test05CheckoutOfACartWithManyTimesOfManyItemsCheckoutsCorrectProducts stamp: 'ldmaf 6/8/2022 18:49:06'!
PASSED!

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/8/2022 18:49:06'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfACartWithOneItemShouldHaveACorrectCheckoutPrice stamp: 'ldmaf 6/8/2022 18:49:06'!
ERROR!

!testRun: #CheckoutTest #test02CheckoutOfACartWithOneItemShouldHaveACorrectCheckoutPrice stamp: 'ldmaf 6/8/2022 18:49:15'!
ERROR!

!testRun: #CheckoutTest #test02CheckoutOfACartWithOneItemShouldHaveACorrectCheckoutPrice stamp: 'ldmaf 6/8/2022 18:49:15'!
ERROR!

!testRun: #CheckoutTest #test02CheckoutOfACartWithOneItemShouldHaveACorrectCheckoutPrice stamp: 'ldmaf 6/8/2022 18:49:48'!
ERROR!

!testRun: #CheckoutTest #test02CheckoutOfACartWithOneItemShouldHaveACorrectCheckoutPrice stamp: 'ldmaf 6/8/2022 18:49:48'!
ERROR!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 18:50:29' prior: 50484416!
test02CheckoutOfACartWithOneItemShouldHaveACorrectCheckoutPrice
	| aCart aCatalogue aCashier |
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567'->10.
	aCart := Cart with: aCatalogue.
	aCart add: '9789504974567'.
	aCashier := Cashier with: aCatalogue.
	self assert: ((aCashier checkout: aCart) total = 10).
! !

!testRun: #CheckoutTest #test02CheckoutOfACartWithOneItemShouldHaveACorrectCheckoutPrice stamp: 'ldmaf 6/8/2022 18:50:41'!
PASSED!

!testRun: #CheckoutTest #test01CheckoutOfAnEmptyCartShouldFail stamp: 'ldmaf 6/8/2022 18:50:41'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfACartWithOneItemShouldHaveACorrectCheckoutPrice stamp: 'ldmaf 6/8/2022 18:50:41'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfACartWithManyTimesOfAnItemCheckoutsCorrectPrice stamp: 'ldmaf 6/8/2022 18:50:41'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfACartWithManyTimesOfManyItemsCheckoutsCorrectPrice stamp: 'ldmaf 6/8/2022 18:50:41'!
PASSED!

!testRun: #CheckoutTest #test05CheckoutOfACartWithManyTimesOfManyItemsCheckoutsCorrectProducts stamp: 'ldmaf 6/8/2022 18:50:41'!
PASSED!

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/8/2022 18:50:41'!
PASSED!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 18:53:25'!
test07CheckoutOfACardWithAnInvalidCardDoesntCheckout
	| aCart aCatalogue aCashier aCard |
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567' -> 10; add: '9789505157532' -> 50.
	
	aCart := Cart with: aCatalogue.
	aCart add: 5 of: '9789504974567'.
	aCart add: 3 of: '9789505157532'.
	
	aCard _ Card withNumber: '1234567812345678' goodThru: '07/21' owner: 'Jorge Messi'. 
	
	aCashier := Cashier with: aCatalogue.
	
	self should: [(aCashier checkout: aCart with: aCard)] raise: Error withMessageText: 'Compra no realizada. Tarjeta no valida.'
! !

!testRun: #CheckoutTest #test07CheckoutOfACardWithAnInvalidCardDoesntCheckout stamp: 'ldmaf 6/8/2022 18:53:27'!
FAILURE!

!testRun: #CheckoutTest #test07CheckoutOfACardWithAnInvalidCardDoesntCheckout stamp: 'ldmaf 6/8/2022 18:53:27'!
FAILURE!
!Card methodsFor: 'assertions' stamp: 'ldmaf 6/8/2022 18:54:50' prior: 50484751!
isValidAt: aDate
	|expiredCard|
	expiredCard _ Date today < aDate. 
	^expiredCard! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 18:55:58'!
test07CheckoutOfACardWithAnExpiredCardDoesntCheckout
	| aCart aCatalogue aCashier aCard |
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567' -> 10; add: '9789505157532' -> 50.
	
	aCart := Cart with: aCatalogue.
	aCart add: 5 of: '9789504974567'.
	aCart add: 3 of: '9789505157532'.
	
	aCard _ Card withNumber: '1234567812345678' goodThru: '07/21' owner: 'Jorge Messi'. 
	
	aCashier := Cashier with: aCatalogue.
	
	self should: [(aCashier checkout: aCart with: aCard)] raise: Error withMessageText: 'Compra no realizada. Tarjeta no valida.'
! !

!methodRemoval: CheckoutTest #test07CheckoutOfACardWithAnInvalidCardDoesntCheckout stamp: 'ldmaf 6/8/2022 18:55:58'!
test07CheckoutOfACardWithAnInvalidCardDoesntCheckout
	| aCart aCatalogue aCashier aCard |
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567' -> 10; add: '9789505157532' -> 50.
	
	aCart := Cart with: aCatalogue.
	aCart add: 5 of: '9789504974567'.
	aCart add: 3 of: '9789505157532'.
	
	aCard _ Card withNumber: '1234567812345678' goodThru: '07/21' owner: 'Jorge Messi'. 
	
	aCashier := Cashier with: aCatalogue.
	
	self should: [(aCashier checkout: aCart with: aCard)] raise: Error withMessageText: 'Compra no realizada. Tarjeta no valida.'
!
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 19:01:28' prior: 50484739!
checkout: aCart with: aCard
	(aCart isEmpty) ifTrue: [^self error: 'Cannot checkout an empty cart.'].
	(self isAValidCard: aCard) ifFalse: [^self error: 'Cannot checkout with an invalid card.'].
	aCart contents do: [:aBook | 
		totalPurchase _ totalPurchase + (catalogue at: aBook).
		products add: aBook		
		].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 19:03:12'!
isAValidCard: aCard
	^(aCard isValidAt: ( Date today ))! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 19:03:47' prior: 50484957!
test07CheckoutOfACardWithAnExpiredCardDoesntCheckout
	| aCart aCatalogue aCashier aCard |
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567' -> 10; add: '9789505157532' -> 50.
	
	aCart := Cart with: aCatalogue.
	aCart add: 5 of: '9789504974567'.
	aCart add: 3 of: '9789505157532'.
	
	aCard _ Card withNumber: '1234567812345678' goodThru: '07/21' owner: 'Jorge Messi'. 
	
	aCashier := Cashier with: aCatalogue.
	
	self should: [(aCashier checkout: aCart with: aCard)] raise: Error withMessageText: 'Cannot checkout with an invalid card.'
! !

!testRun: #CheckoutTest #test07CheckoutOfACardWithAnExpiredCardDoesntCheckout stamp: 'ldmaf 6/8/2022 19:03:49'!
PASSED!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 19:04:31'!
test08CheckoutOfACardWithAStolenCardDoesntCheckout
	| aCart aCatalogue aCashier aCard |
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567' -> 10; add: '9789505157532' -> 50.
	
	aCart := Cart with: aCatalogue.
	aCart add: 5 of: '9789504974567'.
	aCart add: 3 of: '9789505157532'.
	
	aCard _ Card withNumber: '1234567812345678' goodThru: '07/21' owner: 'Jorge Messi'. 
	
	aCashier := Cashier with: aCatalogue.
	
	self should: [(aCashier checkout: aCart with: aCard)] raise: Error withMessageText: 'Cannot checkout with an invalid cardd.'
! !

Object subclass: #Cashier
	instanceVariableNames: 'catalogue products totalPurchase stolenCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'ldmaf 6/8/2022 19:04:47'!
Object subclass: #Cashier
	instanceVariableNames: 'catalogue products totalPurchase stolenCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 19:05:10' prior: 50484568!
initializeWith: aCatalogue
	catalogue _ aCatalogue.
	products _ Bag new.
	totalPurchase _ 0.
	stolenCards _ OrderedCollection with: '1234567812345679'.
	! !

[^true] or: False!

true or: false!
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 19:06:48' prior: 50485012!
isAValidCard: aCard
	^(aCard isValidAt: ( Date today )) or: (stolenCards includes: aCard) ! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 19:07:24' prior: 50485041!
test08CheckoutOfACardWithAStolenCardDoesntCheckout
	| aCart aCatalogue aCashier aCard |
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567' -> 10; add: '9789505157532' -> 50.
	
	aCart := Cart with: aCatalogue.
	aCart add: 5 of: '9789504974567'.
	aCart add: 3 of: '9789505157532'.
	
	aCard _ Card withNumber: '1234567812345679' goodThru: '07/23' owner: 'Jorge Messi'. 
	
	aCashier := Cashier with: aCatalogue.
	
	self should: [(aCashier checkout: aCart with: aCard)] raise: Error withMessageText: 'Cannot checkout with an invalid card.'
! !

!testRun: #CheckoutTest #test08CheckoutOfACardWithAStolenCardDoesntCheckout stamp: 'ldmaf 6/8/2022 19:07:27'!
PASSED!

!testRun: #CheckoutTest #test01CheckoutOfAnEmptyCartShouldFail stamp: 'ldmaf 6/8/2022 19:07:30'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfACartWithOneItemShouldHaveACorrectCheckoutPrice stamp: 'ldmaf 6/8/2022 19:07:30'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfACartWithManyTimesOfAnItemCheckoutsCorrectPrice stamp: 'ldmaf 6/8/2022 19:07:30'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfACartWithManyTimesOfManyItemsCheckoutsCorrectPrice stamp: 'ldmaf 6/8/2022 19:07:30'!
PASSED!

!testRun: #CheckoutTest #test05CheckoutOfACartWithManyTimesOfManyItemsCheckoutsCorrectProducts stamp: 'ldmaf 6/8/2022 19:07:30'!
PASSED!

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/8/2022 19:07:30'!
ERROR!

!testRun: #CheckoutTest #test07CheckoutOfACardWithAnExpiredCardDoesntCheckout stamp: 'ldmaf 6/8/2022 19:07:30'!
PASSED!

!testRun: #CheckoutTest #test08CheckoutOfACardWithAStolenCardDoesntCheckout stamp: 'ldmaf 6/8/2022 19:07:30'!
PASSED!

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/8/2022 19:07:30'!
ERROR!

!testRun: #CheckoutTest #test07CheckoutOfACardWithAnExpiredCardDoesntCheckout stamp: 'ldmaf 6/8/2022 19:07:37'!
PASSED!

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/8/2022 19:07:41'!
ERROR!

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/8/2022 19:07:41'!
ERROR!
!Card methodsFor: 'assertions' stamp: 'ldmaf 6/8/2022 19:08:48' prior: 50484951!
isValidAt: aDate
	|expiredCard|
	expiredCard _ goodThru < aDate. 
	^expiredCard! !
!Card methodsFor: 'assertions' stamp: 'ldmaf 6/8/2022 19:11:01' prior: 50485160!
isValidAt: aDate
	|expiredCard goodThruAsDate|
	expiredCard _ goodThru < aDate. 
	^expiredCard! !
!Card class methodsFor: 'instance creation' stamp: 'ldmaf 6/8/2022 19:11:40' prior: 50484662!
withNumber: aCardNumber goodThru: aDate owner: aName 
	^self new initializeWithCardNumber: aCardNumber goodThru: aDate owner: aName ! !

Date today month !

Date today month + 20!

a _ Date today month !

a + 10!

a year!

a next!

a nextMonth: June!

a fromDays: 365!

a _ Date today.!

a fromDays: 365!

Date fromDays: 365!

a _ Date today. !

a + Date today!

a + Date today!

Date today year!

Date today yearNumber !

a _ Date newDay: 12 month: #July year: (Date today yearNumber + 5)!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 19:17:27' prior: 50484771!
test06CheckoutOfACartWithAValidCardCheckoutsCorrectly
	| aCart aCatalogue aCashier aCard aDate|
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567' -> 10; add: '9789505157532' -> 50.
	
	aCart := Cart with: aCatalogue.
	aCart add: 5 of: '9789504974567'.
	aCart add: 3 of: '9789505157532'.
	
	aCard _ Card withNumber: '1234567812345678' goodThru: aDate owner: 'Jorge Messi'. 
	
	aCashier := Cashier with: aCatalogue.
	
	self assert: ( (aCashier checkout: aCart with: aCard) lastTicket = 'Compra por 200 a la tarjeta 1234567812345678' ).
! !

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/8/2022 19:17:34'!
ERROR!

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/8/2022 19:17:34'!
ERROR!
!Card methodsFor: 'init' stamp: 'ldmaf 6/8/2022 19:19:15' prior: 50484726!
initializeWithCardNumber: aCardNumber goodThru: aMonthAndYear owner: aName 
	cardNumber := aCardNumber.
	goodThru := aMonthAndYear. "TODO: Hay que validar que esto este ok!!"
	owner := aName.! !

Object subclass: #Card
	instanceVariableNames: 'owner goodThru number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Card category: 'TusLibros' stamp: 'ldmaf 6/8/2022 19:19:28'!
Object subclass: #Card
	instanceVariableNames: 'owner goodThru number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Card methodsFor: 'init' stamp: 'ldmaf 6/8/2022 19:19:33' prior: 50485221!
initializeWithCardNumber: aCardNumber goodThru: aMonthAndYear owner: aName 
	number := aCardNumber.
	goodThru := aMonthAndYear. "TODO: Hay que validar que esto este ok!!"
	owner := aName.! !

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/8/2022 19:19:39'!
ERROR!

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/8/2022 19:19:39'!
ERROR!
!Card methodsFor: 'assertions' stamp: 'ldmaf 6/8/2022 19:20:09' prior: 50485166!
isValidAt: aDate
	|expiredCard goodThruAsDate|
	expiredCard _ goodThru > aDate. 
	^expiredCard! !
!Card methodsFor: 'assertions' stamp: 'ldmaf 6/8/2022 19:20:12' prior: 50485258!
isValidAt: aDate
	|expiredCard|
	expiredCard _ goodThru > aDate. 
	^expiredCard! !

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/8/2022 19:20:15'!
PASSED!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 19:20:44' prior: 50485017!
test07CheckoutOfACardWithAnExpiredCardDoesntCheckout
	| aCart aCatalogue aCashier aCard aDate|
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber - 5).
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567' -> 10; add: '9789505157532' -> 50.
	
	aCart := Cart with: aCatalogue.
	aCart add: 5 of: '9789504974567'.
	aCart add: 3 of: '9789505157532'.
	
	aCard _ Card withNumber: '1234567812345678' goodThru: aDate owner: 'Jorge Messi'. 
	
	aCashier := Cashier with: aCatalogue.
	
	self should: [(aCashier checkout: aCart with: aCard)] raise: Error withMessageText: 'Cannot checkout with an invalid card.'
! !

!testRun: #CheckoutTest #test07CheckoutOfACardWithAnExpiredCardDoesntCheckout stamp: 'ldmaf 6/8/2022 19:20:47'!
PASSED!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 19:21:02' prior: 50485090!
test08CheckoutOfACardWithAStolenCardDoesntCheckout
	| aCart aCatalogue aCashier aCard aDate|
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567' -> 10; add: '9789505157532' -> 50.
	
	aCart := Cart with: aCatalogue.
	aCart add: 5 of: '9789504974567'.
	aCart add: 3 of: '9789505157532'.
	
	aCard _ Card withNumber: '1234567812345679' goodThru: '07/23' owner: 'Jorge Messi'. 
	
	aCashier := Cashier with: aCatalogue.
	
	self should: [(aCashier checkout: aCart with: aCard)] raise: Error withMessageText: 'Cannot checkout with an invalid card.'
! !

!testRun: #CheckoutTest #test08CheckoutOfACardWithAStolenCardDoesntCheckout stamp: 'ldmaf 6/8/2022 19:21:05'!
FAILURE!

!testRun: #CheckoutTest #test08CheckoutOfACardWithAStolenCardDoesntCheckout stamp: 'ldmaf 6/8/2022 19:21:05'!
FAILURE!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 19:21:21' prior: 50485301!
test08CheckoutOfACardWithAStolenCardDoesntCheckout
	| aCart aCatalogue aCashier aCard aDate|
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567' -> 10; add: '9789505157532' -> 50.
	
	aCart := Cart with: aCatalogue.
	aCart add: 5 of: '9789504974567'.
	aCart add: 3 of: '9789505157532'.
	
	aCard _ Card withNumber: '1234567812345679' goodThru: aDate owner: 'Jorge Messi'. 
	
	aCashier := Cashier with: aCatalogue.
	
	self should: [(aCashier checkout: aCart with: aCard)] raise: Error withMessageText: 'Cannot checkout with an invalid card.'
! !

!testRun: #CheckoutTest #test08CheckoutOfACardWithAStolenCardDoesntCheckout stamp: 'ldmaf 6/8/2022 19:21:24'!
FAILURE!

!testRun: #CheckoutTest #test08CheckoutOfACardWithAStolenCardDoesntCheckout stamp: 'ldmaf 6/8/2022 19:21:24'!
FAILURE!

!testRun: #CheckoutTest #test08CheckoutOfACardWithAStolenCardDoesntCheckout stamp: 'ldmaf 6/8/2022 19:21:38'!
FAILURE!

(aCard isValidAt: ( Date today ))!

(stolenCards includes: aCard) !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 19:23:16' prior: 50485084!
isAValidCard: aCard
	^(aCard isValidAt: ( Date today )) and: ((stolenCards includes: aCard) not)! !

!testRun: #CheckoutTest #test08CheckoutOfACardWithAStolenCardDoesntCheckout stamp: 'ldmaf 6/8/2022 19:23:24'!
FAILURE!

!testRun: #CheckoutTest #test08CheckoutOfACardWithAStolenCardDoesntCheckout stamp: 'ldmaf 6/8/2022 19:23:24'!
FAILURE!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 19:24:38' prior: 50485332!
test08CheckoutOfACardWithAStolenCardDoesntCheckout
	| aCart aCatalogue aCashier aCard aDate|
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567' -> 10; add: '9789505157532' -> 50.
	
	aCart := Cart with: aCatalogue.
	aCart add: 5 of: '9789504974567'.
	aCart add: 3 of: '9789505157532'.
	
	aCard _ Card withNumber: '1234567812345679' goodThru: aDate owner: 'Jorgelino Messi'. 
	
	aCashier := Cashier with: aCatalogue.
	
	self should: [(aCashier checkout: aCart with: aCard)] raise: Error withMessageText: 'Cannot checkout with an invalid card.'
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 19:25:05' prior: 50485075!
initializeWith: aCatalogue
	catalogue _ aCatalogue.
	products _ Bag new.
	totalPurchase _ 0.
	stolenCards _ OrderedCollection with: '1234567812345679'.
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 19:26:02'!
isStolen: aCard
	^ stolenCards includes: (aCard number).! !
!Card methodsFor: 'assertions' stamp: 'ldmaf 6/8/2022 19:26:59'!
number
	^number copy.! !

!testRun: #CheckoutTest #test08CheckoutOfACardWithAStolenCardDoesntCheckout stamp: 'ldmaf 6/8/2022 19:27:05'!
FAILURE!

!testRun: #CheckoutTest #test08CheckoutOfACardWithAStolenCardDoesntCheckout stamp: 'ldmaf 6/8/2022 19:27:05'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 19:27:26' prior: 50485368!
isAValidCard: aCard
	^(aCard isValidAt: ( Date today )) and: ((self isStolen: aCard) not)! !

!testRun: #CheckoutTest #test08CheckoutOfACardWithAStolenCardDoesntCheckout stamp: 'ldmaf 6/8/2022 19:27:30'!
PASSED!

!testRun: #CheckoutTest #test01CheckoutOfAnEmptyCartShouldFail stamp: 'ldmaf 6/8/2022 19:27:32'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfACartWithOneItemShouldHaveACorrectCheckoutPrice stamp: 'ldmaf 6/8/2022 19:27:32'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfACartWithManyTimesOfAnItemCheckoutsCorrectPrice stamp: 'ldmaf 6/8/2022 19:27:32'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfACartWithManyTimesOfManyItemsCheckoutsCorrectPrice stamp: 'ldmaf 6/8/2022 19:27:32'!
PASSED!

!testRun: #CheckoutTest #test05CheckoutOfACartWithManyTimesOfManyItemsCheckoutsCorrectProducts stamp: 'ldmaf 6/8/2022 19:27:32'!
PASSED!

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/8/2022 19:27:32'!
PASSED!

!testRun: #CheckoutTest #test07CheckoutOfACardWithAnExpiredCardDoesntCheckout stamp: 'ldmaf 6/8/2022 19:27:32'!
PASSED!

!testRun: #CheckoutTest #test08CheckoutOfACardWithAStolenCardDoesntCheckout stamp: 'ldmaf 6/8/2022 19:27:32'!
PASSED!

TestCase subclass: #MerchantProccesorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProccesorTest category: 'TusLibros' stamp: 'ldmaf 6/8/2022 19:32:54'!
TestCase subclass: #MerchantProccesorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProccesorTest methodsFor: 'nil' stamp: 'ldmaf 6/8/2022 19:33:04'!
test01
	self assert: false.! !

!classDefinition: #FakeMerchantProccesor category: 'TusLibros' stamp: 'ldmaf 6/8/2022 19:41:19'!
Object subclass: #FakeMerchantProccesor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProccesorTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 19:41:11' prior: 50485482!
test01
	|fakeMerchantProccesor aDate aCard anAmount resultCode|
	resultCode _ '0|OK'.
	aDate _ Date today.
	aCard _ Card withNumber: '1234567812345678' goodThru: aDate owner: 'Jorge Penaldo'.
	fakeMerchantProccesor  _ FakeMerchantProccesor new.
	
	self assert: (((fakeMerchantProccesor chargePaymentInto: aCard of: anAmount) code) = resultCode).! !
!MerchantProccesorTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 19:41:30' prior: 50485494!
test01
	|fakeMerchantProccesor aDate aCard anAmount resultCode|
	resultCode _ '0|OK'.
	aDate _ Date today.
	aCard _ Card withNumber: '1234567812345678' goodThru: aDate owner: 'Jorge Penaldo'.
	fakeMerchantProccesor  _ FakeMerchantProccesor new.
	anAmount _ 200.
	
	self assert: (((fakeMerchantProccesor chargePaymentInto: aCard of: anAmount) code) = resultCode).! !
!MerchantProccesorTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 19:41:50' prior: 50485509!
test01
	|fakeMerchantProccesor aDate aCard anAmount resultCode|
	resultCode _ '0|OK'.
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCard _ Card withNumber: '1234567812345678' goodThru: aDate owner: 'Jorge Penaldo'.
	fakeMerchantProccesor  _ FakeMerchantProccesor new.
	anAmount _ 200.
	
	self assert: (((fakeMerchantProccesor chargePaymentInto: aCard of: anAmount) code) = resultCode).! !

!testRun: #MerchantProccesorTest #test01 stamp: 'ldmaf 6/8/2022 19:41:55'!
ERROR!
!FakeMerchantProccesor methodsFor: 'operations' stamp: 'ldmaf 6/8/2022 19:42:03'!
chargePaymentInto: aCard of: aSmallInteger 
	self shouldBeImplemented.! !

!classDefinition: #FakeMerchantProccesor category: 'TusLibros' stamp: 'ldmaf 6/8/2022 19:42:24'!
Object subclass: #FakeMerchantProccesor
	instanceVariableNames: 'code'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FakeMerchantProccesor methodsFor: 'operations' stamp: 'ldmaf 6/8/2022 19:42:23' prior: 50485543!
chargePaymentInto: aCard of: anAmount
	code _ '0|OK'.! !

!testRun: #MerchantProccesorTest #test01 stamp: 'ldmaf 6/8/2022 19:42:26'!
ERROR!
!FakeMerchantProccesor methodsFor: 'operations' stamp: 'ldmaf 6/8/2022 19:42:32'!
code
	self shouldBeImplemented.
	^code! !
!FakeMerchantProccesor methodsFor: 'operations' stamp: 'ldmaf 6/8/2022 19:42:36' prior: 50485563!
code
	^code! !

!testRun: #MerchantProccesorTest #test01 stamp: 'ldmaf 6/8/2022 19:42:37'!
PASSED!

!testRun: #MerchantProccesorTest #test01 stamp: 'ldmaf 6/8/2022 19:42:40'!
PASSED!
!MerchantProccesorTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 19:43:17'!
test01MerchantProccesorChargesAPaymentWithAValidCard
	|fakeMerchantProccesor aDate aCard anAmount resultCode|
	resultCode _ '0|OK'.
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCard _ Card withNumber: '1234567812345678' goodThru: aDate owner: 'Jorge Penaldo'.
	fakeMerchantProccesor  _ FakeMerchantProccesor new.
	anAmount _ 200.
	
	self assert: (((fakeMerchantProccesor chargePaymentInto: aCard of: anAmount) code) = resultCode).! !

!methodRemoval: MerchantProccesorTest #test01 stamp: 'ldmaf 6/8/2022 19:43:17'!
test01
	|fakeMerchantProccesor aDate aCard anAmount resultCode|
	resultCode _ '0|OK'.
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCard _ Card withNumber: '1234567812345678' goodThru: aDate owner: 'Jorge Penaldo'.
	fakeMerchantProccesor  _ FakeMerchantProccesor new.
	anAmount _ 200.
	
	self assert: (((fakeMerchantProccesor chargePaymentInto: aCard of: anAmount) code) = resultCode).!
!MerchantProccesorTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 19:51:14'!
test02MerchantProccesorDoesntChargeAPaymentWithAnInvalidCard
	|fakeMerchantProccesor aDate aCard anAmount resultCode|
	resultCode _ '0|ERROR:Invalid Card'.
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber - 5).
	aCard _ Card withNumber: '1234567812345678' goodThru: aDate owner: 'Jorge Penaldo'.
	fakeMerchantProccesor  _ FakeMerchantProccesor new.
	anAmount _ 200.
	
	self assert: (((fakeMerchantProccesor chargePaymentInto: aCard of: anAmount) code) = resultCode).! !

!testRun: #MerchantProccesorTest #test02MerchantProccesorDoesntChargeAPaymentWithAnInvalidCard stamp: 'ldmaf 6/8/2022 19:51:16'!
FAILURE!

!testRun: #MerchantProccesorTest #test02MerchantProccesorDoesntChargeAPaymentWithAnInvalidCard stamp: 'ldmaf 6/8/2022 19:51:16'!
FAILURE!
!FakeMerchantProccesor methodsFor: 'operations' stamp: 'ldmaf 6/8/2022 19:51:46' prior: 50485556!
chargePaymentInto: aCard of: anAmount
	self validateCard: aCard.
	code _ '0|OK'.! !
!FakeMerchantProccesor methodsFor: 'operations' stamp: 'ldmaf 6/8/2022 19:56:52'!
validateCard: aCard
	^aCard isValidAt: (Date today) and: ((self isStolen: aCard) not).! !
!FakeMerchantProccesor methodsFor: 'operations' stamp: 'ldmaf 6/8/2022 19:57:20' prior: 50485643!
validateCard: aCard
	^(aCard isValidAt: (Date today)) and: ((self isStolen: aCard) not).! !

!classDefinition: #FakeMerchantProccesor category: 'TusLibros' stamp: 'ldmaf 6/8/2022 19:58:00'!
Object subclass: #FakeMerchantProccesor
	instanceVariableNames: 'code stolenCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FakeMerchantProccesor methodsFor: 'operations' stamp: 'ldmaf 6/8/2022 19:57:59'!
isStolen: aCard
	^(stolenCards includes: aCard number)! !
!FakeMerchantProccesor methodsFor: 'operations' stamp: 'ldmaf 6/8/2022 19:58:30' overrides: 16920235!
initialize
	stolenCards _ OrderedCollection with: '1234123412341234'.! !

!testRun: #MerchantProccesorTest #test02MerchantProccesorDoesntChargeAPaymentWithAnInvalidCard stamp: 'ldmaf 6/8/2022 19:58:42'!
FAILURE!

!testRun: #MerchantProccesorTest #test02MerchantProccesorDoesntChargeAPaymentWithAnInvalidCard stamp: 'ldmaf 6/8/2022 19:58:42'!
FAILURE!
!FakeMerchantProccesor methodsFor: 'operations' stamp: 'ldmaf 6/8/2022 19:59:19' prior: 50485637!
chargePaymentInto: aCard of: anAmount
	(self validateCard: aCard) ifFalse: [code _ '1|' ].
	code _ '0|OK'.! !
!FakeMerchantProccesor methodsFor: 'operations' stamp: 'ldmaf 6/8/2022 19:59:36' prior: 50485683!
chargePaymentInto: aCard of: anAmount
	(self validateCard: aCard) ifFalse: [code _ '1|ERROR:Invalid Card'].
	code _ '0|OK'.! !
!FakeMerchantProccesor methodsFor: 'operations' stamp: 'ldmaf 6/8/2022 20:00:27' prior: 50485690!
chargePaymentInto: aCard of: anAmount
	(self validateCard: aCard) ifFalse: [code _ '1|ERROR:Invalid Card'] ifTrue: [code _ '0|OK'.]! !
!FakeMerchantProccesor methodsFor: 'operations' stamp: 'ldmaf 6/8/2022 20:00:36' prior: 50485568!
code
	^code copy.! !

!testRun: #MerchantProccesorTest #test01MerchantProccesorChargesAPaymentWithAValidCard stamp: 'ldmaf 6/8/2022 20:00:39'!
PASSED!

!testRun: #MerchantProccesorTest #test02MerchantProccesorDoesntChargeAPaymentWithAnInvalidCard stamp: 'ldmaf 6/8/2022 20:00:39'!
FAILURE!

!testRun: #MerchantProccesorTest #test02MerchantProccesorDoesntChargeAPaymentWithAnInvalidCard stamp: 'ldmaf 6/8/2022 20:00:39'!
FAILURE!

!testRun: #MerchantProccesorTest #test01MerchantProccesorChargesAPaymentWithAValidCard stamp: 'ldmaf 6/8/2022 20:00:42'!
PASSED!

!testRun: #MerchantProccesorTest #test02MerchantProccesorDoesntChargeAPaymentWithAnInvalidCard stamp: 'ldmaf 6/8/2022 20:00:46'!
FAILURE!

!testRun: #MerchantProccesorTest #test02MerchantProccesorDoesntChargeAPaymentWithAnInvalidCard stamp: 'ldmaf 6/8/2022 20:00:46'!
FAILURE!
!MerchantProccesorTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 20:01:10' prior: 50485610!
test02MerchantProccesorDoesntChargeAPaymentWithAnInvalidCard
	|fakeMerchantProccesor aDate aCard anAmount resultCode|
	resultCode _ '1|ERROR:Invalid Card'.
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber - 5).
	aCard _ Card withNumber: '1234567812345678' goodThru: aDate owner: 'Jorge Penaldo'.
	fakeMerchantProccesor  _ FakeMerchantProccesor new.
	anAmount _ 200.
	
	self assert: (((fakeMerchantProccesor chargePaymentInto: aCard of: anAmount) code) = resultCode).! !

!testRun: #MerchantProccesorTest #test02MerchantProccesorDoesntChargeAPaymentWithAnInvalidCard stamp: 'ldmaf 6/8/2022 20:01:13'!
PASSED!
!MerchantProccesorTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 20:02:23' prior: 50485736!
test02MerchantProccesorDoesntChargeAPaymentWithAnInvalidCard
	|fakeMerchantProccesor aDate aCard aStolenCard anAmount resultCode|
	resultCode _ '1|ERROR:Invalid Card'.
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber - 5).
	aCard _ Card withNumber: '1234567812345678' goodThru: aDate owner: 'Jorge Penaldo'.
	aStolenCard _ Card withNumber: '1234123412341234' goodThru: aDate owner: 'Pablo Messinaldo'.
	fakeMerchantProccesor  _ FakeMerchantProccesor new.
	anAmount _ 200.
	
	self assert: (((fakeMerchantProccesor chargePaymentInto: aCard of: anAmount) code) = resultCode).
	self assert: (((fakeMerchantProccesor chargePaymentInto: aStolenCard of: anAmount) code) = resultCode).! !

!testRun: #MerchantProccesorTest #test02MerchantProccesorDoesntChargeAPaymentWithAnInvalidCard stamp: 'ldmaf 6/8/2022 20:02:26'!
PASSED!

TestCase subclass: #CardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CardTest category: 'TusLibros' stamp: 'ldmaf 6/8/2022 20:06:14'!
TestCase subclass: #CardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CardTest methodsFor: 'nil' stamp: 'ldmaf 6/8/2022 20:06:38'!
test01
	self assert: false.! !
!CardTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 20:12:05'!
test01AValidNumberCanCreateACard
	|aCard|
	aCard _ Card withNumber: '1234123412341234' goodThru: (Date today) owner: 'Owen Owner'.
	self assert: ((aCard number) = '1234123412341234').! !

!testRun: #CardTest #test01AValidNumberCanCreateACard stamp: 'ldmaf 6/8/2022 20:12:07'!
PASSED!

!methodRemoval: CardTest #test01 stamp: 'ldmaf 6/8/2022 20:12:16'!
test01
	self assert: false.!
!CardTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 20:18:52'!
test02AnEmptyCardNumberCantCreateACard
	self should: [Card withNumber: '' goodThru: (Date today) owner: 'Owen Owner'.] raise: Error withMessageText: 'Cant create a card with provided number.'! !

!testRun: #CardTest #test02AnEmptyCardNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:18:54'!
FAILURE!

!testRun: #CardTest #test02AnEmptyCardNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:18:54'!
FAILURE!
!Card class methodsFor: 'instance creation' stamp: 'ldmaf 6/8/2022 20:19:41' prior: 50485172!
withNumber: aCardNumber goodThru: aDate owner: aName 
	(aCardNumber isEmpty) ifTrue: [self error: 'Cant create a card with provided number.'].
	^self new initializeWithCardNumber: aCardNumber goodThru: aDate owner: aName ! !

!testRun: #CardTest #test02AnEmptyCardNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:19:54'!
PASSED!
!CardTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 20:20:15'!
test03AnIncompleteCardNumberCantCreateACard
	self should: [Card withNumber: '1111' goodThru: (Date today) owner: 'Owen Owner'.] raise: Error withMessageText: 'Cant create a card with provided number.'! !

!testRun: #CardTest #test03AnIncompleteCardNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:20:18'!
FAILURE!
!Card class methodsFor: 'instance creation' stamp: 'ldmaf 6/8/2022 20:20:56' prior: 50485833!
withNumber: aCardNumber goodThru: aDate owner: aName 
	(aCardNumber isEmpty) ifTrue: [self error: 'Cant create a card with provided number.'].
	(aCardNumber length = 8) ifFalse: [self error: 'Cant create a card with provided number.'].
	^self new initializeWithCardNumber: aCardNumber goodThru: aDate owner: aName ! !

!testRun: #CardTest #test03AnIncompleteCardNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:21:02'!
FAILURE!

!testRun: #CardTest #test03AnIncompleteCardNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:21:02'!
FAILURE!
!Card class methodsFor: 'instance creation' stamp: 'ldmaf 6/8/2022 20:21:30' prior: 50485859!
withNumber: aCardNumber goodThru: aDate owner: aName
	(aCardNumber length = 8) ifFalse: [self error: 'Cant create a card with provided number.'].
	^self new initializeWithCardNumber: aCardNumber goodThru: aDate owner: aName ! !

!testRun: #CardTest #test02AnEmptyCardNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:22:06'!
FAILURE!

!testRun: #CardTest #test02AnEmptyCardNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:22:06'!
FAILURE!

'asdada' length !

'asdada' size !
!Card class methodsFor: 'instance creation' stamp: 'ldmaf 6/8/2022 20:22:29' prior: 50485879!
withNumber: aCardNumber goodThru: aDate owner: aName
	(aCardNumber size = 8) ifFalse: [self error: 'Cant create a card with provided number.'].
	^self new initializeWithCardNumber: aCardNumber goodThru: aDate owner: aName ! !

!testRun: #CardTest #test01AValidNumberCanCreateACard stamp: 'ldmaf 6/8/2022 20:22:32'!
ERROR!

!testRun: #CardTest #test02AnEmptyCardNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:22:32'!
PASSED!

!testRun: #CardTest #test03AnIncompleteCardNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:22:32'!
PASSED!

!testRun: #CardTest #test01AValidNumberCanCreateACard stamp: 'ldmaf 6/8/2022 20:22:32'!
ERROR!
!Card class methodsFor: 'instance creation' stamp: 'ldmaf 6/8/2022 20:22:45' prior: 50485897!
withNumber: aCardNumber goodThru: aDate owner: aName
	(aCardNumber size = 16) ifFalse: [self error: 'Cant create a card with provided number.'].
	^self new initializeWithCardNumber: aCardNumber goodThru: aDate owner: aName ! !

!testRun: #CardTest #test01AValidNumberCanCreateACard stamp: 'ldmaf 6/8/2022 20:22:50'!
PASSED!

!testRun: #CardTest #test02AnEmptyCardNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:22:50'!
PASSED!

!testRun: #CardTest #test03AnIncompleteCardNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:22:50'!
PASSED!
!CardTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 20:23:20'!
test04AnExceededCardNumberCantCreateACard
	self should: [Card withNumber: '11111111111111111111' goodThru: (Date today) owner: 'Owen Owner'.] raise: Error withMessageText: 'Cant create a card with provided number.'! !

!testRun: #CardTest #test04AnExceededCardNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:23:22'!
PASSED!
!CardTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 20:24:21'!
test05ACardWithInvalidNumberCantCreateACard
	self should: [Card withNumber: 'abcd123412341234' goodThru: (Date today) owner: 'Owen Owner'.] raise: Error withMessageText: 'Cant create a card with provided number.'! !

!testRun: #CardTest #test05ACardWithInvalidNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:24:22'!
FAILURE!

!testRun: #CardTest #test05ACardWithInvalidNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:24:22'!
FAILURE!

'1234' asIntegerArray !

'1234' asNumber !

'1234a' asNumber!

'1234asdasa' asNumber!

'1234asdasa' asNumber asString!

'1234asdasa' asNumber asString size !
!Card class methodsFor: 'instance creation' stamp: 'ldmaf 6/8/2022 20:27:35' prior: 50485920!
withNumber: aCardNumber goodThru: aDate owner: aName
	(aCardNumber size = 16) ifFalse: [self error: 'Cant create a card with provided number.'].
	((aCardNumber asNumber asString size) < (aCardNumber size)) ifTrue: [self error: 'Cant create a card with provided number.'].
	^self new initializeWithCardNumber: aCardNumber goodThru: aDate owner: aName ! !

!testRun: #CardTest #test01AValidNumberCanCreateACard stamp: 'ldmaf 6/8/2022 20:27:40'!
PASSED!

!testRun: #CardTest #test02AnEmptyCardNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:27:40'!
PASSED!

!testRun: #CardTest #test03AnIncompleteCardNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:27:40'!
PASSED!

!testRun: #CardTest #test04AnExceededCardNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:27:40'!
PASSED!

!testRun: #CardTest #test05ACardWithInvalidNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:27:40'!
FAILURE!

!testRun: #CardTest #test05ACardWithInvalidNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:27:40'!
FAILURE!

!testRun: #CardTest #test01AValidNumberCanCreateACard stamp: 'ldmaf 6/8/2022 20:27:56'!
PASSED!

!testRun: #CardTest #test02AnEmptyCardNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:27:59'!
PASSED!

!testRun: #CardTest #test03AnIncompleteCardNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:28:02'!
PASSED!

!testRun: #CardTest #test04AnExceededCardNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:28:05'!
PASSED!

!testRun: #CardTest #test05ACardWithInvalidNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:28:08'!
FAILURE!

!testRun: #CardTest #test05ACardWithInvalidNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:28:08'!
FAILURE!

!testRun: #CardTest #test05ACardWithInvalidNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:28:13'!
FAILURE!

!testRun: #CardTest #test05ACardWithInvalidNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:28:14'!
PASSED!

	aCardNumber asNumber asString!

	aCardNumber asNumber!

'a1234asdasa' asNumber !

1234123412341234!

123456 !

123456 asString !

123456 asString length !

123456 asString size!
!Card class methodsFor: 'instance creation' stamp: 'ldmaf 6/8/2022 20:32:30' prior: 50485975!
withNumber: aCardNumber goodThru: aDate owner: aName
	(aCardNumber isKindOf: Integer) ifTrue: [self error: 'Cant create a card with provided number.'].
	(aCardNumber asString size = 16) ifFalse: [self error: 'Cant create a card with provided number.'].
	^self new initializeWithCardNumber: aCardNumber goodThru: aDate owner: aName ! !
!CardTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 20:32:45' prior: 50485802!
test01AValidNumberCanCreateACard
	|aCard|
	aCard _ Card withNumber: 1234123412341234 goodThru: (Date today) owner: 'Owen Owner'.
	self assert: ((aCard number) = 1234123412341234).! !

!testRun: #CardTest #test01AValidNumberCanCreateACard stamp: 'ldmaf 6/8/2022 20:32:48'!
ERROR!

!testRun: #CardTest #test01AValidNumberCanCreateACard stamp: 'ldmaf 6/8/2022 20:32:48'!
ERROR!

!testRun: #CardTest #test01AValidNumberCanCreateACard stamp: 'ldmaf 6/8/2022 20:33:08'!
ERROR!

!testRun: #CardTest #test01AValidNumberCanCreateACard stamp: 'ldmaf 6/8/2022 20:33:10'!
PASSED!

1234123412341234 isKindOf: SmallInteger !

1234123412341234 isKindOf: Integer!
!Card class methodsFor: 'instance creation' stamp: 'ldmaf 6/8/2022 20:33:43' prior: 50486041!
withNumber: aCardNumber goodThru: aDate owner: aName
	(aCardNumber isKindOf: Integer) ifFalse: [self error: 'Cant create a card with provided number.'].
	(aCardNumber asString size = 16) ifFalse: [self error: 'Cant create a card with provided number.'].
	^self new initializeWithCardNumber: aCardNumber goodThru: aDate owner: aName ! !

!testRun: #CardTest #test01AValidNumberCanCreateACard stamp: 'ldmaf 6/8/2022 20:33:47'!
PASSED!

!testRun: #CardTest #test02AnEmptyCardNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:33:53'!
PASSED!

!testRun: #CardTest #test03AnIncompleteCardNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:34:02'!
PASSED!
!CardTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 20:34:10' prior: 50485846!
test03AnIncompleteCardNumberCantCreateACard
	self should: [Card withNumber: 1111 goodThru: (Date today) owner: 'Owen Owner'.] raise: Error withMessageText: 'Cant create a card with provided number.'! !

!testRun: #CardTest #test03AnIncompleteCardNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:34:12'!
PASSED!
!CardTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 20:34:17' prior: 50485940!
test04AnExceededCardNumberCantCreateACard
	self should: [Card withNumber: 11111111111111111111 goodThru: (Date today) owner: 'Owen Owner'.] raise: Error withMessageText: 'Cant create a card with provided number.'! !

!testRun: #CardTest #test04AnExceededCardNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:34:19'!
PASSED!

!testRun: #CardTest #test05ACardWithInvalidNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:34:24'!
PASSED!

'  asdasd' trim !

'  asdasd' trimLeft: true right: true!

'  asdasd' trimLeft: ' ' right: ' '!

'asdadsa' trimmed: true!

'asdadsa' withBlanksTrimmed !

'asdadsa        ' withBlanksTrimmed!
!CardTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 20:40:37'!
test06ACardWithBlanksTrimmedNameIfIsBlankCantCreateACard
	self should: [Card withNumber: 'abcd123412341234' goodThru: (Date today) owner: '          '.] raise: Error withMessageText: 'Cant create a card with provided number.'! !
!CardTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 20:40:54' prior: 50486138!
test06ACardWithBlanksTrimmedNameIfIsBlankCantCreateACard
	self should: [Card withNumber: 1234123412341234 goodThru: (Date today) owner: '          '.] raise: Error withMessageText: 'Cant create a card with provided number.'! !

!testRun: #CardTest #test06ACardWithBlanksTrimmedNameIfIsBlankCantCreateACard stamp: 'ldmaf 6/8/2022 20:40:56'!
FAILURE!

!testRun: #CardTest #test06ACardWithBlanksTrimmedNameIfIsBlankCantCreateACard stamp: 'ldmaf 6/8/2022 20:40:56'!
FAILURE!
!Card class methodsFor: 'instance creation' stamp: 'ldmaf 6/8/2022 20:41:21' prior: 50486079!
withNumber: aCardNumber goodThru: aDate owner: aName
	(aCardNumber isKindOf: Integer) ifFalse: [self error: 'Cant create a card with provided number.'].
	(aCardNumber asString size = 16) ifFalse: [self error: 'Cant create a card with provided number.'].
	(aName withBlanksTrimmed size = 0) ifTrue: [self error: 'Cant create a card with provided number.'].
	^self new initializeWithCardNumber: aCardNumber goodThru: aDate owner: aName ! !

!testRun: #CardTest #test06ACardWithBlanksTrimmedNameIfIsBlankCantCreateACard stamp: 'ldmaf 6/8/2022 20:41:27'!
PASSED!
!CardTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/8/2022 20:42:57'!
test07ACardWithAnInvalidDateCantCreateACard
	self should: [Card withNumber: 1234123412341234 goodThru: '12/28' owner: 'Owen Owner'.] raise: Error withMessageText: 'Cant create a card with provided number.'! !

!testRun: #CardTest #test07ACardWithAnInvalidDateCantCreateACard stamp: 'ldmaf 6/8/2022 20:42:59'!
FAILURE!

!testRun: #CardTest #test07ACardWithAnInvalidDateCantCreateACard stamp: 'ldmaf 6/8/2022 20:42:59'!
FAILURE!
!Card class methodsFor: 'instance creation' stamp: 'ldmaf 6/8/2022 20:43:18' prior: 50486167!
withNumber: aCardNumber goodThru: aDate owner: aName
	(aCardNumber isKindOf: Integer) ifFalse: [self error: 'Cant create a card with provided number.'].
	(aCardNumber asString size = 16) ifFalse: [self error: 'Cant create a card with provided number.'].
	(aName withBlanksTrimmed size = 0) ifTrue: [self error: 'Cant create a card with provided number.'].
	(aDate isKindOf: Date) ifFalse: [self error: 'Cant create a card with provided number.'].
	^self new initializeWithCardNumber: aCardNumber goodThru: aDate owner: aName ! !

!testRun: #CardTest #test01AValidNumberCanCreateACard stamp: 'ldmaf 6/8/2022 20:43:20'!
PASSED!

!testRun: #CardTest #test02AnEmptyCardNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:43:20'!
PASSED!

!testRun: #CardTest #test03AnIncompleteCardNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:43:20'!
PASSED!

!testRun: #CardTest #test04AnExceededCardNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:43:20'!
PASSED!

!testRun: #CardTest #test05ACardWithInvalidNumberCantCreateACard stamp: 'ldmaf 6/8/2022 20:43:20'!
PASSED!

!testRun: #CardTest #test06ACardWithBlanksTrimmedNameIfIsBlankCantCreateACard stamp: 'ldmaf 6/8/2022 20:43:20'!
PASSED!

!testRun: #CardTest #test07ACardWithAnInvalidDateCantCreateACard stamp: 'ldmaf 6/8/2022 20:43:20'!
PASSED!

----QUIT----(8 June 2022 20:53:17) CuisUniversity-5096.image priorSource: 4883497!

----STARTUP---- (9 June 2022 00:12:13) as /home/lisandro/Documents/Facultad/ING1/linux64/CuisUniversity-5096.image!


Object subclass: #Cashier
	instanceVariableNames: 'catalogue products totalPurchase stolenCards salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'ldmaf 6/9/2022 00:16:39'!
Object subclass: #Cashier
	instanceVariableNames: 'catalogue products totalPurchase stolenCards salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:17:46' prior: 50485405!
initializeWith: aCatalogue
	catalogue _ aCatalogue.
	products _ Bag new.
	totalPurchase _ 0.
	stolenCards _ OrderedCollection with: '1234567812345679'.
	salesBook _ Dictionary new.
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:18:10' prior: 50486267!
initializeWith: aCatalogue
	catalogue _ aCatalogue.
	products _ Bag new.
	totalPurchase _ 0.
	stolenCards _ OrderedCollection with: '1234567812345679'.
	salesBook _ Dictionary new.
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:20:43' prior: 50486276!
initializeWith: aCatalogue
	catalogue _ aCatalogue.
	products _ Bag new.
	totalPurchase _ 0.
	stolenCards _ OrderedCollection with: '1234567812345679'.
	salesBook _ OrderedCollection new.
	
	! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:21:19'!
with: aCatalogue using: aMerchantProccesor
	^self new initializeWith: aCatalogue using: aMerchantProccesor! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'ldmaf 6/9/2022 00:22:09'!
Object subclass: #Cashier
	instanceVariableNames: 'catalogue products totalPurchase stolenCards salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:22:08'!
initializeWith: aCatalogue using: aMerchantProcessor
	catalogue _ aCatalogue.
	products _ Bag new.
	totalPurchase _ 0.
	stolenCards _ OrderedCollection with: '1234567812345679'.
	salesBook _ OrderedCollection new.
	merchantProcessor _ aMerchantProcessor.
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:22:45' prior: 50484999!
checkout: aCart with: aCard
	(aCart isEmpty) ifTrue: [^self error: 'Cannot checkout an empty cart.'].
	(self isAValidCard: aCard) ifFalse: [^self error: 'Cannot checkout with an invalid card.'].
	aCart contents do: [:aBook | 
		totalPurchase _ totalPurchase + (catalogue at: aBook).
		products add: aBook		
		].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:24:13' prior: 50486321!
checkout: aCart with: aCard
	(aCart isEmpty) ifTrue: [^self error: 'Cannot checkout an empty cart.'].
	aCart contents do: [:aBook | 
		totalPurchase _ totalPurchase + (catalogue at: aBook).
		products add: aBook		
		].
	merchantProcessor chargePaymentInto: aCard of: totalPurchase.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:24:52' prior: 50484574!
products
	^products copy.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:25:18' prior: 50486334!
checkout: aCart with: aCard
	(aCart isEmpty) ifTrue: [^self error: 'Cannot checkout an empty cart.'].
	aCart contents do: [:aBook | 
		totalPurchase _ totalPurchase + (catalogue at: aBook).
		products add: aBook		
		].
	merchantProcessor chargePaymentInto: aCard of: totalPurchase.
	salesBook add: ''! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:26:24' prior: 50486350!
checkout: aCart with: aCard
	(aCart isEmpty) ifTrue: [^self error: 'Cannot checkout an empty cart.'].
	aCart contents do: [:aBook | 
		totalPurchase _ totalPurchase + (catalogue at: aBook).
		products add: aBook		
		].
	merchantProcessor chargePaymentInto: aCard of: totalPurchase.
	salesBook add: ('Compra por ', totalPurchase asString, ' a la tarjeta: ', ((aCard number) asString)).! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:28:06' prior: 50486363!
checkout: aCart with: aCard
	totalPurchase  _ 0.
	products _ OrderedCollection new. "Preguntar si hace falta tener los productos vendidos historicos".
	(aCart isEmpty) ifTrue: [^self error: 'Cannot checkout an empty cart.'].
	aCart contents do: [:aBook | 
		totalPurchase _ totalPurchase + (catalogue at: aBook).
		products add: aBook		
		].
	merchantProcessor chargePaymentInto: aCard of: totalPurchase.
	salesBook add: ('Compra por ', totalPurchase asString, ' a la tarjeta: ', ((aCard number) asString)).! !

#(1 2 3 4) last!

a _ OrderedCollection new.!

a add: 1.!

a add: 2.!

a add: 3.!

a last!
!Cashier methodsFor: 'ticketing' stamp: 'ldmaf 6/9/2022 00:29:06' prior: 50484800!
lastTicket
	^salesBook last.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:30:08' prior: 50486379!
checkout: aCart with: aCard
	totalPurchase  _ 0.
	products _ Bag new. "Preguntar si hace falta tener los productos vendidos historicos".
	(aCart isEmpty) ifTrue: [^self error: 'Cannot checkout an empty cart.'].
	aCart contents do: [:aBook | 
		totalPurchase _ totalPurchase + (catalogue at: aBook).
		products add: aBook		
		].
	merchantProcessor chargePaymentInto: aCard of: totalPurchase.
	salesBook add: ('Compra por ', totalPurchase asString, ' a la tarjeta: ', ((aCard number) asString)).! !

!methodRemoval: Cashier #isStolen: stamp: 'ldmaf 6/9/2022 00:30:28'!
isStolen: aCard
	^ stolenCards includes: (aCard number).!

!methodRemoval: Cashier #isAValidCard: stamp: 'ldmaf 6/9/2022 00:30:30'!
isAValidCard: aCard
	^(aCard isValidAt: ( Date today )) and: ((self isStolen: aCard) not)!

Object subclass: #Cashier
	instanceVariableNames: 'catalogue products totalPurchase salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'ldmaf 6/9/2022 00:30:43'!
Object subclass: #Cashier
	instanceVariableNames: 'catalogue products totalPurchase salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:30:48' prior: 50486309!
initializeWith: aCatalogue using: aMerchantProcessor
	catalogue _ aCatalogue.
	products _ Bag new.
	totalPurchase _ 0.
	salesBook _ OrderedCollection new.
	merchantProcessor _ aMerchantProcessor.
	
	! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:31:49' prior: 50484403!
test01CheckoutOfAnEmptyCartShouldFail
	| aCart aCatalogue aCashier aMerchantProcessor |
	aCatalogue :=  Dictionary new.
	aMerchantProcessor _ FakeMerchantProccesor new.
	aCart := Cart with: aCatalogue.
	aCashier := Cashier new.
	
	self should: [aCashier checkout: aCart] raise: Error withMessageText: 'Cannot checkout an empty cart.'.
	"TODO: Chequear que no pasa lo que no deberia pasar" ! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:32:33' prior: 50486457!
test01CheckoutOfAnEmptyCartShouldFail
	| aCart aCatalogue aCashier aMerchantProcessor |
	aCatalogue :=  Dictionary new.
	aMerchantProcessor _ FakeMerchantProccesor new.
	aCart := Cart with: aCatalogue.
	aCashier := Cashier with: aCatalogue using: aMerchantProcessor.
	
	self should: [aCashier checkout: aCart] raise: Error withMessageText: 'Cannot checkout an empty cart.'.
	! !

!testRun: #CheckoutTest #test01CheckoutOfAnEmptyCartShouldFail stamp: 'ldmaf 6/9/2022 00:32:36'!
PASSED!

a _ OrderedCollection new.!

a last!

a last!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:33:39' prior: 50486473!
test01CheckoutOfAnEmptyCartShouldFail
	| aCart aCatalogue aCashier aMerchantProcessor |
	aCatalogue :=  Dictionary new.
	aMerchantProcessor _ FakeMerchantProccesor new.
	aCart := Cart with: aCatalogue.
	aCashier := Cashier with: aCatalogue using: aMerchantProcessor.
	
	self should: [aCashier checkout: aCart] raise: Error withMessageText: 'Cannot checkout an empty cart.'.
	self should: [aCashier lastTicket] raise: Error withMessageText: 'this collection is empty'.! !

!testRun: #CheckoutTest #test01CheckoutOfAnEmptyCartShouldFail stamp: 'ldmaf 6/9/2022 00:33:41'!
PASSED!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:36:05' prior: 50484882!
test02CheckoutOfACartWithOneItemShouldHaveACorrectCheckoutPrice
	| aCart aCatalogue aCashier aMerchantProcessor |
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567'->10.
	aCart := Cart with: aCatalogue.
	aCart add: '9789504974567'.
	aMerchantProcessor _ FakeMerchantProccesor new.
	aCashier := Cashier with: aCatalogue using: aMerchantProcessor.
	self assert: ((aCashier checkout: aCart) total = 10).
! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:36:14' prior: 50486493!
test01CheckoutOfAnEmptyCartShouldFail
	| aCart aCatalogue aCashier aMerchantProcessor |
	aCatalogue :=  Dictionary new.
	aMerchantProcessor _ FakeMerchantProccesor new.
	aCart := Cart with: aCatalogue.
	aCashier := Cashier with: aCatalogue using: aMerchantProcessor.
	
	self should: [aCashier checkout: aCart] raise: Error withMessageText: 'Cannot checkout an empty cart.'.
	self should: [aCashier lastTicket] raise: Error withMessageText: 'this collection is empty'.! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:36:40' prior: 50486532!
test01CheckoutOfAnEmptyCartShouldFail
	| aCart aCatalogue aCashier aMerchantProcessor aCard aDate|
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCatalogue :=  Dictionary new.
	aMerchantProcessor _ FakeMerchantProccesor new.
	aCart := Cart with: aCatalogue.
	aCashier := Cashier with: aCatalogue using: aMerchantProcessor.
	
	self should: [aCashier checkout: aCart] raise: Error withMessageText: 'Cannot checkout an empty cart.'.
	self should: [aCashier lastTicket] raise: Error withMessageText: 'this collection is empty'.! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:38:40' prior: 50486550!
test01CheckoutOfAnEmptyCartShouldFail
	| aCart aCatalogue aCashier aMerchantProcessor aCard aDate|
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCatalogue :=  Dictionary new.
	aMerchantProcessor _ FakeMerchantProccesor new.
	aCart := Cart with: aCatalogue.
	aCashier := Cashier with: aCatalogue using: aMerchantProcessor.
	aCard _ Card withNumber: '1234567812345678' goodThru: aDate owner: 'Jorge Messi'. 
	
	self should: [aCashier checkout: aCart] raise: Error withMessageText: 'Cannot checkout an empty cart.'.
	self should: [aCashier lastTicket] raise: Error withMessageText: 'this collection is empty'.! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:38:49' prior: 50486571!
test01CheckoutOfAnEmptyCartShouldFail
	| aCart aCatalogue aCashier aMerchantProcessor aCard aDate|
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCatalogue :=  Dictionary new.
	aMerchantProcessor _ FakeMerchantProccesor new.
	aCart := Cart with: aCatalogue.
	aCashier := Cashier with: aCatalogue using: aMerchantProcessor.
	aCard _ Card withNumber: '1234567812345678' goodThru: aDate owner: 'Jorge Messi'. 
	
	self should: [aCashier checkout: aCart] raise: Error withMessageText: 'Cannot checkout an empty cart.'.
	self should: [aCashier lastTicket] raise: Error withMessageText: 'this collection is empty'.! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:39:27' prior: 50486595!
test01CheckoutOfAnEmptyCartShouldFail
	| aCart aCatalogue aCashier aMerchantProcessor aCard aDate|
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCatalogue :=  Dictionary new.
	aMerchantProcessor _ FakeMerchantProccesor new.
	aCart := Cart with: aCatalogue.
	aCashier := Cashier with: aCatalogue using: aMerchantProcessor.
	aCard _ Card withNumber: '1234567812345678' goodThru: aDate owner: 'Jorge Messi'. 
	
	self should: [aCashier checkout: aCart with: aCard] raise: Error withMessageText: 'Cannot checkout an empty cart.'.
	self should: [aCashier lastTicket] raise: Error withMessageText: 'this collection is empty'.! !

!testRun: #CheckoutTest #test01CheckoutOfAnEmptyCartShouldFail stamp: 'ldmaf 6/9/2022 00:40:07'!
ERROR!

!testRun: #CheckoutTest #test01CheckoutOfAnEmptyCartShouldFail stamp: 'ldmaf 6/9/2022 00:40:07'!
ERROR!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:40:17' prior: 50486619!
test01CheckoutOfAnEmptyCartShouldFail
	| aCart aCatalogue aCashier aMerchantProcessor aCard aDate|
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCatalogue :=  Dictionary new.
	aMerchantProcessor _ FakeMerchantProccesor new.
	aCart := Cart with: aCatalogue.
	aCashier := Cashier with: aCatalogue using: aMerchantProcessor.
	aCard _ Card withNumber: 1234567812345678 goodThru: aDate owner: 'Jorge Messi'. 
	
	self should: [aCashier checkout: aCart with: aCard] raise: Error withMessageText: 'Cannot checkout an empty cart.'.
	self should: [aCashier lastTicket] raise: Error withMessageText: 'this collection is empty'.! !

!testRun: #CheckoutTest #test01CheckoutOfAnEmptyCartShouldFail stamp: 'ldmaf 6/9/2022 00:40:19'!
PASSED!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:41:48' prior: 50486515!
test02CheckoutOfACartWithOneItemShouldHaveACorrectCheckoutPrice
	| aCart aCatalogue aCashier aMerchantProcessor aCard |
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567'->10.
	aCart := Cart with: aCatalogue.
	aCart add: '9789504974567'.
	aMerchantProcessor _ FakeMerchantProccesor new.
	aCashier := Cashier with: aCatalogue using: aMerchantProcessor.
	self assert: ((aCashier checkout: aCart with: aCard) total = 10).
! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:42:13' prior: 50486649!
test01CheckoutOfAnEmptyCartShouldFail
	| aCart aCatalogue aCashier aMerchantProcessor aCard aDate|
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCard _ Card withNumber: 1234567812345678 goodThru: aDate owner: 'Jorge Messi'. 
	aCatalogue :=  Dictionary new.
	aMerchantProcessor _ FakeMerchantProccesor new.
	aCart := Cart with: aCatalogue.
	aCashier := Cashier with: aCatalogue using: aMerchantProcessor.
	
	
	self should: [aCashier checkout: aCart with: aCard] raise: Error withMessageText: 'Cannot checkout an empty cart.'.
	self should: [aCashier lastTicket] raise: Error withMessageText: 'this collection is empty'.! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:42:16' prior: 50486693!
test01CheckoutOfAnEmptyCartShouldFail
	| aCart aCatalogue aCashier aMerchantProcessor aCard aDate|
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCard _ Card withNumber: 1234567812345678 goodThru: aDate owner: 'Jorge Messi'. 
	aCatalogue :=  Dictionary new.
	aMerchantProcessor _ FakeMerchantProccesor new.
	aCart := Cart with: aCatalogue.
	aCashier := Cashier with: aCatalogue using: aMerchantProcessor.
	
	self should: [aCashier checkout: aCart with: aCard] raise: Error withMessageText: 'Cannot checkout an empty cart.'.
	self should: [aCashier lastTicket] raise: Error withMessageText: 'this collection is empty'.! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:42:24' prior: 50486676!
test02CheckoutOfACartWithOneItemShouldHaveACorrectCheckoutPrice
	| aCart aCatalogue aCashier aMerchantProcessor aCard aDate|
	
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCard _ Card withNumber: 1234567812345678 goodThru: aDate owner: 'Jorge Messi'. 
	
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567'->10.
	aCart := Cart with: aCatalogue.
	aCart add: '9789504974567'.
	aMerchantProcessor _ FakeMerchantProccesor new.
	aCashier := Cashier with: aCatalogue using: aMerchantProcessor.
	self assert: ((aCashier checkout: aCart with: aCard) total = 10).
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:43:16'!
lastPurcharse
	^totalPurchase.! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:43:16' prior: 50484429!
test03CheckoutOfACartWithManyTimesOfAnItemCheckoutsCorrectPrice
	| aCart aCatalogue aCashier |
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567' -> 10.
	aCart := Cart with: aCatalogue.
	aCart add: 3 of: '9789504974567'.
	aCashier := Cashier with: aCatalogue.
	self assert: ((aCashier checkout: aCart) lastPurcharse = 30).
! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:43:16' prior: 50484442!
test04CheckoutOfACartWithManyTimesOfManyItemsCheckoutsCorrectPrice
	| aCart aCatalogue aCashier |
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567' -> 10; add: '9789505157532' -> 50.
	aCart := Cart with: aCatalogue.
	aCart add: 5 of: '9789504974567'.
	aCart add: 3 of: '9789505157532'.
	aCashier := Cashier with: aCatalogue.
	self assert: ((aCashier checkout: aCart) lastPurcharse = 200).
! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:43:16' prior: 50486741!
test02CheckoutOfACartWithOneItemShouldHaveACorrectCheckoutPrice
	| aCart aCatalogue aCashier aMerchantProcessor aCard aDate|
	
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCard _ Card withNumber: 1234567812345678 goodThru: aDate owner: 'Jorge Messi'. 
	
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567'->10.
	aCart := Cart with: aCatalogue.
	aCart add: '9789504974567'.
	aMerchantProcessor _ FakeMerchantProccesor new.
	aCashier := Cashier with: aCatalogue using: aMerchantProcessor.
	self assert: ((aCashier checkout: aCart with: aCard) lastPurcharse = 10).
! !

!methodRemoval: Cashier #total stamp: 'ldmaf 6/9/2022 00:43:16'!
total
	^totalPurchase.!

!testRun: #CheckoutTest #test02CheckoutOfACartWithOneItemShouldHaveACorrectCheckoutPrice stamp: 'ldmaf 6/9/2022 00:43:25'!
PASSED!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:44:44' prior: 50486768!
test03CheckoutOfACartWithManyTimesOfAnItemCheckoutsCorrectPrice
	| aCart aCatalogue aCashier aCard aDate|
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCard _ Card withNumber: 1234567812345678 goodThru: aDate owner: 'Jorge Messi'. 
	
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567' -> 10.
	aCart := Cart with: aCatalogue.
	aCart add: 3 of: '9789504974567'.
	aCashier := Cashier with: aCatalogue.
	self assert: ((aCashier checkout: aCart with: aCard) lastPurcharse = 30).
! !

!testRun: #CheckoutTest #test03CheckoutOfACartWithManyTimesOfAnItemCheckoutsCorrectPrice stamp: 'ldmaf 6/9/2022 00:44:51'!
ERROR!

!testRun: #CheckoutTest #test03CheckoutOfACartWithManyTimesOfAnItemCheckoutsCorrectPrice stamp: 'ldmaf 6/9/2022 00:44:51'!
ERROR!

!testRun: #CheckoutTest #test03CheckoutOfACartWithManyTimesOfAnItemCheckoutsCorrectPrice stamp: 'ldmaf 6/9/2022 00:45:35'!
ERROR!

!testRun: #CheckoutTest #test03CheckoutOfACartWithManyTimesOfAnItemCheckoutsCorrectPrice stamp: 'ldmaf 6/9/2022 00:45:35'!
ERROR!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:46:21' prior: 50486827!
test03CheckoutOfACartWithManyTimesOfAnItemCheckoutsCorrectPrice
	| aCart aCatalogue aCashier aCard aDate aMerchantProcessor|
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCard _ Card withNumber: 1234567812345678 goodThru: aDate owner: 'Jorge Messi'. 
	aMerchantProcessor _ FakeMerchantProccesor new.
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567' -> 10.
	aCart := Cart with: aCatalogue.
	aCart add: 3 of: '9789504974567'.
	aCashier := Cashier with: aCatalogue using: aMerchantProcessor.
	self assert: ((aCashier checkout: aCart with: aCard) lastPurcharse = 30).
! !

!testRun: #CheckoutTest #test03CheckoutOfACartWithManyTimesOfAnItemCheckoutsCorrectPrice stamp: 'ldmaf 6/9/2022 00:46:24'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfACartWithManyTimesOfAnItemCheckoutsCorrectPrice stamp: 'ldmaf 6/9/2022 00:46:53'!
PASSED!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:48:01' prior: 50486782!
test04CheckoutOfACartWithManyTimesOfManyItemsCheckoutsCorrectPrice
	| aCart aCatalogue aCashier aCard aDate aMerchantProcessor|
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCard _ Card withNumber: 1234567812345678 goodThru: aDate owner: 'Jorge Messi'. 
	aMerchantProcessor _ FakeMerchantProccesor new.
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567' -> 10; add: '9789505157532' -> 50.
	aCart := Cart with: aCatalogue.
	aCart add: 5 of: '9789504974567'.
	aCart add: 3 of: '9789505157532'.
	aCashier := Cashier with: aCatalogue using: aMerchantProcessor.
	self assert: ((aCashier checkout: aCart with: aCard) lastPurcharse = 200).
! !

!testRun: #CheckoutTest #test04CheckoutOfACartWithManyTimesOfManyItemsCheckoutsCorrectPrice stamp: 'ldmaf 6/9/2022 00:48:06'!
PASSED!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:49:31' prior: 50484458!
test05CheckoutOfACartWithManyTimesOfManyItemsCheckoutsCorrectProducts
	| aCart aCatalogue aCashier expectedProducts aCard aDate aMerchantProcessor|
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCard _ Card withNumber: 1234567812345678 goodThru: aDate owner: 'Jorge Messi'. 
	aMerchantProcessor _ FakeMerchantProccesor new.
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567' -> 10; add: '9789505157532' -> 50.
	
	aCart := Cart with: aCatalogue.
	aCart add: 5 of: '9789504974567'.
	aCart add: 3 of: '9789505157532'.
	
	aCashier := Cashier with: aCatalogue.
	
	expectedProducts := Bag new. 
	expectedProducts add: '9789504974567' withOccurrences: 5.
	expectedProducts add: '9789505157532' withOccurrences: 3.
	
	self assert: ((aCashier checkout: aCart) products = expectedProducts).
! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:50:44' prior: 50486923!
test05CheckoutOfACartWithManyTimesOfManyItemsCheckoutsCorrectProducts
	| aCart aCatalogue aCashier expectedProducts aCard aDate aMerchantProcessor|
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCard _ Card withNumber: 1234567812345678 goodThru: aDate owner: 'Jorge Messi'. 
	aMerchantProcessor _ FakeMerchantProccesor new.
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567' -> 10; add: '9789505157532' -> 50.
	
	aCart := Cart with: aCatalogue.
	aCart add: 5 of: '9789504974567'.
	aCart add: 3 of: '9789505157532'.
	
	aCashier := Cashier with: aCatalogue using: aMerchantProcessor.
	
	expectedProducts := Bag new. 
	expectedProducts add: '9789504974567' withOccurrences: 5.
	expectedProducts add: '9789505157532' withOccurrences: 3.
	
	self assert: ((aCashier checkout: aCart with: aCard) products = expectedProducts).
! !

!testRun: #CheckoutTest #test05CheckoutOfACartWithManyTimesOfManyItemsCheckoutsCorrectProducts stamp: 'ldmaf 6/9/2022 00:50:47'!
PASSED!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:52:14' prior: 50485191!
test06CheckoutOfACartWithAValidCardCheckoutsCorrectly
	| aCart aCatalogue aCashier aCard aDate aMerchantProcessor|
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567' -> 10; add: '9789505157532' -> 50.
	aMerchantProcessor _ FakeMerchantProccesor new.
	aCart := Cart with: aCatalogue.
	aCart add: 5 of: '9789504974567'.
	aCart add: 3 of: '9789505157532'.
	
	aCard _ Card withNumber: '1234567812345678' goodThru: aDate owner: 'Jorge Messi'. 
	
	aCashier := Cashier with: aCatalogue.
	
	self assert: ( (aCashier checkout: aCart with: aCard) lastTicket = 'Compra por 200 a la tarjeta 1234567812345678' ).
! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:52:31' prior: 50486987!
test06CheckoutOfACartWithAValidCardCheckoutsCorrectly
	| aCart aCatalogue aCashier aCard aDate aMerchantProcessor|
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567' -> 10; add: '9789505157532' -> 50.
	aMerchantProcessor _ FakeMerchantProccesor new.
	aCart := Cart with: aCatalogue.
	aCart add: 5 of: '9789504974567'.
	aCart add: 3 of: '9789505157532'.
	
	aCard _ Card withNumber: 1234567812345678 goodThru: aDate owner: 'Jorge Messi'. 
	
	aCashier := Cashier with: aCatalogue.
	
	self assert: ( (aCashier checkout: aCart with: aCard) lastTicket = 'Compra por 200 a la tarjeta 1234567812345678' ).
! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:52:50' prior: 50487012!
test06CheckoutOfACartWithAValidCardCheckoutsCorrectly
	| aCart aCatalogue aCashier aCard aDate aMerchantProcessor|
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567' -> 10; add: '9789505157532' -> 50.
	aMerchantProcessor _ FakeMerchantProccesor new.
	aCart := Cart with: aCatalogue.
	aCart add: 5 of: '9789504974567'.
	aCart add: 3 of: '9789505157532'.
	
	aCard _ Card withNumber: 1234567812345678 goodThru: aDate owner: 'Jorge Messi'. 
	
	aCashier := Cashier with: aCatalogue using: aMerchantProcessor.
	
	self assert: ( (aCashier checkout: aCart with: aCard) lastTicket = 'Compra por 200 a la tarjeta 1234567812345678' ).
! !

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/9/2022 00:52:52'!
FAILURE!

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/9/2022 00:52:52'!
FAILURE!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:53:09' prior: 50487037!
test06CheckoutOfACartWithAValidCardCheckoutsCorrectly
	| aCart aCatalogue aCashier aCard aDate aMerchantProcessor|
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567' -> 10; add: '9789505157532' -> 50.
	aMerchantProcessor _ FakeMerchantProccesor new.
	aCart := Cart with: aCatalogue.
	aCart add: 5 of: '9789504974567'.
	aCart add: 3 of: '9789505157532'.
	
	aCard _ Card withNumber: 1234567812345678 goodThru: aDate owner: 'Jorge Messi'. 
	
	aCashier := Cashier with: aCatalogue using: aMerchantProcessor.
	
	self assert: ( (aCashier checkout: aCart with: aCard) lastTicket = 'Compra por 200 a la tarjeta: 1234567812345678' ).
! !

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/9/2022 00:53:11'!
PASSED!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:55:20' prior: 50485274!
test07CheckoutOfACardWithAnExpiredCardDoesntCheckout
	| aCart aCatalogue aCashier aCard aDate aMerchantProcessor|
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber - 5).
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567' -> 10; add: '9789505157532' -> 50.
	aMerchantProcessor _ FakeMerchantProccesor new.
	aCart := Cart with: aCatalogue.
	aCart add: 5 of: '9789504974567'.
	aCart add: 3 of: '9789505157532'.
	
	aCard _ Card withNumber: 1234567812345678 goodThru: aDate owner: 'Jorge Messi'. 
	
	aCashier := Cashier with: aCatalogue using: aMerchantProcessor.
	
	self should: [(aCashier checkout: aCart with: aCard)] raise: Error withMessageText: 'Cannot checkout with an invalid card.'
! !

!testRun: #CheckoutTest #test07CheckoutOfACardWithAnExpiredCardDoesntCheckout stamp: 'ldmaf 6/9/2022 00:55:22'!
FAILURE!

!testRun: #CheckoutTest #test07CheckoutOfACardWithAnExpiredCardDoesntCheckout stamp: 'ldmaf 6/9/2022 00:55:22'!
FAILURE!

'asda' findString: 'a'!

'asda' findString: 'z'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:58:47' prior: 50486405!
checkout: aCart with: aCard
	|purchaseResult|
	totalPurchase  _ 0.
	products _ Bag new. "Preguntar si hace falta tener los productos vendidos historicos".
	(aCart isEmpty) ifTrue: [^self error: 'Cannot checkout an empty cart.'].
	aCart contents do: [:aBook | 
		totalPurchase _ totalPurchase + (catalogue at: aBook).
		products add: aBook		
		].
	purchaseResult _ merchantProcessor chargePaymentInto: aCard of: totalPurchase.
	"Handle error"
	salesBook add: ('Compra por ', totalPurchase asString, ' a la tarjeta: ', ((aCard number) asString)).! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 00:59:39'!
handleMerchantProcessorCode: aMerchantProcessorCode
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 01:01:34' prior: 50487156!
handleMerchantProcessorCode: aMerchantProcessorCode
	(aMerchantProcessorCode findString: '1' = 1) ifTrue: [self error: ''].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 01:01:51' prior: 50486285!
initializeWith: aCatalogue
	catalogue _ aCatalogue.
	products _ Bag new.
	totalPurchase _ 0.
	salesBook _ OrderedCollection new.
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 01:02:08' prior: 50487161!
handleMerchantProcessorCode: aMerchantProcessorCode
	(aMerchantProcessorCode findString: '1' = 1) ifTrue: [self error: 'Cannot checkout with an invalid card.'].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 01:02:51' prior: 50487136!
checkout: aCart with: aCard
	|purchaseResult|
	totalPurchase  _ 0.
	products _ Bag new. "Preguntar si hace falta tener los productos vendidos historicos".
	(aCart isEmpty) ifTrue: [^self error: 'Cannot checkout an empty cart.'].
	aCart contents do: [:aBook | 
		totalPurchase _ totalPurchase + (catalogue at: aBook).
		products add: aBook		
		].
	purchaseResult _ merchantProcessor chargePaymentInto: aCard of: totalPurchase.
	self handleMerchantProcessorCode: purchaseResult.
	salesBook add: ('Compra por ', totalPurchase asString, ' a la tarjeta: ', ((aCard number) asString)).! !

!testRun: #CheckoutTest #test05CheckoutOfACartWithManyTimesOfManyItemsCheckoutsCorrectProducts stamp: 'ldmaf 6/9/2022 01:02:59'!
ERROR!

!testRun: #CheckoutTest #test05CheckoutOfACartWithManyTimesOfManyItemsCheckoutsCorrectProducts stamp: 'ldmaf 6/9/2022 01:02:59'!
ERROR!

!testRun: #CheckoutTest #test01CheckoutOfAnEmptyCartShouldFail stamp: 'ldmaf 6/9/2022 01:03:11'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfACartWithOneItemShouldHaveACorrectCheckoutPrice stamp: 'ldmaf 6/9/2022 01:03:14'!
ERROR!

!testRun: #CheckoutTest #test02CheckoutOfACartWithOneItemShouldHaveACorrectCheckoutPrice stamp: 'ldmaf 6/9/2022 01:03:14'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 01:04:20' prior: 50487185!
checkout: aCart with: aCard
	totalPurchase  _ 0.
	products _ Bag new. "Preguntar si hace falta tener los productos vendidos historicos".
	(aCart isEmpty) ifTrue: [^self error: 'Cannot checkout an empty cart.'].
	aCart contents do: [:aBook | 
		totalPurchase _ totalPurchase + (catalogue at: aBook).
		products add: aBook		
		].
	merchantProcessor chargePaymentInto: aCard of: totalPurchase.
	self handleMerchantProcessorCode: (merchantProcessor code).
	salesBook add: ('Compra por ', totalPurchase asString, ' a la tarjeta: ', ((aCard number) asString)).! !

!testRun: #CheckoutTest #test01CheckoutOfAnEmptyCartShouldFail stamp: 'ldmaf 6/9/2022 01:04:59'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfACartWithOneItemShouldHaveACorrectCheckoutPrice stamp: 'ldmaf 6/9/2022 01:05:02'!
ERROR!

!testRun: #CheckoutTest #test02CheckoutOfACartWithOneItemShouldHaveACorrectCheckoutPrice stamp: 'ldmaf 6/9/2022 01:05:02'!
ERROR!

	(aMerchantProcessorCode findString: '1' = 1) ifTrue: [self error: 'Cannot checkout with an invalid card.'].!
!Cashier methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 01:05:56' prior: 50487176!
handleMerchantProcessorCode: aMerchantProcessorCode
	((aMerchantProcessorCode findString: '1') = 1) ifTrue: [self error: 'Cannot checkout with an invalid card.'].! !

!testRun: #CheckoutTest #test02CheckoutOfACartWithOneItemShouldHaveACorrectCheckoutPrice stamp: 'ldmaf 6/9/2022 01:06:01'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfACartWithManyTimesOfAnItemCheckoutsCorrectPrice stamp: 'ldmaf 6/9/2022 01:06:03'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfACartWithManyTimesOfManyItemsCheckoutsCorrectPrice stamp: 'ldmaf 6/9/2022 01:06:06'!
PASSED!

!testRun: #CheckoutTest #test05CheckoutOfACartWithManyTimesOfManyItemsCheckoutsCorrectProducts stamp: 'ldmaf 6/9/2022 01:06:09'!
PASSED!

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/9/2022 01:06:12'!
PASSED!

!testRun: #CheckoutTest #test07CheckoutOfACardWithAnExpiredCardDoesntCheckout stamp: 'ldmaf 6/9/2022 01:06:15'!
PASSED!

!testRun: #CheckoutTest #test08CheckoutOfACardWithAStolenCardDoesntCheckout stamp: 'ldmaf 6/9/2022 01:06:18'!
ERROR!

!testRun: #CheckoutTest #test08CheckoutOfACardWithAStolenCardDoesntCheckout stamp: 'ldmaf 6/9/2022 01:06:18'!
ERROR!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 01:06:28' prior: 50485382!
test08CheckoutOfACardWithAStolenCardDoesntCheckout
	| aCart aCatalogue aCashier aCard aDate|
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567' -> 10; add: '9789505157532' -> 50.
	
	aCart := Cart with: aCatalogue.
	aCart add: 5 of: '9789504974567'.
	aCart add: 3 of: '9789505157532'.
	
	aCard _ Card withNumber: 1234567812345679 goodThru: aDate owner: 'Jorgelino Messi'. 
	
	aCashier := Cashier with: aCatalogue.
	
	self should: [(aCashier checkout: aCart with: aCard)] raise: Error withMessageText: 'Cannot checkout with an invalid card.'
! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 01:06:48' prior: 50487303!
test08CheckoutOfACardWithAStolenCardDoesntCheckout
	| aCart aCatalogue aCashier aCard aDate|
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567' -> 10; add: '9789505157532' -> 50.
	
	aCart := Cart with: aCatalogue.
	aCart add: 5 of: '9789504974567'.
	aCart add: 3 of: '9789505157532'.
	
	aCard _ Card withNumber: 1234123412341234 goodThru: aDate owner: 'Jorgelino Messi'. 
	
	aCashier := Cashier with: aCatalogue.
	
	self should: [(aCashier checkout: aCart with: aCard)] raise: Error withMessageText: 'Cannot checkout with an invalid card.'
! !

!testRun: #CheckoutTest #test08CheckoutOfACardWithAStolenCardDoesntCheckout stamp: 'ldmaf 6/9/2022 01:06:50'!
FAILURE!

!testRun: #CheckoutTest #test08CheckoutOfACardWithAStolenCardDoesntCheckout stamp: 'ldmaf 6/9/2022 01:06:50'!
FAILURE!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 01:07:17' prior: 50487326!
test08CheckoutOfACardWithAStolenCardDoesntCheckout
	| aCart aCatalogue aCashier aCard aDate aMerchantProcessor|
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCatalogue := Dictionary new.
	aCatalogue add: '9789504974567' -> 10; add: '9789505157532' -> 50.
	aMerchantProcessor _ FakeMerchantProccesor new.
	aCart := Cart with: aCatalogue.
	aCart add: 5 of: '9789504974567'.
	aCart add: 3 of: '9789505157532'.
	
	aCard _ Card withNumber: 1234123412341234 goodThru: aDate owner: 'Jorgelino Messi'. 
	
	aCashier := Cashier with: aCatalogue using: aMerchantProcessor.
	
	self should: [(aCashier checkout: aCart with: aCard)] raise: Error withMessageText: 'Cannot checkout with an invalid card.'
! !

!testRun: #CheckoutTest #test08CheckoutOfACardWithAStolenCardDoesntCheckout stamp: 'ldmaf 6/9/2022 01:07:19'!
FAILURE!

!testRun: #CheckoutTest #test08CheckoutOfACardWithAStolenCardDoesntCheckout stamp: 'ldmaf 6/9/2022 01:07:19'!
FAILURE!

	^(stolenCards includes: aCard number)!
!FakeMerchantProccesor methodsFor: 'operations' stamp: 'ldmaf 6/9/2022 01:08:30' prior: 50485668 overrides: 16920235!
initialize
	stolenCards _ OrderedCollection with: 1234123412341234.! !

!testRun: #CheckoutTest #test01CheckoutOfAnEmptyCartShouldFail stamp: 'ldmaf 6/9/2022 01:08:36'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfACartWithOneItemShouldHaveACorrectCheckoutPrice stamp: 'ldmaf 6/9/2022 01:08:36'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfACartWithManyTimesOfAnItemCheckoutsCorrectPrice stamp: 'ldmaf 6/9/2022 01:08:36'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfACartWithManyTimesOfManyItemsCheckoutsCorrectPrice stamp: 'ldmaf 6/9/2022 01:08:36'!
PASSED!

!testRun: #CheckoutTest #test05CheckoutOfACartWithManyTimesOfManyItemsCheckoutsCorrectProducts stamp: 'ldmaf 6/9/2022 01:08:36'!
PASSED!

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/9/2022 01:08:36'!
PASSED!

!testRun: #CheckoutTest #test07CheckoutOfACardWithAnExpiredCardDoesntCheckout stamp: 'ldmaf 6/9/2022 01:08:36'!
PASSED!

!testRun: #CheckoutTest #test08CheckoutOfACardWithAStolenCardDoesntCheckout stamp: 'ldmaf 6/9/2022 01:08:36'!
PASSED!

!methodRemoval: Cashier #checkout: stamp: 'ldmaf 6/9/2022 01:09:41'!
checkout: aCart
	(aCart isEmpty) ifTrue: [^self error: 'Cannot checkout an empty cart.'].
	aCart contents do: [:aBook | 
		totalPurchase _ totalPurchase + (catalogue at: aBook).
		products add: aBook		
		].!

!methodRemoval: Cashier #initializeWith: stamp: 'ldmaf 6/9/2022 01:09:56'!
initializeWith: aCatalogue
	catalogue _ aCatalogue.
	products _ Bag new.
	totalPurchase _ 0.
	salesBook _ OrderedCollection new.
	
	!

!testRun: #CheckoutTest #test01CheckoutOfAnEmptyCartShouldFail stamp: 'ldmaf 6/9/2022 01:09:59'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfACartWithOneItemShouldHaveACorrectCheckoutPrice stamp: 'ldmaf 6/9/2022 01:09:59'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfACartWithManyTimesOfAnItemCheckoutsCorrectPrice stamp: 'ldmaf 6/9/2022 01:09:59'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfACartWithManyTimesOfManyItemsCheckoutsCorrectPrice stamp: 'ldmaf 6/9/2022 01:09:59'!
PASSED!

!testRun: #CheckoutTest #test05CheckoutOfACartWithManyTimesOfManyItemsCheckoutsCorrectProducts stamp: 'ldmaf 6/9/2022 01:09:59'!
PASSED!

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/9/2022 01:09:59'!
PASSED!

!testRun: #CheckoutTest #test07CheckoutOfACardWithAnExpiredCardDoesntCheckout stamp: 'ldmaf 6/9/2022 01:09:59'!
PASSED!

!testRun: #CheckoutTest #test08CheckoutOfACardWithAStolenCardDoesntCheckout stamp: 'ldmaf 6/9/2022 01:09:59'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenIsCreated stamp: 'ldmaf 6/9/2022 01:10:02'!
PASSED!

!testRun: #CartTest #test02CartIsNotEmptyWhenAProductIsAdded stamp: 'ldmaf 6/9/2022 01:10:02'!
PASSED!

!testRun: #CartTest #test03CantAddBooksNotEditedByEditorToCart stamp: 'ldmaf 6/9/2022 01:10:02'!
PASSED!

!testRun: #CartTest #test04CartCanAddMultipleAmountsOfTheSameBook stamp: 'ldmaf 6/9/2022 01:10:02'!
PASSED!

!testRun: #CartTest #test05CartThrowsErrorWhenAnInvalidAmountIsRequested stamp: 'ldmaf 6/9/2022 01:10:02'!
PASSED!

!testRun: #CartTest #test06CartAddedBooksAreCorrect stamp: 'ldmaf 6/9/2022 01:10:02'!
PASSED!

!testRun: #CartTest #test07CartCanRequestItsContents stamp: 'ldmaf 6/9/2022 01:10:02'!
PASSED!

!testRun: #CardTest #test01AValidNumberCanCreateACard stamp: 'ldmaf 6/9/2022 01:10:06'!
PASSED!

!testRun: #CardTest #test02AnEmptyCardNumberCantCreateACard stamp: 'ldmaf 6/9/2022 01:10:06'!
PASSED!

!testRun: #CardTest #test03AnIncompleteCardNumberCantCreateACard stamp: 'ldmaf 6/9/2022 01:10:06'!
PASSED!

!testRun: #CardTest #test04AnExceededCardNumberCantCreateACard stamp: 'ldmaf 6/9/2022 01:10:06'!
PASSED!

!testRun: #CardTest #test05ACardWithInvalidNumberCantCreateACard stamp: 'ldmaf 6/9/2022 01:10:06'!
PASSED!

!testRun: #CardTest #test06ACardWithBlanksTrimmedNameIfIsBlankCantCreateACard stamp: 'ldmaf 6/9/2022 01:10:06'!
PASSED!

!testRun: #CardTest #test07ACardWithAnInvalidDateCantCreateACard stamp: 'ldmaf 6/9/2022 01:10:06'!
PASSED!

----QUIT----(9 June 2022 01:11:15) CuisUniversity-5096.image priorSource: 4947071!

----STARTUP---- (9 June 2022 01:11:19) as /home/lisandro/Documents/Facultad/ING1/linux64/CuisUniversity-5096.image!


----QUIT----(9 June 2022 01:11:30) CuisUniversity-5096.image priorSource: 4987880!

----STARTUP---- (9 June 2022 17:19:35) as /home/clinux01/Descargas/linux64/CuisUniversity-5096.image!


----End fileIn of /home/clinux01/Descargas/linux64/TusLibros.st----!

!testRun: #CardTest #test01AValidNumberCanCreateACard stamp: 'ldmaf 6/9/2022 17:19:53'!
PASSED!

!testRun: #CardTest #test02AnEmptyCardNumberCantCreateACard stamp: 'ldmaf 6/9/2022 17:19:53'!
PASSED!

!testRun: #CardTest #test03AnIncompleteCardNumberCantCreateACard stamp: 'ldmaf 6/9/2022 17:19:53'!
PASSED!

!testRun: #CardTest #test04AnExceededCardNumberCantCreateACard stamp: 'ldmaf 6/9/2022 17:19:53'!
PASSED!

!testRun: #CardTest #test05ACardWithInvalidNumberCantCreateACard stamp: 'ldmaf 6/9/2022 17:19:53'!
PASSED!

!testRun: #CardTest #test06ACardWithBlanksTrimmedNameIfIsBlankCantCreateACard stamp: 'ldmaf 6/9/2022 17:19:53'!
PASSED!

!testRun: #CardTest #test07ACardWithAnInvalidDateCantCreateACard stamp: 'ldmaf 6/9/2022 17:19:53'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenIsCreated stamp: 'ldmaf 6/9/2022 17:19:53'!
PASSED!

!testRun: #CartTest #test02CartIsNotEmptyWhenAProductIsAdded stamp: 'ldmaf 6/9/2022 17:19:53'!
PASSED!

!testRun: #CartTest #test03CantAddBooksNotEditedByEditorToCart stamp: 'ldmaf 6/9/2022 17:19:53'!
PASSED!

!testRun: #CartTest #test04CartCanAddMultipleAmountsOfTheSameBook stamp: 'ldmaf 6/9/2022 17:19:53'!
PASSED!

!testRun: #CartTest #test05CartThrowsErrorWhenAnInvalidAmountIsRequested stamp: 'ldmaf 6/9/2022 17:19:53'!
PASSED!

!testRun: #CartTest #test06CartAddedBooksAreCorrect stamp: 'ldmaf 6/9/2022 17:19:53'!
PASSED!

!testRun: #CartTest #test07CartCanRequestItsContents stamp: 'ldmaf 6/9/2022 17:19:53'!
PASSED!

!testRun: #CheckoutTest #test01CheckoutOfAnEmptyCartShouldFail stamp: 'ldmaf 6/9/2022 17:19:53'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfACartWithOneItemShouldHaveACorrectCheckoutPrice stamp: 'ldmaf 6/9/2022 17:19:53'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfACartWithManyTimesOfAnItemCheckoutsCorrectPrice stamp: 'ldmaf 6/9/2022 17:19:53'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfACartWithManyTimesOfManyItemsCheckoutsCorrectPrice stamp: 'ldmaf 6/9/2022 17:19:53'!
PASSED!

!testRun: #CheckoutTest #test05CheckoutOfACartWithManyTimesOfManyItemsCheckoutsCorrectProducts stamp: 'ldmaf 6/9/2022 17:19:53'!
PASSED!

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/9/2022 17:19:53'!
PASSED!

!testRun: #CheckoutTest #test07CheckoutOfACardWithAnExpiredCardDoesntCheckout stamp: 'ldmaf 6/9/2022 17:19:53'!
PASSED!

!testRun: #CheckoutTest #test08CheckoutOfACardWithAStolenCardDoesntCheckout stamp: 'ldmaf 6/9/2022 17:19:53'!
PASSED!

!testRun: #MerchantProccesorTest #test01MerchantProccesorChargesAPaymentWithAValidCard stamp: 'ldmaf 6/9/2022 17:19:53'!
ERROR!

!testRun: #MerchantProccesorTest #test02MerchantProccesorDoesntChargeAPaymentWithAnInvalidCard stamp: 'ldmaf 6/9/2022 17:19:53'!
ERROR!

!testRun: #MerchantProccesorTest #test01MerchantProccesorChargesAPaymentWithAValidCard stamp: 'ldmaf 6/9/2022 17:20:08'!
ERROR!

!testRun: #MerchantProccesorTest #test01MerchantProccesorChargesAPaymentWithAValidCard stamp: 'ldmaf 6/9/2022 17:20:08'!
ERROR!

!testRun: #MerchantProccesorTest #test01MerchantProccesorChargesAPaymentWithAValidCard stamp: 'ldmaf 6/9/2022 17:20:25'!
ERROR!
!MerchantProccesorTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 17:20:44' prior: 50487942!
test01MerchantProccesorChargesAPaymentWithAValidCard
	|fakeMerchantProccesor aDate aCard anAmount resultCode|
	resultCode _ '0|OK'.
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCard _ Card withNumber: 1234567812345678 goodThru: aDate owner: 'Jorge Penaldo'.
	fakeMerchantProccesor  _ FakeMerchantProccesor new.
	anAmount _ 200.
	
	self assert: (((fakeMerchantProccesor chargePaymentInto: aCard of: anAmount) code) = resultCode).! !
!MerchantProccesorTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 17:20:52' prior: 50487960!
test02MerchantProccesorDoesntChargeAPaymentWithAnInvalidCard
	|fakeMerchantProccesor aDate aCard aStolenCard anAmount resultCode|
	resultCode _ '1|ERROR:Invalid Card'.
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber - 5).
	aCard _ Card withNumber: 1234567812345678 goodThru: aDate owner: 'Jorge Penaldo'.
	aStolenCard _ Card withNumber: 1234123412341234 goodThru: aDate owner: 'Pablo Messinaldo'.
	fakeMerchantProccesor  _ FakeMerchantProccesor new.
	anAmount _ 200.
	
	self assert: (((fakeMerchantProccesor chargePaymentInto: aCard of: anAmount) code) = resultCode).
	self assert: (((fakeMerchantProccesor chargePaymentInto: aStolenCard of: anAmount) code) = resultCode).! !

!testRun: #CardTest #test01AValidNumberCanCreateACard stamp: 'ldmaf 6/9/2022 17:20:55'!
PASSED!

!testRun: #CardTest #test02AnEmptyCardNumberCantCreateACard stamp: 'ldmaf 6/9/2022 17:20:55'!
PASSED!

!testRun: #CardTest #test03AnIncompleteCardNumberCantCreateACard stamp: 'ldmaf 6/9/2022 17:20:55'!
PASSED!

!testRun: #CardTest #test04AnExceededCardNumberCantCreateACard stamp: 'ldmaf 6/9/2022 17:20:55'!
PASSED!

!testRun: #CardTest #test05ACardWithInvalidNumberCantCreateACard stamp: 'ldmaf 6/9/2022 17:20:55'!
PASSED!

!testRun: #CardTest #test06ACardWithBlanksTrimmedNameIfIsBlankCantCreateACard stamp: 'ldmaf 6/9/2022 17:20:55'!
PASSED!

!testRun: #CardTest #test07ACardWithAnInvalidDateCantCreateACard stamp: 'ldmaf 6/9/2022 17:20:55'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenIsCreated stamp: 'ldmaf 6/9/2022 17:20:55'!
PASSED!

!testRun: #CartTest #test02CartIsNotEmptyWhenAProductIsAdded stamp: 'ldmaf 6/9/2022 17:20:55'!
PASSED!

!testRun: #CartTest #test03CantAddBooksNotEditedByEditorToCart stamp: 'ldmaf 6/9/2022 17:20:55'!
PASSED!

!testRun: #CartTest #test04CartCanAddMultipleAmountsOfTheSameBook stamp: 'ldmaf 6/9/2022 17:20:55'!
PASSED!

!testRun: #CartTest #test05CartThrowsErrorWhenAnInvalidAmountIsRequested stamp: 'ldmaf 6/9/2022 17:20:55'!
PASSED!

!testRun: #CartTest #test06CartAddedBooksAreCorrect stamp: 'ldmaf 6/9/2022 17:20:55'!
PASSED!

!testRun: #CartTest #test07CartCanRequestItsContents stamp: 'ldmaf 6/9/2022 17:20:55'!
PASSED!

!testRun: #CheckoutTest #test01CheckoutOfAnEmptyCartShouldFail stamp: 'ldmaf 6/9/2022 17:20:55'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfACartWithOneItemShouldHaveACorrectCheckoutPrice stamp: 'ldmaf 6/9/2022 17:20:55'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfACartWithManyTimesOfAnItemCheckoutsCorrectPrice stamp: 'ldmaf 6/9/2022 17:20:55'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfACartWithManyTimesOfManyItemsCheckoutsCorrectPrice stamp: 'ldmaf 6/9/2022 17:20:55'!
PASSED!

!testRun: #CheckoutTest #test05CheckoutOfACartWithManyTimesOfManyItemsCheckoutsCorrectProducts stamp: 'ldmaf 6/9/2022 17:20:55'!
PASSED!

!testRun: #CheckoutTest #test06CheckoutOfACartWithAValidCardCheckoutsCorrectly stamp: 'ldmaf 6/9/2022 17:20:55'!
PASSED!

!testRun: #CheckoutTest #test07CheckoutOfACardWithAnExpiredCardDoesntCheckout stamp: 'ldmaf 6/9/2022 17:20:55'!
PASSED!

!testRun: #CheckoutTest #test08CheckoutOfACardWithAStolenCardDoesntCheckout stamp: 'ldmaf 6/9/2022 17:20:55'!
PASSED!

!testRun: #MerchantProccesorTest #test01MerchantProccesorChargesAPaymentWithAValidCard stamp: 'ldmaf 6/9/2022 17:20:55'!
PASSED!

!testRun: #MerchantProccesorTest #test02MerchantProccesorDoesntChargeAPaymentWithAnInvalidCard stamp: 'ldmaf 6/9/2022 17:20:55'!
PASSED!

!classRemoval: #FakeMerchantProccesor stamp: 'ldmaf 6/9/2022 17:23:16'!
Object subclass: #FakeMerchantProccesor
	instanceVariableNames: 'code stolenCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'ldmaf 6/9/2022 17:23:17'!
Object subclass: #Cashier
	instanceVariableNames: 'catalogue products totalPurchase salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'ldmaf 6/9/2022 17:23:17'!
Object subclass: #Cart
	instanceVariableNames: 'items catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Card stamp: 'ldmaf 6/9/2022 17:23:17'!
Object subclass: #Card
	instanceVariableNames: 'owner goodThru number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Book stamp: 'ldmaf 6/9/2022 17:23:17'!
Object subclass: #Book
	instanceVariableNames: 'isbn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProccesorTest stamp: 'ldmaf 6/9/2022 17:23:18'!
TestCase subclass: #MerchantProccesorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CheckoutTest stamp: 'ldmaf 6/9/2022 17:23:18'!
TestCase subclass: #CheckoutTest
	instanceVariableNames: 'aProduct'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'ldmaf 6/9/2022 17:23:18'!
TestCase subclass: #CartTest
	instanceVariableNames: 'aProduct'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CardTest stamp: 'ldmaf 6/9/2022 17:23:18'!
TestCase subclass: #CardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/clinux01/Descargas/linux64/TusLibros.st----!
!MerchantProccesorTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 17:23:36' prior: 50488941!
test02MerchantProccesorDoesntChargeAPaymentWithAnInvalidCard
	|fakeMerchantProccesor aDate aCard aStolenCard anAmount resultCode|
	resultCode _ '1|ERROR:Invalid Card'.
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber - 5).
	aCard _ Card withNumber: 1234567812345678 goodThru: aDate owner: 'Jorge Penaldo'.
	aStolenCard _ Card withNumber: 1234123412341234 goodThru: aDate owner: 'Pablo Messinaldo'.
	fakeMerchantProccesor  _ FakeMerchantProccesor new.
	anAmount _ 200.
	
	self assert: (((fakeMerchantProccesor chargePaymentInto: aCard of: anAmount) code) = resultCode).
	self assert: (((fakeMerchantProccesor chargePaymentInto: aStolenCard of: anAmount) code) = resultCode).! !
!MerchantProccesorTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 17:23:40' prior: 50488923!
test01MerchantProccesorChargesAPaymentWithAValidCard
	|fakeMerchantProccesor aDate aCard anAmount resultCode|
	resultCode _ '0|OK'.
	aDate _ Date newDay: 12 month: #July year: (Date today yearNumber + 5).
	aCard _ Card withNumber: 1234567812345678 goodThru: aDate owner: 'Jorge Penaldo'.
	fakeMerchantProccesor  _ FakeMerchantProccesor new.
	anAmount _ 200.
	
	self assert: (((fakeMerchantProccesor chargePaymentInto: aCard of: anAmount) code) = resultCode).! !

Date today < Date yesterday !

Date today < 123!

!classRemoval: #FakeMerchantProccesor stamp: 'ldmaf 6/9/2022 19:51:08'!
Object subclass: #FakeMerchantProccesor
	instanceVariableNames: 'code stolenCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'ldmaf 6/9/2022 19:51:08'!
Object subclass: #Cashier
	instanceVariableNames: 'catalogue products totalPurchase salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'ldmaf 6/9/2022 19:51:08'!
Object subclass: #Cart
	instanceVariableNames: 'items catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Card stamp: 'ldmaf 6/9/2022 19:51:08'!
Object subclass: #Card
	instanceVariableNames: 'owner goodThru number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProccesorTest stamp: 'ldmaf 6/9/2022 19:51:09'!
TestCase subclass: #MerchantProccesorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CheckoutTest stamp: 'ldmaf 6/9/2022 19:51:09'!
TestCase subclass: #CheckoutTest
	instanceVariableNames: 'aProduct'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'ldmaf 6/9/2022 19:51:09'!
TestCase subclass: #CartTest
	instanceVariableNames: 'aProduct'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CardTest stamp: 'ldmaf 6/9/2022 19:51:09'!
TestCase subclass: #CardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/clinux01/Descargas/Iteracion2/TusLibros-33.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ldmaf 6/9/2022 19:52:38'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ldmaf 6/9/2022 19:52:38'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ldmaf 6/9/2022 19:52:38'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ldmaf 6/9/2022 19:52:38'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ldmaf 6/9/2022 19:52:38'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ldmaf 6/9/2022 19:52:38'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ldmaf 6/9/2022 19:52:38'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ldmaf 6/9/2022 19:52:38'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ldmaf 6/9/2022 19:52:38'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ldmaf 6/9/2022 19:52:38'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ldmaf 6/9/2022 19:52:38'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ldmaf 6/9/2022 19:52:38'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ldmaf 6/9/2022 19:52:38'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ldmaf 6/9/2022 19:52:38'!
PASSED!

TestCase subclass: #TusLibrosInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosInterfaceTest category: 'TusLibros' stamp: 'ldmaf 6/9/2022 20:00:47'!
TestCase subclass: #TusLibrosInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterfaceTest methodsFor: 'nil' stamp: 'ldmaf 6/9/2022 20:01:08'!
test01
	self assert: 2 = 1 + 1! !

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'ldmaf 6/9/2022 20:01:08'!
ERROR!

!classDefinition: #TusLibrosFakeService category: 'TusLibros' stamp: 'ldmaf 6/9/2022 20:20:55'!
Object subclass: #TusLibrosFakeService
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 20:20:50' prior: 50489920!
test01
	|clientId clientPassword service response cartId|
	service _ TusLibrosFakeService new.
	response _ (service createCartWith: clientId and: clientPassword). 
	self assert: (response code = 0).! !

!classDefinition: #TusLibrosInterfaceTest category: 'TusLibros' stamp: 'ldmaf 6/9/2022 20:24:14'!
TestCase subclass: #TusLibrosInterfaceTest
	instanceVariableNames: 'usersDicc'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 20:24:13' prior: 50489935!
test01
	|clientId clientPassword service response|
	usersDicc _ Dictionary new.
	
	clientId _ 1.
	clientPassword _ 'fuaeldiego'.
	service _ TusLibrosFakeService with: usersDicc.
	response _ (service createCartWith: clientId and: clientPassword). 
	self assert: (response code = 0).! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 20:30:56' prior: 50489953!
test01
	|clientId clientPassword service cartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (clientId->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ (service createCartWith: clientId and: clientPassword). 
	self assert: ((service listCart: cartId) isEmpty).! !

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'ldmaf 6/9/2022 20:31:31'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'ldmaf 6/9/2022 20:31:31'!
ERROR!
!TusLibrosFakeService class methodsFor: 'instance creation' stamp: 'ldmaf 6/9/2022 20:31:37'!
with: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aDictionary ! !
!TusLibrosFakeService class methodsFor: 'instance creation' stamp: 'ldmaf 6/9/2022 20:31:45' prior: 50489985!
with: aDictionary 
	^self new initializeWith: aDictionary ! !

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'ldmaf 6/9/2022 20:31:46'!
ERROR!

!classDefinition: #TusLibrosFakeService category: 'TusLibros' stamp: 'ldmaf 6/9/2022 20:31:51'!
Object subclass: #TusLibrosFakeService
	instanceVariableNames: 'dictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFakeService methodsFor: 'init' stamp: 'ldmaf 6/9/2022 20:31:51'!
initializeWith: aDictionary 
	self shouldBeImplemented.
	dictionary := aDictionary.! !

!classDefinition: #TusLibrosFakeService category: 'TusLibros' stamp: 'ldmaf 6/9/2022 20:31:59'!
Object subclass: #TusLibrosFakeService
	instanceVariableNames: 'dictionary users'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFakeService methodsFor: 'init' stamp: 'ldmaf 6/9/2022 20:31:58' prior: 50490009!
initializeWith: aDictionary 
	users := aDictionary.! !

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'ldmaf 6/9/2022 20:32:01'!
ERROR!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/9/2022 20:32:09'!
createCartWith: aSmallInteger and: aString 
	self shouldBeImplemented.! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/9/2022 20:32:35' prior: 50490030!
createCartWith: aClientId and: aPassword
	^1.! !

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'ldmaf 6/9/2022 20:32:36'!
ERROR!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/9/2022 20:32:40'!
listCart: aSmallInteger 
	self shouldBeImplemented.! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/9/2022 20:33:14' prior: 50490043!
listCart: aCartId 
	^ Cart new.! !

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'ldmaf 6/9/2022 20:33:15'!
ERROR!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/9/2022 20:34:38' prior: 50490048!
listCart: aCartId 
	^ Cart acceptingItemsOf: (Dictionary new).! !

!testRun: #TusLibrosInterfaceTest #test01 stamp: 'ldmaf 6/9/2022 20:34:42'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 20:35:12'!
test01CreateCartWithValidCredentialsReturnsAnEmptyCart
	|clientId clientPassword service cartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (clientId->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ (service createCartWith: clientId and: clientPassword). 
	self assert: ((service listCart: cartId) isEmpty).! !

!methodRemoval: TusLibrosInterfaceTest #test01 stamp: 'ldmaf 6/9/2022 20:35:12'!
test01
	|clientId clientPassword service cartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (clientId->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ (service createCartWith: clientId and: clientPassword). 
	self assert: ((service listCart: cartId) isEmpty).!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 20:36:12'!
test02CreateCartWithInvalidCredentialsShouldNotCreateCart
	|clientId clientPassword service cartId|
	usersDicc _ Dictionary new.
	clientId _ 2.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ (service createCartWith: clientId and: clientPassword). 
	self assert: ((service listCart: cartId) isEmpty).! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 20:38:29' prior: 50490091!
test02CreateCartWithInvalidCredentialsShouldNotCreateCart
	|clientId clientPassword service |
	usersDicc _ Dictionary new.
	clientId _ 2.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	self should: [service createCartWith: clientId and: clientPassword] raise: Error withMessageText: 'Invalid credentials.'! !

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/9/2022 20:38:35'!
FAILURE!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/9/2022 20:39:21' prior: 50490036!
createCartWith: aClientId and: aPassword
	^1.! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/9/2022 20:42:05' prior: 50490127!
createCartWith: aClientId and: aPassword
	(users at: aClientId = aPassword) ifTrue: [^1] ifFalse: [self error: 'Invalid credentials.']! !

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/9/2022 20:42:07'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/9/2022 20:42:07'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/9/2022 20:42:19'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/9/2022 20:42:19'!
ERROR!

	(users at: aClientId = aPassword) ifTrue: [^1] ifFalse: [self error: 'Invalid credentials.']!

self at: 1!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/9/2022 20:43:29' prior: 50490132!
createCartWith: aClientId and: aPassword
	((users at: aClientId) = aPassword) ifTrue: [^1] ifFalse: [self error: 'Invalid credentials.']! !

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/9/2022 20:43:36'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/9/2022 20:43:53'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/9/2022 20:43:53'!
FAILURE!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/9/2022 20:44:31' prior: 50490160!
createCartWith: aClientId and: aPassword
	((users at: aClientId) = aPassword) ifError: [self error: 'Invalid credentials.'].
	^1.! !

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/9/2022 20:44:34'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/9/2022 20:44:34'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/9/2022 20:44:39'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/9/2022 20:44:39'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/9/2022 20:44:48'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/9/2022 20:44:48'!
FAILURE!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/9/2022 20:46:38' prior: 50490181!
createCartWith: aClientId and: aPassword
	(users keys includes: aClientId) ifTrue: [
			((users at: aClientId) = aPassword) ifTrue: [^1] ifFalse: [self error: 'Invalid credentials.'] 
		].! !

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/9/2022 20:46:42'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/9/2022 20:46:44'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/9/2022 20:46:44'!
FAILURE!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/9/2022 20:47:23' prior: 50490214!
createCartWith: aClientId and: aPassword
	(users keys includes: aClientId) ifTrue: [
			((users at: aClientId) = aPassword) ifTrue: [^1] ifFalse: [self error: 'Invalid credentials.'] 
		] ifFalse: [self error: 'Invalid credentials.'].! !

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/9/2022 20:47:29'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/9/2022 20:47:29'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 20:56:42'!
test03
	|clientId clientPassword service cartId |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	service add: 3 of: '9780764548345' to: cartId.
	self assert: (service listCart: cartId isEmpty not).! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 20:58:02' prior: 50490255!
test03
	|clientId clientPassword service cartId |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	service add: 3 of: '9780764548345' to: cartId.
	self assert: ((service listCart: cartId) occurrencesOf: '9780764548345' = 3).! !

!testRun: #TusLibrosInterfaceTest #test03 stamp: 'ldmaf 6/9/2022 20:58:04'!
ERROR!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/9/2022 20:58:08'!
add: aSmallInteger of: aString to: aSmallInteger3 
	self shouldBeImplemented.! !

!classDefinition: #TusLibrosFakeService category: 'TusLibros' stamp: 'ldmaf 6/9/2022 20:59:44'!
Object subclass: #TusLibrosFakeService
	instanceVariableNames: 'dictionary users carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/9/2022 20:59:31' prior: 50490289!
add: anAmount of: anIsbn to: aCartId
	(carts at: aCartId) add: anAmount of: anIsbn.! !

!testRun: #TusLibrosInterfaceTest #test03 stamp: 'ldmaf 6/9/2022 20:59:49'!
ERROR!
!TusLibrosFakeService methodsFor: 'init' stamp: 'ldmaf 6/9/2022 21:00:11' prior: 50490023!
initializeWith: aDictionary 
	users _ aDictionary.
	carts _ Dictionary new.! !

!classDefinition: #TusLibrosFakeService category: 'TusLibros' stamp: 'ldmaf 6/9/2022 21:01:20'!
Object subclass: #TusLibrosFakeService
	instanceVariableNames: 'dictionary users carts tusLibrosCatalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/9/2022 21:01:19' prior: 50490236!
createCartWith: aClientId and: aPassword
	(users keys includes: aClientId) ifTrue: [
			((users at: aClientId) = aPassword) ifTrue: [
					carts add: aClientId -> Cart acceptingItemsOf: tusLibrosCatalogue
					^1.
				] ifFalse: [self error: 'Invalid credentials.'] 
		] ifFalse: [self error: 'Invalid credentials.'].! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/9/2022 21:01:32' prior: 50490327!
createCartWith: aClientId and: aPassword
	(users keys includes: aClientId) ifTrue: [
			((users at: aClientId) = aPassword) ifTrue: [
					carts add: (aClientId -> (Cart acceptingItemsOf: tusLibrosCatalogue)).
					^1.
				] ifFalse: [self error: 'Invalid credentials.'] 
		] ifFalse: [self error: 'Invalid credentials.'].! !
!TusLibrosFakeService methodsFor: 'init' stamp: 'ldmaf 6/9/2022 21:02:36' prior: 50490312!
initializeWith: aDictionary 
	users _ aDictionary.
	carts _ Dictionary new.
	tusLibrosCatalogue _ Dictionary new.
	tusLibrosCatalogue add: '9780764548345'.! !
!TusLibrosFakeService methodsFor: 'init' stamp: 'ldmaf 6/9/2022 21:03:36' prior: 50490355!
initializeWith: aDictionary 
	users _ aDictionary.
	carts _ Dictionary new.
	tusLibrosCatalogue _ Dictionary new.
	tusLibrosCatalogue add: ('9780764548345'->100).! !

!testRun: #TusLibrosInterfaceTest #test03 stamp: 'ldmaf 6/9/2022 21:03:42'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test03 stamp: 'ldmaf 6/9/2022 21:03:42'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/9/2022 21:03:47'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/9/2022 21:03:50'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 21:04:01' prior: 50490271!
test03
	|clientId clientPassword service cartId |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	service add: 3 of: '9780764548345' to: cartId.
	self assert: (((service listCart: cartId) occurrencesOf: '9780764548345') = 3).! !

!testRun: #TusLibrosInterfaceTest #test03 stamp: 'ldmaf 6/9/2022 21:04:03'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test03 stamp: 'ldmaf 6/9/2022 21:04:03'!
FAILURE!

carts at: 1!

(carts at: 1)!

(service listCart: cartId)!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/9/2022 21:06:13' prior: 50490055!
listCart: aCartId 
	^ carts at: aCartId.! !

!testRun: #TusLibrosInterfaceTest #test03 stamp: 'ldmaf 6/9/2022 21:06:17'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/9/2022 21:06:20'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/9/2022 21:06:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03 stamp: 'ldmaf 6/9/2022 21:06:27'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03 stamp: 'ldmaf 6/9/2022 21:06:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/9/2022 21:06:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/9/2022 21:06:57'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03 stamp: 'ldmaf 6/9/2022 21:06:57'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 21:08:05'!
test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt
	|clientId clientPassword service cartId |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	service add: 3 of: '9780764548345' to: cartId.
	self assert: (((service listCart: cartId) occurrencesOf: '9780764548345') = 3).! !

!methodRemoval: TusLibrosInterfaceTest #test03 stamp: 'ldmaf 6/9/2022 21:08:05'!
test03
	|clientId clientPassword service cartId |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	service add: 3 of: '9780764548345' to: cartId.
	self assert: (((service listCart: cartId) occurrencesOf: '9780764548345') = 3).!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 21:18:34'!
test04
	|clientId clientPassword service cartId fakeCartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	fakeCartId _ 999.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	service add: 3 of: '9780764548345' to: cartId.
	self should: [service listCart: fakeCartId] raise: Error withMessageText: 'Non Existing Cart Id.'! !

!testRun: #TusLibrosInterfaceTest #test04 stamp: 'ldmaf 6/9/2022 21:18:37'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test04 stamp: 'ldmaf 6/9/2022 21:18:37'!
FAILURE!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/9/2022 21:20:14' prior: 50490409!
listCart: aCartId 
	(carts keys includes: aCartId) ifFalse: [self error: 'Non Existing Cart Id'].
	^ carts at: aCartId.! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/9/2022 21:20:22' prior: 50490497!
listCart: aCartId 
	(carts keys includes: aCartId) ifFalse: [self error: 'Non Existing Cart Id.'].
	^ carts at: aCartId.! !

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/9/2022 21:20:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/9/2022 21:20:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/9/2022 21:20:24'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04 stamp: 'ldmaf 6/9/2022 21:20:24'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 21:20:56'!
test04ListingANonExistingCartIdThrowsAnError
	|clientId clientPassword service cartId fakeCartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	fakeCartId _ 999.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	service add: 3 of: '9780764548345' to: cartId.
	self should: [service listCart: fakeCartId] raise: Error withMessageText: 'Non Existing Cart Id.'! !

!methodRemoval: TusLibrosInterfaceTest #test04 stamp: 'ldmaf 6/9/2022 21:20:56'!
test04
	|clientId clientPassword service cartId fakeCartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	fakeCartId _ 999.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	service add: 3 of: '9780764548345' to: cartId.
	self should: [service listCart: fakeCartId] raise: Error withMessageText: 'Non Existing Cart Id.'!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 21:22:48'!
test05
	|clientId clientPassword service cartId fakeCartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	fakeCartId _ 666.
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	self should: [service add: 3 of: '9780764548345' to: fakeCartId.] raise: Error withMessageText: 'Non Existing Cart Id.'! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 21:23:07' prior: 50490562!
test05
	|clientId clientPassword service fakeCartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	fakeCartId _ 666.
	service _ TusLibrosFakeService with: usersDicc.
	service createCartWith: clientId and: clientPassword.
	self should: [service add: 3 of: '9780764548345' to: fakeCartId.] raise: Error withMessageText: 'Non Existing Cart Id.'! !

!testRun: #TusLibrosInterfaceTest #test05 stamp: 'ldmaf 6/9/2022 21:23:43'!
FAILURE!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/9/2022 21:24:33' prior: 50490303!
add: anAmount of: anIsbn to: aCartId
	(carts keys includes: aCartId) ifFalse: [self error: 'Non Existing Cart Id.']. 
	(carts at: aCartId) add: anAmount of: anIsbn.! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/9/2022 21:24:36' prior: 50490598!
add: anAmount of: anIsbn to: aCartId
	(carts keys includes: aCartId) ifFalse: [self error: 'Non Existing Cart Id.']. 
	(carts at: aCartId) add: anAmount of: anIsbn.! !

!testRun: #TusLibrosInterfaceTest #test05 stamp: 'ldmaf 6/9/2022 21:24:41'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 21:24:58'!
test05AddingToANonExistingCartIdThrowsAnError
	|clientId clientPassword service fakeCartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	fakeCartId _ 666.
	service _ TusLibrosFakeService with: usersDicc.
	service createCartWith: clientId and: clientPassword.
	self should: [service add: 3 of: '9780764548345' to: fakeCartId.] raise: Error withMessageText: 'Non Existing Cart Id.'! !

!methodRemoval: TusLibrosInterfaceTest #test05 stamp: 'ldmaf 6/9/2022 21:24:58'!
test05
	|clientId clientPassword service fakeCartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	fakeCartId _ 666.
	service _ TusLibrosFakeService with: usersDicc.
	service createCartWith: clientId and: clientPassword.
	self should: [service add: 3 of: '9780764548345' to: fakeCartId.] raise: Error withMessageText: 'Non Existing Cart Id.'!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 21:25:41'!
test06
	|clientId clientPassword service cartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	self should: [service add: -1 of: '9780764548345' to: cartId.] raise: Error withMessageText: 'Non Existing Cart Id.'! !

!testRun: #TusLibrosInterfaceTest #test06 stamp: 'ldmaf 6/9/2022 21:25:52'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test06 stamp: 'ldmaf 6/9/2022 21:25:52'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 21:26:08' prior: 50490651!
test06
	|clientId clientPassword service cartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	self should: [service add: -1 of: '9780764548345' to: cartId.] raise: Error withMessageText: 'Invalid Number Of Items'! !

!testRun: #TusLibrosInterfaceTest #test06 stamp: 'ldmaf 6/9/2022 21:26:10'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test06 stamp: 'ldmaf 6/9/2022 21:26:10'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 21:26:18' prior: 50490673!
test06
	|clientId clientPassword service cartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	self should: [service add: -1 of: '9780764548345' to: cartId.] raise: Error withMessageText: 'Invalid number of items'! !

!testRun: #TusLibrosInterfaceTest #test06 stamp: 'ldmaf 6/9/2022 21:26:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/9/2022 21:26:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/9/2022 21:26:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/9/2022 21:26:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/9/2022 21:26:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/9/2022 21:26:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06 stamp: 'ldmaf 6/9/2022 21:26:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06 stamp: 'ldmaf 6/9/2022 21:27:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/9/2022 21:27:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/9/2022 21:27:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/9/2022 21:27:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/9/2022 21:27:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/9/2022 21:27:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06 stamp: 'ldmaf 6/9/2022 21:27:08'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/9/2022 21:27:44'!
test06AddingAnInvalidAmountOfBooksToACartThrowsAnError
	|clientId clientPassword service cartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	self should: [service add: -1 of: '9780764548345' to: cartId.] raise: Error withMessageText: 'Invalid number of items'! !

!methodRemoval: TusLibrosInterfaceTest #test06 stamp: 'ldmaf 6/9/2022 21:27:44'!
test06
	|clientId clientPassword service cartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	self should: [service add: -1 of: '9780764548345' to: cartId.] raise: Error withMessageText: 'Invalid number of items'!

----QUIT----(9 June 2022 21:29:36) CuisUniversity-5096.image priorSource: 4872767!

----STARTUP---- (12 June 2022 16:03:49) as /home/lisandro/Documents/Facultad/ING1/linux64/CuisUniversity-5096.image!


!classRemoval: #FakeMerchantProccesor stamp: 'ldmaf 6/12/2022 16:03:54'!
Object subclass: #FakeMerchantProccesor
	instanceVariableNames: 'code stolenCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'ldmaf 6/12/2022 16:03:55'!
Object subclass: #Cashier
	instanceVariableNames: 'catalogue products totalPurchase salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'ldmaf 6/12/2022 16:03:55'!
Object subclass: #Cart
	instanceVariableNames: 'items catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Card stamp: 'ldmaf 6/12/2022 16:03:55'!
Object subclass: #Card
	instanceVariableNames: 'owner goodThru number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProccesorTest stamp: 'ldmaf 6/12/2022 16:03:55'!
TestCase subclass: #MerchantProccesorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CheckoutTest stamp: 'ldmaf 6/12/2022 16:03:56'!
TestCase subclass: #CheckoutTest
	instanceVariableNames: 'aProduct'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'ldmaf 6/12/2022 16:03:56'!
TestCase subclass: #CartTest
	instanceVariableNames: 'aProduct'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CardTest stamp: 'ldmaf 6/12/2022 16:03:56'!
TestCase subclass: #CardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/lisandro/Documents/Facultad/ING1/linux64/TusLibros.st----!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/12/2022 16:27:11'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/12/2022 16:27:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/12/2022 16:27:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/12/2022 16:27:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 16:27:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 16:27:16'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/12/2022 16:27:16'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 16:27:50'!
test06AddingAnInvalidANonExistingBookToACartThrowsAnError
	|clientId clientPassword service cartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	self should: [service add: -1 of: '9780764548345' to: cartId.] raise: Error withMessageText: 'Invalid number of items'! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 16:28:02'!
test07AddingAnInvalidANonExistingBookToACartThrowsAnError
	|clientId clientPassword service cartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	self should: [service add: -1 of: '9780764548345' to: cartId.] raise: Error withMessageText: 'Invalid number of items'! !

!methodRemoval: TusLibrosInterfaceTest #test06AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/12/2022 16:28:02'!
test06AddingAnInvalidANonExistingBookToACartThrowsAnError
	|clientId clientPassword service cartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	self should: [service add: -1 of: '9780764548345' to: cartId.] raise: Error withMessageText: 'Invalid number of items'!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 16:28:47' prior: 50491632!
test07AddingAnInvalidANonExistingBookToACartThrowsAnError
	|clientId clientPassword service cartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	self should: [service add: -1 of: '123' to: cartId.] raise: Error withMessageText: ''! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 16:30:46' prior: 50491668!
test07AddingAnInvalidANonExistingBookToACartThrowsAnError
	|clientId clientPassword service cartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	self should: [service add: -1 of: '123' to: cartId.] raise: Error withMessageText: 'Book not in catalogue'! !

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/12/2022 16:30:48'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 16:30:55' prior: 50491685!
test07AddingAnInvalidANonExistingBookToACartThrowsAnError
	|clientId clientPassword service cartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	self should: [service add: 2 of: '123' to: cartId.] raise: Error withMessageText: 'Book not in catalogue'! !

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/12/2022 16:30:57'!
FAILURE!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 16:31:35' prior: 50491541!
add: anAmount of: anIsbn to: aCartId
	(carts keys includes: aCartId) ifFalse: [self error: 'Non Existing Cart Id.']. 
	(carts keys includes: aCartId) ifFalse: [self error: 'Book not in catalogue.']. 
	(carts at: aCartId) add: anAmount of: anIsbn.! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 16:31:56' prior: 50491728!
add: anAmount of: anIsbn to: aCartId
	(carts keys includes: aCartId) ifFalse: [self error: 'Non Existing Cart Id.']. 
	(tusLibrosCatalogue includes: anIsbn) ifFalse: [self error: 'Book not in catalogue.']. 
	(carts at: aCartId) add: anAmount of: anIsbn.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 16:32:02' prior: 50491707!
test07AddingAnInvalidANonExistingBookToACartThrowsAnError
	|clientId clientPassword service cartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	self should: [service add: 2 of: '123' to: cartId.] raise: Error withMessageText: 'Book not in catalogue.'! !

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/12/2022 16:32:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/12/2022 16:32:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/12/2022 16:32:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/12/2022 16:32:03'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 16:32:03'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 16:32:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/12/2022 16:32:03'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/12/2022 16:32:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/12/2022 16:32:23'!
ERROR!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 16:33:00' prior: 50491739!
add: anAmount of: anIsbn to: aCartId
	(carts keys includes: aCartId) ifFalse: [self error: 'Non Existing Cart Id.']. 
	(tusLibrosCatalogue keys includes: anIsbn) ifFalse: [self error: 'Book not in catalogue.']. 
	(carts at: aCartId) add: anAmount of: anIsbn.! !

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/12/2022 16:33:04'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 16:35:11'!
test08ListingCartReturnsAllBooksInside
	|clientId clientPassword service cartId |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	service add: 3 of: '9780764548345' to: cartId.
	self assert: ((service listCart: cartId))! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 16:43:19' prior: 50491562!
listCart: aCartId 
	| listOfBooks |
	(carts keys includes: aCartId) ifFalse: [self error: 'Non Existing Cart Id.'].
	listOfBooks _ Dictionary new.
	(carts at: aCartId) items do: [:aBook | listOfBooks add: aBook].
	! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 16:44:41' prior: 50491839!
listCart: aCartId 
	| listOfBooks items |
	(carts keys includes: aCartId) ifFalse: [self error: 'Non Existing Cart Id.'].
	listOfBooks _ Dictionary new.
	items _ 	(carts at: aCartId) items.
	items do: [:aBook | listOfBooks add: aBook->(items occurrencesOf: aBook)].
	^listOfBooks .
	! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 16:44:43' prior: 50491849!
listCart: aCartId 
	| listOfBooks items |
	(carts keys includes: aCartId) ifFalse: [self error: 'Non Existing Cart Id.'].
	listOfBooks _ Dictionary new.
	items _ 	(carts at: aCartId) items.
	items do: [:aBook | listOfBooks add: aBook->(items occurrencesOf: aBook)].
	^listOfBooks.
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 16:45:03' prior: 50491144!
test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt
	|clientId clientPassword service cartId |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	service add: 3 of: '9780764548345' to: cartId.
	self assert: (((service listCart: cartId) at: '9780764548345') = 3).! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 16:49:15' prior: 50491823!
test08ListingCartReturnsAllBooksInside
	| clientId clientPassword service cartId listOfBooks |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	service add: 3 of: '9780764548345' to: cartId.
	service add: 12 of: '9789871497522' to: cartId.
	service add: 7 of: '9788495070524' to: cartId.
	listOfBooks _ service listCart: cartId.
	self assert: (listOfBooks at: '9780764548345' = 3).
	self assert: (listOfBooks at: '9789871497522' = 12).
	self assert: (listOfBooks at: '9788495070524' = 7).! !

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/12/2022 16:49:17'!
ERROR!
!TusLibrosFakeService methodsFor: 'init' stamp: 'ldmaf 6/12/2022 16:51:19' prior: 50491533!
initializeWith: aDictionary 
	users _ aDictionary.
	carts _ Dictionary new.
	tusLibrosCatalogue _ Dictionary new.
	tusLibrosCatalogue add: ('9780764548345'->100).
	tusLibrosCatalogue add: ('9788495070524' -> 73).
	tusLibrosCatalogue add: ('9780764548345' -> 12).
	tusLibrosCatalogue add: ('9789871497522' -> 59). ! !

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/12/2022 16:53:04'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/12/2022 16:53:04'!
ERROR!
!Cart methodsFor: 'total' stamp: 'ldmaf 6/12/2022 16:53:39'!
items
	^ items copy.! !

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/12/2022 16:54:16'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/12/2022 16:54:41'!
ERROR!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 16:55:04' prior: 50491893!
test08ListingCartReturnsAllBooksInside
	| clientId clientPassword service cartId listOfBooks |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	service add: 3 of: '9780764548345' to: cartId.
	service add: 12 of: '9789871497522' to: cartId.
	service add: 7 of: '9788495070524' to: cartId.
	listOfBooks _ service listCart: cartId.
	self assert: (listOfBooks at: '9780764548345' = 3).
	self assert: (listOfBooks at: '9789871497522' = 12).
	self assert: (listOfBooks at: '9788495070524' = 7).! !

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/12/2022 16:55:04'!
ERROR!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 16:56:01' prior: 50491953!
test08ListingCartReturnsAllBooksInside
	| clientId clientPassword service cartId listOfBooks |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	service add: 3 of: '9780764548345' to: cartId.
	service add: 12 of: '9789871497522' to: cartId.
	service add: 7 of: '9788495070524' to: cartId.
	listOfBooks _ service listCart: cartId.
	self assert: ((listOfBooks at: '9780764548345') = 3).
	self assert: ((listOfBooks at: '9789871497522') = 12).
	self assert: ((listOfBooks at: '9788495070524') = 7).! !

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/12/2022 16:56:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/12/2022 16:56:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/12/2022 16:56:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/12/2022 16:56:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 16:56:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 16:56:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/12/2022 16:56:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/12/2022 16:56:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/12/2022 16:56:03'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/12/2022 16:56:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/12/2022 16:56:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/12/2022 16:56:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 16:56:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 16:56:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/12/2022 16:56:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/12/2022 16:56:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/12/2022 16:56:18'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ldmaf 6/12/2022 16:56:21'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ldmaf 6/12/2022 16:56:21'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ldmaf 6/12/2022 16:56:21'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ldmaf 6/12/2022 16:56:21'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ldmaf 6/12/2022 16:56:21'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ldmaf 6/12/2022 16:56:21'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ldmaf 6/12/2022 16:56:21'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ldmaf 6/12/2022 16:56:21'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ldmaf 6/12/2022 16:56:21'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ldmaf 6/12/2022 16:56:21'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ldmaf 6/12/2022 16:56:21'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ldmaf 6/12/2022 16:56:21'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ldmaf 6/12/2022 16:56:21'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ldmaf 6/12/2022 16:56:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/12/2022 16:56:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/12/2022 16:56:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/12/2022 16:56:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 16:56:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 16:56:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/12/2022 16:56:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/12/2022 16:56:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/12/2022 16:56:21'!
PASSED!

Date time!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 17:00:50' prior: 50491751!
test07AddingAnInvalidANonExistingBookToACartThrowsAnError
	|clientId clientPassword service cartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	self should: [service add: 2 of: '123' to: cartId.] raise: Error withMessageText: 'Item is not in catalog'! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 17:01:03' prior: 50491807!
add: anAmount of: anIsbn to: aCartId
	(carts keys includes: aCartId) ifFalse: [self error: 'Non Existing Cart Id.']. 
	(carts at: aCartId) add: anAmount of: anIsbn.! !

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/12/2022 17:01:07'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 17:13:33'!
test09CartShouldExistForThirtyMinutes
	| clientId clientPassword service cartId listOfBooks |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	service add: 3 of: '9780764548345' to: cartId.
	service add: 12 of: '9789871497522' to: cartId.
	service add: 7 of: '9788495070524' to: cartId.
	listOfBooks _ service listCart: cartId.
	self assert: ((listOfBooks at: '9780764548345') = 3).
	self assert: ((listOfBooks at: '9789871497522') = 12).
	self assert: ((listOfBooks at: '9788495070524') = 7).! !

Date dateAndTimeNow.!

Time now!

Time now -30!

Date dateAndTimeNow first !

Date dateAndTimeNow second!

Date dateAndTimeNow second minute!

Date dateAndTimeNow second minute!

Date dateAndTimeNow second minute + 30!

Date dateAndTimeNow second minute + 50!

Date dateAndTimeNow second printMinutes !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 17:21:59' prior: 50492186!
test09CartShouldExistForThirtyMinutes
	| clientId clientPassword service cartId listOfBooks creationTime |
	creationTime _ Date dateAndTimeNow.
	creationTime.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	service add: 3 of: '9780764548345' to: cartId.
	service add: 12 of: '9789871497522' to: cartId.
	service add: 7 of: '9788495070524' to: cartId.
	listOfBooks _ service listCart: cartId.
	self assert: ((listOfBooks at: '9780764548345') = 3).
	self assert: ((listOfBooks at: '9789871497522') = 12).
	self assert: ((listOfBooks at: '9788495070524') = 7).! !

hola _ Duration minutes: 1!

 0:00:01:00 !

hola!

hola _ seconds!

hola _ Duration minutes: 1.!

hola seconds!

hola _ Duration minutes: 1.!

hola seconds!

hola minutes!

hola positive!

hola negative!

ahora _ Date dateAndTimeNow.!

viejo _ ahora subtractDuration: (Duration minutes: 30).!

Date dateAndTimeNow!

ahora _ DateAndTime now.!

viejo _ ahora subtractDuration: (Duration minutes: 30).!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 17:33:16' prior: 50492220!
test09CartShouldExistForThirtyMinutes
	| clientId clientPassword service cartId listOfBooks creationTimeInThePast |
	creationTimeInThePast _ (DateAndTime now) subtractDuration: (Duration minutes: 30).
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	service add: 3 of: '9780764548345' to: cartId.
	service add: 12 of: '9789871497522' to: cartId.
	service add: 7 of: '9788495070524' to: cartId.
	listOfBooks _ service listCart: cartId.
	self assert: ((listOfBooks at: '9780764548345') = 3).
	self assert: ((listOfBooks at: '9789871497522') = 12).
	self assert: ((listOfBooks at: '9788495070524') = 7).! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 17:33:27' prior: 50492259!
test09CartShouldExistForThirtyMinutes
	| clientId clientPassword service cartId listOfBooks creationTimeInThePast |
	creationTimeInThePast _ (DateAndTime now) subtractDuration: (Duration minutes: 30).
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	service add: 3 of: '9780764548345' to: cartId.
	service add: 12 of: '9789871497522' to: cartId.
	service add: 7 of: '9788495070524' to: cartId.
	listOfBooks _ service listCart: cartId.
	self assert: ((listOfBooks at: '9780764548345') = 3).
	self assert: ((listOfBooks at: '9789871497522') = 12).
	self assert: ((listOfBooks at: '9788495070524') = 7).! !

	| IsistOfBooks creationTimeInThePast |!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 17:33:45' prior: 50492287!
test09CartShouldExistForThirtyMinutes
	| clientId clientPassword service cartId listOfBooks creationTimeInThePast |
	creationTimeInThePast _ (DateAndTime now) subtractDuration: (Duration minutes: 30).
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	service add: 3 of: '9780764548345' to: cartId.
	service add: 12 of: '9789871497522' to: cartId.
	service add: 7 of: '9788495070524' to: cartId.
	listOfBooks _ service listCart: cartId.
	self assert: ((listOfBooks at: '9780764548345') = 3).
	self assert: ((listOfBooks at: '9789871497522') = 12).
	self assert: ((listOfBooks at: '9788495070524') = 7).! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 17:36:35' prior: 50492317!
test09CartShouldExistForThirtyMinutes
	| clientId clientPassword service cartId creationTimeInThePast |
	creationTimeInThePast _ (DateAndTime now) subtractDuration: (Duration minutes: 30).
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: creationTimeInThePast.
	self should: [service add: 3 of: '9780764548345' to: cartId]  raise: Error  withMessageText: 'Cart expired.' .
! !

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/12/2022 17:38:53'!
ERROR!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 17:40:20'!
createCartWith: aClientId and: aPassword at: aDateAndTime
	(users keys includes: aClientId) ifTrue: [
			((users at: aClientId) = aPassword) ifTrue: [
					carts add: (aClientId -> (Cart acceptingItemsOf: tusLibrosCatalogue)).
					^1.
				] ifFalse: [self error: 'Invalid credentials.'] 
		] ifFalse: [self error: 'Invalid credentials.'].! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 17:43:59'!
test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts
	|clientId clientPassword service |
	usersDicc _ Dictionary new.
	clientId _ 2.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	self should: [service createCartWith: clientId and: clientPassword] raise: Error withMessageText: 'Invalid credentials.'! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 17:44:09' prior: 50492383!
test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts
	| clientId clientPassword service |
	usersDicc _ Dictionary new.
	clientId _ 2.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	self should: [service createCartWith: clientId and: clientPassword] raise: Error withMessageText: 'Invalid credentials.'! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 17:46:07' prior: 50492399!
test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts
	| clientId clientPassword clientId2 clientPassword2 service |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	clientId2 _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	self should: [service createCartWith: clientId and: clientPassword] raise: Error withMessageText: 'Invalid credentials.'! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 17:46:48' prior: 50492415!
test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts
	| clientId clientPassword clientId2 clientPassword2 service |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	clientId2 _ 1.
	clientPassword _ '12345aa'.
	clientPassword2 _ '54321bb'.
	usersDicc add: (clientId->clientPassword).
	usersDicc add: (clientId2->clientPassword2).
	service _ TusLibrosFakeService with: usersDicc.
	self should: [service createCartWith: clientId and: clientPassword] raise: Error withMessageText: 'Invalid credentials.'! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 17:47:29' prior: 50492433!
test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts
	| clientId clientPassword clientId2 clientPassword2 service |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	clientId2 _ 1.
	clientPassword _ '12345aa'.
	clientPassword2 _ '54321bb'.
	usersDicc add: (clientId->clientPassword).
	usersDicc add: (clientId2->clientPassword2).
	service _ TusLibrosFakeService with: usersDicc.
	service createCartWith: clientId and: clientPassword.
	service createCartWith: clientId2 and: clientPassword2.
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 17:48:14' prior: 50492454!
test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts
	| clientId clientPassword clientId2 clientPassword2 service cartId cartId2 |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	clientId2 _ 1.
	clientPassword _ '12345aa'.
	clientPassword2 _ '54321bb'.
	usersDicc add: (clientId->clientPassword).
	usersDicc add: (clientId2->clientPassword2).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	cartId2 _ service createCartWith: clientId2 and: clientPassword2.
	self assert: ((service listCart: cartId) isEmpty).
	self assert: ((service listCart: cartId2) isEmpty).	! !

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 17:48:15'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 17:48:35'!
ERROR!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 17:49:13' prior: 50492475!
test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts
	| clientId clientPassword clientId2 clientPassword2 service cartId cartId2 |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	clientId2 _ 2.
	clientPassword _ '12345aa'.
	clientPassword2 _ '54321bb'.
	usersDicc add: (clientId->clientPassword).
	usersDicc add: (clientId2->clientPassword2).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	cartId2 _ service createCartWith: clientId2 and: clientPassword2.
	self assert: ((service listCart: cartId) isEmpty).
	self assert: ((service listCart: cartId2) isEmpty).	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 17:49:16' prior: 50492509!
test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts
	| clientId clientPassword clientId2 clientPassword2 service cartId cartId2 |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	clientId2 _ 2.
	clientPassword2 _ '54321bb'.
	usersDicc add: (clientId->clientPassword).
	usersDicc add: (clientId2->clientPassword2).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	cartId2 _ service createCartWith: clientId2 and: clientPassword2.
	self assert: ((service listCart: cartId) isEmpty).
	self assert: ((service listCart: cartId2) isEmpty).	! !

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 17:49:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/12/2022 17:49:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 17:49:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/12/2022 17:49:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/12/2022 17:49:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 17:49:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 17:49:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/12/2022 17:49:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/12/2022 17:49:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/12/2022 17:49:21'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/12/2022 17:49:21'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/12/2022 17:49:21'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 17:50:14'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 17:50:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/12/2022 17:50:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 17:50:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/12/2022 17:50:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/12/2022 17:50:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 17:50:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 17:50:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/12/2022 17:50:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/12/2022 17:50:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/12/2022 17:50:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/12/2022 17:50:18'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/12/2022 17:50:18'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 17:50:32'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 17:52:05' prior: 50492534!
test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts
	| clientId clientPassword clientId2 clientPassword2 service cartId cartId2 |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	clientId2 _ 2.
	clientPassword2 _ '54321bb'.
	usersDicc add: (clientId->clientPassword).
	usersDicc add: (clientId2->clientPassword2).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	cartId2 _ service createCartWith: clientId2 and: clientPassword2.
	self assert: ((service listCart: cartId) isEmpty).
	self assert: ((service listCart: cartId2) isEmpty).
	self assert: ((cartId id = cartId2 id) not)	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 17:52:11' prior: 50492666!
test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts
	| clientId clientPassword clientId2 clientPassword2 service cartId cartId2 |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	clientId2 _ 2.
	clientPassword2 _ '54321bb'.
	usersDicc add: (clientId->clientPassword).
	usersDicc add: (clientId2->clientPassword2).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	cartId2 _ service createCartWith: clientId2 and: clientPassword2.
	self assert: ((service listCart: cartId) isEmpty).
	self assert: ((service listCart: cartId2) isEmpty).
! !

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 17:52:13'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 17:53:30' prior: 50492691!
test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts
	| clientId clientPassword clientId2 clientPassword2 service cartId cartId2 |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	clientId2 _ 2.
	clientPassword2 _ '54321bb'.
	usersDicc add: (clientId->clientPassword).
	usersDicc add: (clientId2->clientPassword2).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	cartId2 _ service createCartWith: clientId2 and: clientPassword2.
	self assert: ((service listCart: cartId) isEmpty).
	self assert: ((service listCart: cartId2) isEmpty).
	self assert: ((cartId id = cartId2 id) not)	
! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 17:54:57' prior: 50492719!
test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts
	| clientId clientPassword clientId2 clientPassword2 service cartId cartId2 |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	clientId2 _ 2.
	clientPassword2 _ '54321bb'.
	usersDicc add: (clientId->clientPassword).
	usersDicc add: (clientId2->clientPassword2).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	cartId2 _ service createCartWith: clientId2 and: clientPassword2.
	self assert: ((service listCart: cartId) isEmpty).
	self assert: ((service listCart: cartId2) isEmpty).
	self assert: ((cartId id = cartId2 id) not)	
! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 17:55:18' prior: 50492744!
test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts
	| clientId clientPassword clientId2 clientPassword2 service cartId cartId2 |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	clientId2 _ 2.
	clientPassword2 _ '54321bb'.
	usersDicc add: (clientId->clientPassword).
	usersDicc add: (clientId2->clientPassword2).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword.
	cartId2 _ service createCartWith: clientId2 and: clientPassword2.
	self assert: ((service listCart: cartId) isEmpty).
	self assert: ((service listCart: cartId2) isEmpty).
	self assert: ((cartId = cartId2) not)	
! !

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 17:55:18'!
FAILURE!

Random next!

Random nextInteger:0!

Random new!

Random new nextInteger:0!

Random new nextInteger: 1500!

DateAndTime now asString !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 17:59:38' prior: 50491549!
createCartWith: aClientId and: aPassword
	(users keys includes: aClientId) ifTrue: [
			((users at: aClientId) = aPassword) ifTrue: [
					carts add: (aClientId -> (Cart acceptingItemsOf: tusLibrosCatalogue)).
					^(DateAndTime now asString).
				] ifFalse: [self error: 'Invalid credentials.'] 
		] ifFalse: [self error: 'Invalid credentials.'].! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 18:00:21' prior: 50492803!
createCartWith: aClientId and: aPassword
	|id|
	(users keys includes: aClientId) ifTrue: [
			((users at: aClientId) = aPassword) ifTrue: [
					id _ (DateAndTime now asString).
					carts add: (id -> (Cart acceptingItemsOf: tusLibrosCatalogue)).
					^id.
				] ifFalse: [self error: 'Invalid credentials.'] 
		] ifFalse: [self error: 'Invalid credentials.'].! !

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 18:00:25'!
PASSED!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 18:00:37' prior: 50492369!
createCartWith: aClientId and: aPassword at: aDateAndTime
	(users keys includes: aClientId) ifTrue: [
			((users at: aClientId) = aPassword) ifTrue: [ | id |
					id _ (DateAndTime now asString).
					carts add: (id -> (Cart acceptingItemsOf: tusLibrosCatalogue)).
					^id.
				] ifFalse: [self error: 'Invalid credentials.'] 
		] ifFalse: [self error: 'Invalid credentials.'].! !

Object subclass: #TusLibrosFakeService
	instanceVariableNames: 'dictionary users carts tusLibrosCatalogue cartsTimestamps'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosFakeService category: 'TusLibros' stamp: 'ldmaf 6/12/2022 18:47:40'!
Object subclass: #TusLibrosFakeService
	instanceVariableNames: 'dictionary users carts tusLibrosCatalogue cartsTimestamps'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFakeService methodsFor: 'init' stamp: 'ldmaf 6/12/2022 18:47:56' prior: 50491921!
initializeWith: aDictionary 
	users _ aDictionary.
	carts _ Dictionary new.
	tusLibrosCatalogue _ Dictionary new. 
	tusLibrosCatalogue add: ('9780764548345'->100).
	tusLibrosCatalogue add: ('9788495070524' -> 73).
	tusLibrosCatalogue add: ('9780764548345' -> 12).
	tusLibrosCatalogue add: ('9789871497522' -> 59). ! !

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/12/2022 18:47:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 18:47:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/12/2022 18:47:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/12/2022 18:47:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 18:47:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 18:47:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/12/2022 18:47:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/12/2022 18:47:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/12/2022 18:47:59'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/12/2022 18:47:59'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/12/2022 18:47:59'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/12/2022 18:48:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 18:48:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/12/2022 18:48:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/12/2022 18:48:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 18:48:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 18:48:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/12/2022 18:48:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/12/2022 18:48:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/12/2022 18:48:06'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/12/2022 18:48:06'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/12/2022 18:48:06'!
FAILURE!
!TusLibrosFakeService methodsFor: 'init' stamp: 'ldmaf 6/12/2022 18:48:32' prior: 50492867!
initializeWith: aDictionary 
	users _ aDictionary.
	carts _ Dictionary new.
	tusLibrosCatalogue _ Dictionary new.
	cartsTimestamps _ Dictionary new.
	tusLibrosCatalogue add: ('9780764548345'->100).
	tusLibrosCatalogue add: ('9788495070524' -> 73).
	tusLibrosCatalogue add: ('9780764548345' -> 12).
	tusLibrosCatalogue add: ('9789871497522' -> 59). ! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 18:49:40' prior: 50492837!
createCartWith: aClientId and: aPassword at: aDateAndTime
	(users keys includes: aClientId) ifTrue: [
			((users at: aClientId) = aPassword) ifTrue: [ | id |
					id _ (DateAndTime now asString).
					carts add: (id -> (Cart acceptingItemsOf: tusLibrosCatalogue)).
					cartsTimestamps add: (id -> aDateAndTime).
					^id.
				] ifFalse: [self error: 'Invalid credentials.'] 
		] ifFalse: [self error: 'Invalid credentials.'].! !

(DateAndTime now subtractDuration: (Duration minutes: 30)) - (DateAndTime now) !

(DateAndTime now subtractDuration: (Duration minutes: 30)) - (DateAndTime now)!

(DateAndTime now subtractDuration: (Duration minutes: 30)) - (DateAndTime now) minutes!

(DateAndTime now subtractDuration: (Duration minutes: 30)) - (DateAndTime now)!

(DateAndTime now subtractDuration: (Duration minutes: 30)) - (DateAndTime now)!

a _ (DateAndTime now subtractDuration: (Duration minutes: 30)) - (DateAndTime now)!

a!

f1 _ (DateAndTime now subtractDuration: (Duration minutes: 30)).!

f2 _ DateAndTime now.!

f1!

f1!

f2!

f1 minutes!

f1 minute!

f2 minute!

(f1 - f2) minute!

(f1 subtractDateAndtime: f2)!

(f1 - f2) seconds!

(f1 - f2) second!

(f2 - f1) totalMinutes!

(f1 - f2) totalMinutes !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 18:57:45' prior: 50492173!
add: anAmount of: anIsbn to: aCartId
	(((DateAndTime now) - (cartsTimestamps at: aCartId)) totalMinutes >= 30) ifTrue: [self error: 'Cart Expired.'].
	(carts keys includes: aCartId) ifFalse: [self error: 'Non Existing Cart Id.']. 
	(carts at: aCartId) add: anAmount of: anIsbn.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 18:57:55' prior: 50492345!
test09CartShouldExistForThirtyMinutes
	| clientId clientPassword service cartId creationTimeInThePast |
	creationTimeInThePast _ (DateAndTime now) subtractDuration: (Duration minutes: 30).
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: creationTimeInThePast.
	self should: [service add: 3 of: '9780764548345' to: cartId]  raise: Error  withMessageText: 'Cart Expired.' .
! !

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/12/2022 18:57:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/12/2022 18:57:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 18:57:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/12/2022 18:57:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/12/2022 18:57:56'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 18:57:56'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 18:57:56'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/12/2022 18:57:56'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/12/2022 18:57:56'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/12/2022 18:57:56'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/12/2022 18:57:56'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 19:00:31' prior: 50491875!
test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt
	|clientId clientPassword service cartId |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 3 of: '9780764548345' to: cartId.
	self assert: (((service listCart: cartId) at: '9780764548345') = 3).! !

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/12/2022 19:00:33'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 19:00:46' prior: 50491162!
test04ListingANonExistingCartIdThrowsAnError
	|clientId clientPassword service cartId fakeCartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	fakeCartId _ 999.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 3 of: '9780764548345' to: cartId.
	self should: [service listCart: fakeCartId] raise: Error withMessageText: 'Non Existing Cart Id.'! !

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 19:00:48'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 19:00:55' prior: 50491181!
test05AddingToANonExistingCartIdThrowsAnError
	|clientId clientPassword service fakeCartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	fakeCartId _ 666.
	service _ TusLibrosFakeService with: usersDicc.
	service createCartWith: clientId and: clientPassword at: DateAndTime now.
	self should: [service add: 3 of: '9780764548345' to: fakeCartId.] raise: Error withMessageText: 'Non Existing Cart Id.'! !

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 19:00:57'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 19:00:57'!
FAILURE!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 19:01:27' prior: 50493028!
add: anAmount of: anIsbn to: aCartId
	(carts keys includes: aCartId) ifFalse: [self error: 'Non Existing Cart Id.']. 
	(((DateAndTime now) - (cartsTimestamps at: aCartId)) totalMinutes >= 30) ifTrue: [self error: 'Cart Expired.'].
	(carts at: aCartId) add: anAmount of: anIsbn.! !

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 19:01:32'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 19:02:00' prior: 50491198!
test06AddingAnInvalidAmountOfBooksToACartThrowsAnError
	|clientId clientPassword service cartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	self should: [service add: -1 of: '9780764548345' to: cartId.] raise: Error withMessageText: 'Invalid number of items'! !

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/12/2022 19:02:02'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 19:02:09' prior: 50492156!
test07AddingAnInvalidANonExistingBookToACartThrowsAnError
	|clientId clientPassword service cartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	self should: [service add: 2 of: '123' to: cartId.] raise: Error withMessageText: 'Item is not in catalog'! !

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/12/2022 19:02:10'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 19:02:21' prior: 50491981!
test08ListingCartReturnsAllBooksInside
	| clientId clientPassword service cartId listOfBooks |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 3 of: '9780764548345' to: cartId.
	service add: 12 of: '9789871497522' to: cartId.
	service add: 7 of: '9788495070524' to: cartId.
	listOfBooks _ service listCart: cartId.
	self assert: ((listOfBooks at: '9780764548345') = 3).
	self assert: ((listOfBooks at: '9789871497522') = 12).
	self assert: ((listOfBooks at: '9788495070524') = 7).! !

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/12/2022 19:02:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/12/2022 19:02:28'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/12/2022 19:02:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 19:02:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/12/2022 19:02:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/12/2022 19:02:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 19:02:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 19:02:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/12/2022 19:02:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/12/2022 19:02:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/12/2022 19:02:34'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/12/2022 19:02:34'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 19:03:14' prior: 50491114!
test01CreateCartWithValidCredentialsReturnsAnEmptyCart
	|clientId clientPassword service cartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (clientId->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ (service createCartWith: clientId and: clientPassword at: DateAndTime now). 
	self assert: ((service listCart: cartId) isEmpty).! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 19:03:28' prior: 50492769!
test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts
	| clientId clientPassword clientId2 clientPassword2 service cartId cartId2 |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	clientId2 _ 2.
	clientPassword2 _ '54321bb'.
	usersDicc add: (clientId->clientPassword).
	usersDicc add: (clientId2->clientPassword2).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	cartId2 _ service createCartWith: clientId2 and: clientPassword2 at: DateAndTime now.
	self assert: ((service listCart: cartId) isEmpty).
	self assert: ((service listCart: cartId2) isEmpty).
	self assert: ((cartId = cartId2) not)	
! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 19:03:36' prior: 50491129!
test02CreateCartWithInvalidCredentialsShouldNotCreateCart
	|clientId clientPassword service |
	usersDicc _ Dictionary new.
	clientId _ 2.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	self should: [service createCartWith: clientId and: clientPassword at: DateAndTime now] raise: Error withMessageText: 'Invalid credentials.'! !

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/12/2022 19:03:37'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/12/2022 19:03:37'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 19:03:37'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/12/2022 19:03:37'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/12/2022 19:03:37'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 19:03:37'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 19:03:37'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/12/2022 19:03:37'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/12/2022 19:03:37'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/12/2022 19:03:37'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/12/2022 19:03:37'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 19:03:37'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/12/2022 19:03:45'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 19:03:47'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 19:03:47'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/12/2022 19:03:56'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 19:03:59'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 19:03:59'!
FAILURE!

1.2!

1.2 asInteger !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 19:05:38' prior: 50492986!
createCartWith: aClientId and: aPassword at: aDateAndTime
	(users keys includes: aClientId) ifTrue: [
			((users at: aClientId) = aPassword) ifTrue: [ | id |
					id _ (Random next * 547) asInteger.
					carts add: (id -> (Cart acceptingItemsOf: tusLibrosCatalogue)).
					cartsTimestamps add: (id -> aDateAndTime).
					^id.
				] ifFalse: [self error: 'Invalid credentials.'] 
		] ifFalse: [self error: 'Invalid credentials.'].! !

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/12/2022 19:05:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 19:05:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/12/2022 19:05:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/12/2022 19:05:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 19:05:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 19:05:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/12/2022 19:05:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/12/2022 19:05:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/12/2022 19:05:43'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/12/2022 19:05:43'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 19:09:50'!
test10xxx
	| clientId clientPassword service cartId creationTimeInThePast |
	creationTimeInThePast _ (DateAndTime now) subtractDuration: (Duration minutes: 30).
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: creationTimeInThePast.
	self assert: false.
! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 19:13:32' prior: 50493512!
test10xxx
	| clientId clientPassword service cartId creationTimeInThePast |
	creationTimeInThePast _ (DateAndTime now) subtractDuration: (Duration minutes: 30).
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: creationTimeInThePast.
	self assert: false.
! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 19:26:35' prior: 50493529!
test10xxx
	| clientId clientPassword service cartId creationTimeInThePast ccn cced cco ticket|
	creationTimeInThePast _ (DateAndTime now) subtractDuration: (Duration minutes: 30). 
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: creationTimeInThePast.
	service add: 10 of: '9780764548345' to: cartId.
	ticket _ service checkoutOf: cartId with: ccn expiring: cced of: cco.
	self assert: (service transactionAmountOf: (ticket id)) = (ticket amount).
	self assert: ((service hasCart: cartId) not).
	self assert: ((ticket quantityOf: '9780764548345') = 10).
! !
!CreditCard class methodsFor: 'instance creation' stamp: 'ldmaf 6/12/2022 19:36:30'!
expiringOn: aMonth withNumber: aCreditCardNumber andOwner: anOwner 
 	
	^self new initializeExpiringOn: aMonth withNumber: aCreditCardNumber andOwner: anOwner.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'ldmaf 6/12/2022 19:37:20'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'ldmaf 6/12/2022 19:37:21'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'ldmaf 6/12/2022 19:37:19'!
initializeExpiringOn: aMonth withNumber: aCreditCardNumber andOwner: anOwner
	
	expiration := aMonth.
	number := aCreditCardNumber.
	owner := anOwner.! !

!classDefinition: #TusLibrosInterfaceTest category: 'TusLibros' stamp: 'ldmaf 6/12/2022 19:39:40'!
TestCase subclass: #TusLibrosInterfaceTest
	instanceVariableNames: 'usersDicc today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 19:39:35' prior: 50493546!
test10xxx
	| clientId clientPassword service cartId creationTimeInThePast ccn cced cco ticket creditCard|
	creationTimeInThePast _ (DateAndTime now) subtractDuration: (Duration minutes: 30). 
	creditCard _ CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber + 1) withNumber: 1234123412341234 andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: creationTimeInThePast.
	service add: 10 of: '9780764548345' to: cartId.
	ticket _ service checkoutOf: cartId with: ccn expiring: cced of: cco.
	self assert: (service transactionAmountOf: (ticket id)) = (ticket amount).
	self assert: ((service hasCart: cartId) not).
	self assert: ((ticket quantityOf: '9780764548345') = 10).
! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 19:41:31' prior: 50493612!
test10xxx
	| clientId clientPassword service cartId creationTimeInThePast ticket creditCard|
	creationTimeInThePast _ (DateAndTime now) subtractDuration: (Duration minutes: 30). 
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: creationTimeInThePast.
	service add: 10 of: '9780764548345' to: cartId.
	ticket _ service checkoutOf: cartId with: (creditCard number) expiring: (creditCard expirationDate) of: (creditCard owner).
	self assert: (service transactionAmountOf: (ticket id)) = (ticket amount).
	self assert: ((service hasCart: cartId) not).
	self assert: ((ticket quantityOf: '9780764548345') = 10).
! !

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 19:41:39'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 19:41:39'!
ERROR!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 19:42:23' prior: 50493644!
test10xxx
	| clientId clientPassword service cartIdticket creditCard cartId ticket|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	ticket _ service checkoutOf: cartId with: (creditCard number) expiring: (creditCard expirationDate) of: (creditCard owner).
	self assert: (service transactionAmountOf: (ticket id)) = (ticket amount).
	self assert: ((service hasCart: cartId) not).
	self assert: ((ticket quantityOf: '9780764548345') = 10).
! !

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 19:42:40'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 19:42:40'!
ERROR!
!CreditCard methodsFor: 'accessing' stamp: 'ldmaf 6/12/2022 19:42:51'!
number
	self shouldBeImplemented.
	^number! !
!CreditCard methodsFor: 'accessing' stamp: 'ldmaf 6/12/2022 19:42:56' prior: 50493720!
number
	^number! !

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 19:42:57'!
ERROR!
!CreditCard methodsFor: 'accessing' stamp: 'ldmaf 6/12/2022 19:43:01'!
expirationDate
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'accessing' stamp: 'ldmaf 6/12/2022 19:43:10' prior: 50493731!
expirationDate
	^expiration.! !

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 19:43:11'!
ERROR!
!CreditCard methodsFor: 'accessing' stamp: 'ldmaf 6/12/2022 19:43:15'!
owner
	self shouldBeImplemented.
	^owner! !
!CreditCard methodsFor: 'accessing' stamp: 'ldmaf 6/12/2022 19:43:18' prior: 50493742!
owner
	^owner! !

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 19:43:19'!
ERROR!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 19:43:23'!
checkoutOf: aSmallInteger with: aSmallInteger2 expiring: aMonth of: aString 
	self shouldBeImplemented.! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 19:44:01' prior: 50493753!
checkoutOf: aCartId with: aCreditCardNumber expiring: aMonth of: anOwner 
	self shouldBeImplemented.! !

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 19:44:02'!
ERROR!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 19:54:56' prior: 50493760!
checkoutOf: aCartId with: aCreditCardNumber expiring: aMonth of: anOwner 
	
	"total _ Cashier toCheckout: (carts at: aCartId) charging:  throught:  on:  registeringOn: "! !

!classDefinition: #TusLibrosInterfaceTest category: 'TusLibros' stamp: 'ldmaf 6/12/2022 19:56:44'!
TestCase subclass: #TusLibrosInterfaceTest
	instanceVariableNames: 'usersDicc today debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 19:56:43'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !
!TusLibrosInterfaceTest methodsFor: 'nil' stamp: 'ldmaf 6/12/2022 19:57:11' overrides: 16920235!
initialize
	debitBehavior := [ :anAmount :aCreditCard | ]! !

Object subclass: #TusLibrosFakeService
	instanceVariableNames: 'dictionary users carts tusLibrosCatalogue cartsTimestamps debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosFakeService category: 'TusLibros' stamp: 'ldmaf 6/12/2022 19:57:56'!
Object subclass: #TusLibrosFakeService
	instanceVariableNames: 'dictionary users carts tusLibrosCatalogue cartsTimestamps debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFakeService methodsFor: 'nil' stamp: 'ldmaf 6/12/2022 19:58:09'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !
!TusLibrosFakeService methodsFor: 'init' stamp: 'ldmaf 6/12/2022 19:58:20' prior: 50492971!
initializeWith: aDictionary 
	users _ aDictionary.
	carts _ Dictionary new.
	tusLibrosCatalogue _ Dictionary new.
	cartsTimestamps _ Dictionary new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	tusLibrosCatalogue add: ('9780764548345'->100).
	tusLibrosCatalogue add: ('9788495070524' -> 73).
	tusLibrosCatalogue add: ('9780764548345' -> 12).
	tusLibrosCatalogue add: ('9789871497522' -> 59). ! !

!methodRemoval: TusLibrosInterfaceTest #debit:from: stamp: 'ldmaf 6/12/2022 19:58:30'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard !

!methodRemoval: TusLibrosInterfaceTest #initialize stamp: 'ldmaf 6/12/2022 19:58:33'!
initialize
	debitBehavior := [ :anAmount :aCreditCard | ]!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 19:59:33'!
checkoutOf: aCartId with: aCreditCard
	|total cashier|
	cashier _ Cashier toCheckout: (carts at: aCartId) charging: aCreditCard throught: self on: self registeringOn: self. ! !

!methodRemoval: TusLibrosFakeService #checkoutOf:with:expiring:of: stamp: 'ldmaf 6/12/2022 20:00:00'!
checkoutOf: aCartId with: aCreditCardNumber expiring: aMonth of: anOwner 
	
	"total _ Cashier toCheckout: (carts at: aCartId) charging:  throught:  on:  registeringOn: "!

!classDefinition: #TusLibrosFakeService category: 'TusLibros' stamp: 'ldmaf 6/12/2022 20:00:27'!
Object subclass: #TusLibrosFakeService
	instanceVariableNames: 'dictionary users carts tusLibrosCatalogue cartsTimestamps debitBehavior salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 20:00:26' prior: 50493846!
checkoutOf: aCartId with: aCreditCard
	|total cashier|
	cashier _ Cashier toCheckout: (carts at: aCartId) charging: aCreditCard throught: self on: (DateAndTime now) registeringOn: salesBook. ! !

!classDefinition: #Ticket category: 'TusLibros' stamp: 'ldmaf 6/12/2022 20:02:32'!
Object subclass: #Ticket
	instanceVariableNames: 'transactionId items total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 20:02:16' prior: 50493873!
checkoutOf: aCartId with: aCreditCard
	|total cashier|
	cashier _ Cashier toCheckout: (carts at: aCartId) charging: aCreditCard throught: self on: (DateAndTime now) registeringOn: salesBook.
	total _ cashier checkOut.
	^Ticket of: total with: ((carts at: aCartId) items).! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 20:03:12' prior: 50493890!
checkoutOf: aCartId with: aCreditCard
	|total cashier|
	cashier _ Cashier toCheckout: (carts at: aCartId) charging: aCreditCard throught: self on: (DateAndTime now) registeringOn: salesBook.
	total _ cashier checkOut.
	^(Ticket of: total with: ((carts at: aCartId) items)).! !
!Ticket class methodsFor: 'no messages' stamp: 'ldmaf 6/12/2022 20:04:03'!
of: anAmount with: aCollectionOfBooks
	^ self new initializeWith: anAmount and: aCollectionOfBooks.! !
!Ticket methodsFor: 'nil' stamp: 'ldmaf 6/12/2022 20:04:52'!
initializeWith: anAmount and: aCollectionOfBooks.
	total _ anAmount.
	items _ aCollectionOfBooks.
	transactionId _ 1.! !
!Ticket methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 20:05:03' prior: 50493919!
initializeWith: anAmount and: aCollectionOfBooks.
	total _ anAmount.
	items _ aCollectionOfBooks.
	transactionId _ 1. "TODO : CAMBIAR".! !

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 20:05:12'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 20:05:12'!
ERROR!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 20:05:27' prior: 50493684!
test10xxx
	| clientId clientPassword service cartIdticket creditCard cartId ticket|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	ticket _ service checkoutOf: cartId with: creditCard.
	self assert: (service transactionAmountOf: (ticket id)) = (ticket amount).
	self assert: ((service hasCart: cartId) not).
	self assert: ((ticket quantityOf: '9780764548345') = 10).
! !

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 20:05:36'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 20:05:36'!
ERROR!
!TusLibrosFakeService methodsFor: 'init' stamp: 'ldmaf 6/12/2022 20:06:35' prior: 50493820!
initializeWith: aDictionary 
	users _ aDictionary.
	carts _ Dictionary new.
	tusLibrosCatalogue _ Dictionary new.
	cartsTimestamps _ Dictionary new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	salesBook _ OrderedCollection new.
	tusLibrosCatalogue add: ('9780764548345'->100).
	tusLibrosCatalogue add: ('9788495070524' -> 73).
	tusLibrosCatalogue add: ('9780764548345' -> 12).
	tusLibrosCatalogue add: ('9789871497522' -> 59). ! !

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 20:07:08'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 20:07:08'!
ERROR!
!Ticket methodsFor: 'accessing' stamp: 'ldmaf 6/12/2022 20:07:16'!
id
	self shouldBeImplemented.! !
!Ticket methodsFor: 'accessing' stamp: 'ldmaf 6/12/2022 20:07:30' prior: 50493996!
id
	^transactionId! !

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 20:07:31'!
ERROR!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 20:07:41'!
transactionAmountOf: aSmallInteger 
	self shouldBeImplemented.! !
!Sale class methodsFor: 'instance creation' stamp: 'ldmaf 6/12/2022 20:11:12'!
of: aTotal with: aCollectionOfItems

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal with: aCollectionOfItems.! !

!classDefinition: #Sale category: 'TusLibros' stamp: 'ldmaf 6/12/2022 20:11:43'!
Object subclass: #Sale
	instanceVariableNames: 'total purchasedItems'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'ldmaf 6/12/2022 20:11:42'!
initializeTotal: aTotal with: aCollectionOfItems

	total := aTotal.
	purchasedItems := aCollectionOfItems.! !

!classDefinition: #Sale category: 'TusLibros' stamp: 'ldmaf 6/12/2022 20:11:52'!
Object subclass: #Sale
	instanceVariableNames: 'total purchasedItems id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'ldmaf 6/12/2022 20:11:51' prior: 50494025!
initializeTotal: aTotal with: aCollectionOfItems

	total := aTotal.
	id := 1.
	purchasedItems := aCollectionOfItems.! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 20:12:20' prior: 50493902!
checkoutOf: aCartId with: aCreditCard
	|total cashier|
	cashier _ Cashier toCheckout: (carts at: aCartId) charging: aCreditCard throught: self on: (DateAndTime now) registeringOn: salesBook.
	total _ cashier checkOut.
	^(Sale of: total with: ((carts at: aCartId) items)).! !
!Sale methodsFor: 'nil' stamp: 'ldmaf 6/12/2022 20:12:53'!
id
	^id ! !
!Sale methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 20:13:05'!
items
	^purchasedItems copy.! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 20:13:17' prior: 50493940!
test10xxx
	| clientId clientPassword service cartIdticket creditCard cartId ticket|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	ticket _ service checkoutOf: cartId with: creditCard.
	self assert: (service transactionAmountOf: (ticket id)) = (ticket).
	self assert: ((service hasCart: cartId) not).
	self assert: ((ticket quantityOf: '9780764548345') = 10).
! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 20:13:39' prior: 50494065!
test10xxx
	| clientId clientPassword service cartIdticket creditCard cartId ticket|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	ticket _ service checkoutOf: cartId with: creditCard.
	self assert: (service transactionAmountOf: (ticket id)) = (ticket total).
	self assert: ((service hasCart: cartId) not).
	self assert: ((ticket quantityOf: '9780764548345') = 10).
! !

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 20:13:59'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 20:13:59'!
ERROR!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 20:15:02' prior: 50494006!
transactionAmountOf: aSaleId 
	^ (salesBook select: [:aSale | (aSale id) = aSaleId ]) first.! !

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 20:15:08'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 20:15:08'!
ERROR!

self id!

self id!
!Cashier methodsFor: 'checkout - private' stamp: 'ldmaf 6/12/2022 20:18:15' prior: 50491313!
createSale

	^ Sale of: total with: (cart items)
! !

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 20:18:20'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 20:18:20'!
FAILURE!

 (salesBook select: [:aSale | (aSale id) = aSaleId ])!

self total!

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 20:19:55'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 20:20:12' prior: 50494094!
test10xxx
	| clientId clientPassword service cartIdticket creditCard cartId ticket|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	ticket _ service checkoutOf: cartId with: creditCard.
	self assert: ((service transactionAmountOf: (ticket id)) = (ticket total)).
	self assert: ((service hasCart: cartId) not).
	self assert: ((ticket quantityOf: '9780764548345') = 10).
! !

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 20:20:19'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 20:20:19'!
FAILURE!

	service transactionAmountOf: (ticket id)!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 20:20:54' prior: 50494128!
transactionAmountOf: aSaleId 
	^ (salesBook select: [:aSale | (aSale id) = aSaleId ]) first total.! !

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 20:20:59'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 20:20:59'!
ERROR!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 20:21:08'!
hasCart: aSmallInteger 
	self shouldBeImplemented.! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 20:21:23' prior: 50494205!
hasCart: aCartId 
	^ (carts keys includes: aCartId).! !

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 20:21:24'!
FAILURE!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 20:22:22' prior: 50494046!
checkoutOf: aCartId with: aCreditCard
	|total cashier sale|
	cashier _ Cashier toCheckout: (carts at: aCartId) charging: aCreditCard throught: self on: (DateAndTime now) registeringOn: salesBook.
	total _ cashier checkOut.
	sale _ (Sale of: total with: ((carts at: aCartId) items)).
	carts removeKey: aCartId.
	^sale.! !

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 20:22:34'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 20:22:34'!
ERROR!
!Sale methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 20:22:39'!
quantityOf: aString 
	self shouldBeImplemented.! !
!Sale methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 20:23:01' prior: 50494236!
quantityOf: anIsbn 
	^(purchasedItems occurrencesOf: anIsbn)! !

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 20:23:02'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 20:23:04'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 20:23:52'!
test10CheckoutWithAValidCreditCardCreatesACorrectSaleAndRemovesTheCartFromTheService
	| clientId clientPassword service cartIdticket creditCard cartId ticket|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	ticket _ service checkoutOf: cartId with: creditCard.
	self assert: ((service transactionAmountOf: (ticket id)) = (ticket total)).
	self assert: ((service hasCart: cartId) not).
	self assert: ((ticket quantityOf: '9780764548345') = 10).
! !

!methodRemoval: TusLibrosInterfaceTest #test10xxx stamp: 'ldmaf 6/12/2022 20:23:52'!
test10xxx
	| clientId clientPassword service cartIdticket creditCard cartId ticket|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	ticket _ service checkoutOf: cartId with: creditCard.
	self assert: ((service transactionAmountOf: (ticket id)) = (ticket total)).
	self assert: ((service hasCart: cartId) not).
	self assert: ((ticket quantityOf: '9780764548345') = 10).
!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 20:26:08'!
test11xxx
	| clientId clientPassword service creditCard cartId|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber - 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.

	self should: [service checkoutOf: cartId with: creditCard] raise: Error withMessageText: ''.
	self assert: ((service hasCart: cartId)).
! !

!testRun: #TusLibrosInterfaceTest #test11xxx stamp: 'ldmaf 6/12/2022 20:26:11'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test11xxx stamp: 'ldmaf 6/12/2022 20:26:11'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 20:26:40' prior: 50494311!
test11xxx
	| clientId clientPassword service creditCard cartId|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber - 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.

	self should: [service checkoutOf: cartId with: creditCard] raise: Error withMessageText: 'Can not charge an expired credit card'.
	self assert: ((service hasCart: cartId)).
! !

!testRun: #TusLibrosInterfaceTest #test11xxx stamp: 'ldmaf 6/12/2022 20:26:46'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 20:27:21' prior: 50494342!
test11xxx
	| clientId clientPassword service creditCard cartId|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber - 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.

	self should: [service checkoutOf: cartId with: creditCard] raise: Error withMessageText: 'Can not charge an expired credit card'.
	self assert: ((service hasCart: cartId)).
! !

!testRun: #TusLibrosInterfaceTest #test11xxx stamp: 'ldmaf 6/12/2022 20:27:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/12/2022 20:27:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 20:27:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/12/2022 20:27:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/12/2022 20:27:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 20:27:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 20:27:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/12/2022 20:27:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/12/2022 20:27:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/12/2022 20:27:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/12/2022 20:27:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CheckoutWithAValidCreditCardCreatesACorrectSaleAndRemovesTheCartFromTheService stamp: 'ldmaf 6/12/2022 20:27:22'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11xxx stamp: 'ldmaf 6/12/2022 20:27:22'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 20:29:05'!
test11CheckoutWithAnInvalidCreditCardThrowsAnExpiredCardErrorAndKeepsTheCartInTheService
	| clientId clientPassword service creditCard cartId|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber - 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.

	self should: [service checkoutOf: cartId with: creditCard] raise: Error withMessageText: 'Can not charge an expired credit card'.
	self assert: ((service hasCart: cartId)).
! !

!methodRemoval: TusLibrosInterfaceTest #test11xxx stamp: 'ldmaf 6/12/2022 20:29:05'!
test11xxx
	| clientId clientPassword service creditCard cartId|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber - 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.

	self should: [service checkoutOf: cartId with: creditCard] raise: Error withMessageText: 'Can not charge an expired credit card'.
	self assert: ((service hasCart: cartId)).
!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 20:29:48'!
test12xxx
	| clientId clientPassword service creditCard cartId|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber - 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.

	self should: [service checkoutOf: cartId with: creditCard] raise: Error withMessageText: 'Cart Expired.'.
	self assert: ((service hasCart: cartId)).
! !

!testRun: #TusLibrosInterfaceTest #test12xxx stamp: 'ldmaf 6/12/2022 20:29:50'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test12xxx stamp: 'ldmaf 6/12/2022 20:29:50'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 20:30:23' prior: 50494503!
test12xxx
	| clientId clientPassword service creditCard cartId creationTimeInThePast |
	creationTimeInThePast _ (DateAndTime now) subtractDuration: (Duration minutes: 30).  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber - 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: creationTimeInThePast.
	service add: 10 of: '9780764548345' to: cartId.

	self should: [service checkoutOf: cartId with: creditCard] raise: Error withMessageText: 'Cart Expired.'.
	self assert: ((service hasCart: cartId)).
! !

!testRun: #TusLibrosInterfaceTest #test12xxx stamp: 'ldmaf 6/12/2022 20:30:25'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12xxx stamp: 'ldmaf 6/12/2022 20:30:25'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12xxx stamp: 'ldmaf 6/12/2022 20:31:43'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12xxx stamp: 'ldmaf 6/12/2022 20:31:43'!
ERROR!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 20:31:48' prior: 50494534!
test12xxx
	| clientId clientPassword service creditCard cartId creationTimeInThePast |
	creationTimeInThePast _ (DateAndTime now) subtractDuration: (Duration minutes: 30).  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber - 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: creationTimeInThePast.

	self should: [service checkoutOf: cartId with: creditCard] raise: Error withMessageText: 'Cart Expired.'.
	self assert: ((service hasCart: cartId)).
! !

!testRun: #TusLibrosInterfaceTest #test12xxx stamp: 'ldmaf 6/12/2022 20:31:51'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test12xxx stamp: 'ldmaf 6/12/2022 20:31:51'!
FAILURE!

!methodRemoval: TusLibrosInterfaceTest #test12xxx stamp: 'ldmaf 6/12/2022 20:34:51'!
test12xxx
	| clientId clientPassword service creditCard cartId creationTimeInThePast |
	creationTimeInThePast _ (DateAndTime now) subtractDuration: (Duration minutes: 30).  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber - 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: creationTimeInThePast.

	self should: [service checkoutOf: cartId with: creditCard] raise: Error withMessageText: 'Cart Expired.'.
	self assert: ((service hasCart: cartId)).
!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 20:37:24'!
test12xxx
	| clientId clientPassword service creditCard cartId|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber - 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.

	self should: [service checkoutOf: cartId with: creditCard] raise: Error withMessageText: 'Can not charge an expired credit card'.
	self assert: ((service hasCart: cartId)).
! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 20:38:25' prior: 50494634!
test12xxx
	| clientId clientPassword service creditCard cartId|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber - 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.

	self should: [service checkoutOf: 666 with: creditCard] raise: Error withMessageText: 'Can not charge an expired credit card'.
	self assert: ((service hasCart: cartId)).
! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 20:38:33' prior: 50494218!
checkoutOf: aCartId with: aCreditCard
	|total cashier sale|
	(carts keys includes: aCartId) ifFalse: [self error: 'Non Existing Cart Id.'].
	cashier _ Cashier toCheckout: (carts at: aCartId) charging: aCreditCard throught: self on: (DateAndTime now) registeringOn: salesBook.
	total _ cashier checkOut.
	sale _ (Sale of: total with: ((carts at: aCartId) items)).
	carts removeKey: aCartId.
	^sale.! !

!testRun: #TusLibrosInterfaceTest #test12xxx stamp: 'ldmaf 6/12/2022 20:38:40'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test12xxx stamp: 'ldmaf 6/12/2022 20:38:41'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 20:38:52' prior: 50494661!
test12xxx
	| clientId clientPassword service creditCard cartId|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber - 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.

	self should: [service checkoutOf: 666 with: creditCard] raise: Error withMessageText: 'Non Existing Cart Id.'.
	self assert: ((service hasCart: cartId)).
! !

!testRun: #TusLibrosInterfaceTest #test12xxx stamp: 'ldmaf 6/12/2022 20:38:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/12/2022 20:38:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 20:38:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/12/2022 20:38:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/12/2022 20:38:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 20:38:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 20:38:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/12/2022 20:38:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/12/2022 20:38:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/12/2022 20:38:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/12/2022 20:38:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CheckoutWithAValidCreditCardCreatesACorrectSaleAndRemovesTheCartFromTheService stamp: 'ldmaf 6/12/2022 20:38:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CheckoutWithAnInvalidCreditCardThrowsAnExpiredCardErrorAndKeepsTheCartInTheService stamp: 'ldmaf 6/12/2022 20:38:53'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12xxx stamp: 'ldmaf 6/12/2022 20:38:53'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 20:39:04' prior: 50494709!
test12xxx
	| clientId clientPassword service creditCard cartId|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber - 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.

	self should: [service checkoutOf: 666 with: creditCard] raise: Error withMessageText: 'Non Existing Cart Id.'.
! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 20:40:10'!
test13yyy
	| clientId clientPassword service creditCard cartId|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.

	self should: [service checkoutOf: 666 with: creditCard] raise: Error withMessageText: 'Non Existing Cart Id.'.
! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 21:42:24' prior: 50494792!
test12xxx
	| clientId clientPassword service creditCard cartId|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.

	self should: [service checkoutOf: 666 with: creditCard] raise: Error withMessageText: 'Non Existing Cart Id.'.
! !

!methodRemoval: TusLibrosInterfaceTest #test13yyy stamp: 'ldmaf 6/12/2022 21:43:04'!
test13yyy
	| clientId clientPassword service creditCard cartId|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.

	self should: [service checkoutOf: 666 with: creditCard] raise: Error withMessageText: 'Non Existing Cart Id.'.
!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 21:47:23'!
test13ListPurchasesBeforeDoingAnyCheckoutReturnsAnEmptyListOfPurchases
	| clientId clientPassword service creditCard cartId |  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	
	self assert: ((service listPurchasesOf: clientId with: clientPassword) isEmpty).
! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 21:47:51' prior: 50494889!
test13ListPurchasesBeforeDoingAnyCheckoutReturnsAnEmptyListOfPurchases
	| clientId clientPassword service cartId |  
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	
	self assert: ((service listPurchasesOf: clientId with: clientPassword) isEmpty).
! !

!testRun: #TusLibrosInterfaceTest #test13ListPurchasesBeforeDoingAnyCheckoutReturnsAnEmptyListOfPurchases stamp: 'ldmaf 6/12/2022 21:47:53'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test13ListPurchasesBeforeDoingAnyCheckoutReturnsAnEmptyListOfPurchases stamp: 'ldmaf 6/12/2022 21:47:53'!
ERROR!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 21:47:57'!
listPurchasesOf: aSmallInteger with: aString 
	self shouldBeImplemented.! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 21:48:21' prior: 50494943!
listPurchasesOf: aClientId with: aClientPassword 
	^OrderedCollection new.! !

!testRun: #TusLibrosInterfaceTest #test13ListPurchasesBeforeDoingAnyCheckoutReturnsAnEmptyListOfPurchases stamp: 'ldmaf 6/12/2022 21:48:22'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 21:49:02' prior: 50494915!
test13ListPurchasesBeforeDoingAnyCheckoutReturnsAnEmptyListOfPurchases
	| clientId clientPassword service cartId creditCard|  
	
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	
	self assert: ((service listPurchasesOf: clientId with: clientPassword) isEmpty not).
! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 21:47:51' prior: 50494960!
test13ListPurchasesBeforeDoingAnyCheckoutReturnsAnEmptyListOfPurchases
	| clientId clientPassword service cartId |  
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	
	self assert: ((service listPurchasesOf: clientId with: clientPassword) isEmpty).
! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 21:49:49'!
test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase
	| clientId clientPassword service cartId creditCard|
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.  
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	
	self assert: ((service listPurchasesOf: clientId with: clientPassword) isEmpty not).
! !

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/12/2022 21:49:51'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 22:11:31' prior: 50495005!
test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase
	| clientId clientPassword service cartId creditCard|
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.  
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	service checkoutOf: cartId with: creditCard.
	self assert: ((service listPurchasesOf: clientId with: clientPassword) isEmpty not).
! !

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/12/2022 22:11:34'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/12/2022 22:11:34'!
FAILURE!

!methodRemoval: TusLibrosFakeService #createCartWith:and: stamp: 'ldmaf 6/12/2022 22:12:04'!
createCartWith: aClientId and: aPassword
	|id|
	(users keys includes: aClientId) ifTrue: [
			((users at: aClientId) = aPassword) ifTrue: [
					id _ (DateAndTime now asString).
					carts add: (id -> (Cart acceptingItemsOf: tusLibrosCatalogue)).
					^id.
				] ifFalse: [self error: 'Invalid credentials.'] 
		] ifFalse: [self error: 'Invalid credentials.'].!

Object subclass: #TusLibrosFakeService
	instanceVariableNames: 'dictionary users carts tusLibrosCatalogue cartsTimestamps debitBehavior salesBook usersActiveCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosFakeService category: 'TusLibros' stamp: 'ldmaf 6/12/2022 22:14:49'!
Object subclass: #TusLibrosFakeService
	instanceVariableNames: 'dictionary users carts tusLibrosCatalogue cartsTimestamps debitBehavior salesBook usersActiveCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'ldmaf 6/12/2022 22:54:33'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total clientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checkout - private' stamp: 'ldmaf 6/12/2022 22:54:31' prior: 50494141!
createSale

	^ Sale of: total with: (cart items) for: clientId
! !
!Cashier methodsFor: 'checkout - private' stamp: 'ldmaf 6/12/2022 22:55:10' prior: 50495111!
createSale

	^ Sale of: total with: (cart items)
! !

Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'ldmaf 6/12/2022 22:55:16'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosFakeService category: 'TusLibros' stamp: 'ldmaf 6/12/2022 22:57:33'!
Object subclass: #TusLibrosFakeService
	instanceVariableNames: 'dictionary users carts tusLibrosCatalogue cartsTimestamps debitBehavior salesBook usersActiveCarts clientsCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosFakeService category: 'TusLibros' stamp: 'ldmaf 6/12/2022 22:57:34'!
Object subclass: #TusLibrosFakeService
	instanceVariableNames: 'dictionary users carts tusLibrosCatalogue cartsTimestamps debitBehavior salesBook usersActiveCarts clientsCarts clientsPurchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFakeService methodsFor: 'init' stamp: 'ldmaf 6/12/2022 22:57:32' prior: 50493974!
initializeWith: aDictionary 
	users _ aDictionary.
	carts _ Dictionary new.
	tusLibrosCatalogue _ Dictionary new.
	cartsTimestamps _ Dictionary new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	salesBook _ OrderedCollection new.
	clientsCarts _ Dictionary new.
	clientsPurchases _ Dictionary new.
	tusLibrosCatalogue add: ('9780764548345'->100).
	tusLibrosCatalogue add: ('9788495070524' -> 73).
	tusLibrosCatalogue add: ('9780764548345' -> 12).
	tusLibrosCatalogue add: ('9789871497522' -> 59). ! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 23:01:16' prior: 50493454!
createCartWith: aClientId and: aPassword at: aDateAndTime
	(users keys includes: aClientId) ifTrue: [
			((users at: aClientId) = aPassword) ifTrue: [ | id cartsOfClient|
					id _ (Random next * 547) asInteger.
					carts add: (id -> (Cart acceptingItemsOf: tusLibrosCatalogue)).
					cartsTimestamps add: (id -> aDateAndTime).
					cartsOfClient _ clientsCarts at: aClientId ifAbsent: [clientsCarts add: aClientId->OrderedCollection new].
					cartsOfClient add: id.
					^id.
				] ifFalse: [self error: 'Invalid credentials.'] 
		] ifFalse: [self error: 'Invalid credentials.'].! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 23:13:07' prior: 50494687!
checkoutOf: aCartId with: aCreditCard
	|total cashier sale|
	(carts keys includes: aCartId) ifFalse: [self error: 'Non Existing Cart Id.'].
	cashier _ Cashier toCheckout: (carts at: aCartId) charging: aCreditCard throught: self on: (DateAndTime now) registeringOn: salesBook.
	total _ cashier checkOut.
	sale _ (Sale of: total with: ((carts at: aCartId) items)).
	carts removeKey: aCartId.
	^sale.! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 23:14:01' prior: 50495176!
createCartWith: aClientId and: aPassword at: aDateAndTime
	(users keys includes: aClientId) ifTrue: [
			((users at: aClientId) = aPassword) ifTrue: [ | id|
					id _ (Random next * 547) asInteger.
					carts add: (id -> (Cart acceptingItemsOf: tusLibrosCatalogue)).
					cartsTimestamps add: (id -> aDateAndTime).
					clientsCarts add: id -> aClientId.
					^id.
				] ifFalse: [self error: 'Invalid credentials.'] 
		] ifFalse: [self error: 'Invalid credentials.'].! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 23:16:14' prior: 50495198!
checkoutOf: aCartId with: aCreditCard
	|total cashier sale xxx|
	(carts keys includes: aCartId) ifFalse: [self error: 'Non Existing Cart Id.'].
	cashier _ Cashier toCheckout: (carts at: aCartId) charging: aCreditCard throught: self on: (DateAndTime now) registeringOn: salesBook.
	total _ cashier checkOut.
	sale _ (Sale of: total with: ((carts at: aCartId) items)).
	xxx _ (clientsCarts at: aCartId).
	(clientsPurchases at: xxx ifAbsent: [clientsPurchases add: xxx->OrderedCollection new]) add: sale.
	carts removeKey: aCartId.
	clientsCarts removeKey: aCartId.
	^sale.! !

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/12/2022 23:16:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 23:16:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/12/2022 23:16:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/12/2022 23:16:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 23:16:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 23:16:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/12/2022 23:16:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/12/2022 23:16:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/12/2022 23:16:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/12/2022 23:16:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CheckoutWithAValidCreditCardCreatesACorrectSaleAndRemovesTheCartFromTheService stamp: 'ldmaf 6/12/2022 23:16:23'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test11CheckoutWithAnInvalidCreditCardThrowsAnExpiredCardErrorAndKeepsTheCartInTheService stamp: 'ldmaf 6/12/2022 23:16:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12xxx stamp: 'ldmaf 6/12/2022 23:16:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13ListPurchasesBeforeDoingAnyCheckoutReturnsAnEmptyListOfPurchases stamp: 'ldmaf 6/12/2022 23:16:23'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/12/2022 23:16:23'!
ERROR!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 23:17:23' prior: 50494949!
listPurchasesOf: aClientId with: aClientPassword 
	^clientsPurchases at: aClientId ifAbsent: [OrderedCollection new].! !

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/12/2022 23:17:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 23:17:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/12/2022 23:17:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/12/2022 23:17:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 23:17:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 23:17:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/12/2022 23:17:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/12/2022 23:17:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/12/2022 23:17:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/12/2022 23:17:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CheckoutWithAValidCreditCardCreatesACorrectSaleAndRemovesTheCartFromTheService stamp: 'ldmaf 6/12/2022 23:17:26'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test11CheckoutWithAnInvalidCreditCardThrowsAnExpiredCardErrorAndKeepsTheCartInTheService stamp: 'ldmaf 6/12/2022 23:17:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12xxx stamp: 'ldmaf 6/12/2022 23:17:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13ListPurchasesBeforeDoingAnyCheckoutReturnsAnEmptyListOfPurchases stamp: 'ldmaf 6/12/2022 23:17:26'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/12/2022 23:17:26'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/12/2022 23:17:34'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/12/2022 23:17:34'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/12/2022 23:17:39'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/12/2022 23:17:39'!
ERROR!

	(clientsPurchases at: xxx ifAbsent: [clientsPurchases add: xxx->OrderedCollection new])!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 23:18:34' prior: 50495232!
checkoutOf: aCartId with: aCreditCard
	|total cashier sale xxx purchases|
	(carts keys includes: aCartId) ifFalse: [self error: 'Non Existing Cart Id.'].
	cashier _ Cashier toCheckout: (carts at: aCartId) charging: aCreditCard throught: self on: (DateAndTime now) registeringOn: salesBook.
	total _ cashier checkOut.
	sale _ (Sale of: total with: ((carts at: aCartId) items)).
	xxx _ (clientsCarts at: aCartId).
	purchases _ (clientsPurchases at: xxx ifAbsent: [clientsPurchases add: xxx->OrderedCollection new]).
	purchases add: sale.
	carts removeKey: aCartId.
	clientsCarts removeKey: aCartId.
	^sale.! !

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/12/2022 23:18:35'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/12/2022 23:18:37'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/12/2022 23:18:37'!
ERROR!

b _ Dictionary new.!

b add: 1->3.!

b at: 1 ifAbsent: [5]!

b at: 2 ifAbsent: [5]!

b add: 1->OrderedCollection new.!

b add: 1->OrderedCollection new.!

b at: 1!

b at: 1!

b at: 2 ifAbsent: [5->1]!

b at: 2 ifAbsent: [5->1]!

 5 -> 1 !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 23:24:02' prior: 50495409!
checkoutOf: aCartId with: aCreditCard
	|total cashier sale xxx purchases|
	(carts keys includes: aCartId) ifFalse: [self error: 'Non Existing Cart Id.'].
	cashier _ Cashier toCheckout: (carts at: aCartId) charging: aCreditCard throught: self on: (DateAndTime now) registeringOn: salesBook.
	total _ cashier checkOut.
	sale _ (Sale of: total with: ((carts at: aCartId) items)).
	xxx _ (clientsCarts at: aCartId).
	purchases _ (clientsPurchases at: xxx ifAbsent: [(clientsPurchases add: xxx->OrderedCollection new) value]).
	purchases add: sale.
	carts removeKey: aCartId.
	clientsCarts removeKey: aCartId.
	^sale.! !

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/12/2022 23:24:05'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/12/2022 23:24:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 23:24:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/12/2022 23:24:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/12/2022 23:24:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 23:24:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 23:24:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/12/2022 23:24:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/12/2022 23:24:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/12/2022 23:24:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/12/2022 23:24:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CheckoutWithAValidCreditCardCreatesACorrectSaleAndRemovesTheCartFromTheService stamp: 'ldmaf 6/12/2022 23:24:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CheckoutWithAnInvalidCreditCardThrowsAnExpiredCardErrorAndKeepsTheCartInTheService stamp: 'ldmaf 6/12/2022 23:24:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12xxx stamp: 'ldmaf 6/12/2022 23:24:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13ListPurchasesBeforeDoingAnyCheckoutReturnsAnEmptyListOfPurchases stamp: 'ldmaf 6/12/2022 23:24:08'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/12/2022 23:24:08'!
PASSED!

----SNAPSHOT----(12 June 2022 23:32:29) CuisUniversity-5096.image priorSource: 4988082!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 23:33:55' prior: 50495035!
test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase
	| clientId clientPassword service cartId creditCard purchases|
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.  
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	service checkoutOf: cartId with: creditCard.
	purchases _ service listPurchasesOf: clientId with: clientPassword.
	self assert: (purchases isEmpty not).
	self assert: ((purchases occurrencesOf: '9780764548345') = 10).
! !

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/12/2022 23:33:56'!
FAILURE!

	purchases!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 23:34:36' prior: 50495547!
test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase
	| clientId clientPassword service cartId creditCard purchases|
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.  
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	service checkoutOf: cartId with: creditCard.
	purchases _ service listPurchasesOf: clientId with: clientPassword.
	self assert: (purchases isEmpty not).
	self assert: ((purchases first quantityOf: '9780764548345') = 10).
! !

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/12/2022 23:34:38'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 23:35:24'!
test15ListPurchasesAfterDoingManyCheckoutsReturnsAListWithManyPurchases
	| clientId clientPassword service cartId creditCard purchases|
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.  
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	service add: 5 of: '9780764548345' to: cartId.
	service checkoutOf: cartId with: creditCard.
	purchases _ service listPurchasesOf: clientId with: clientPassword.
	self assert: (purchases isEmpty not).
	self assert: ((purchases first quantityOf: '9780764548345') = 10).
	self assert: ((purchases second quantityOf: '9780764548345') = 5).! !

!testRun: #TusLibrosInterfaceTest #test15ListPurchasesAfterDoingManyCheckoutsReturnsAListWithManyPurchases stamp: 'ldmaf 6/12/2022 23:35:26'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 23:35:48' prior: 50495616!
test15ListPurchasesAfterDoingManyCheckoutsReturnsAListWithManyPurchases
	| clientId clientPassword service cartId creditCard purchases|
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.  
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	service add: 5 of: '9789871497522' to: cartId.
	service checkoutOf: cartId with: creditCard.
	purchases _ service listPurchasesOf: clientId with: clientPassword.
	self assert: (purchases isEmpty not).
	self assert: ((purchases first quantityOf: '9780764548345') = 10).
	self assert: ((purchases second quantityOf: '9789871497522') = 5).! !

!testRun: #TusLibrosInterfaceTest #test15ListPurchasesAfterDoingManyCheckoutsReturnsAListWithManyPurchases stamp: 'ldmaf 6/12/2022 23:35:49'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test15ListPurchasesAfterDoingManyCheckoutsReturnsAListWithManyPurchases stamp: 'ldmaf 6/12/2022 23:35:57'!
ERROR!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 23:37:23' prior: 50495655!
test15ListPurchasesAfterDoingManyCheckoutsReturnsAListWithManyPurchases
	| clientId clientPassword service cartId creditCard purchases|
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.  
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	service checkoutOf: cartId with: creditCard.
	
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 5 of: '9789871497522' to: cartId.
	service checkoutOf: cartId with: creditCard.
	purchases _ service listPurchasesOf: clientId with: clientPassword.
	self assert: (purchases isEmpty not).
	self assert: ((purchases first quantityOf: '9780764548345') = 10).
	self assert: ((purchases second quantityOf: '9789871497522') = 5).! !

!testRun: #TusLibrosInterfaceTest #test15ListPurchasesAfterDoingManyCheckoutsReturnsAListWithManyPurchases stamp: 'ldmaf 6/12/2022 23:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/12/2022 23:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 23:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/12/2022 23:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/12/2022 23:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 23:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 23:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/12/2022 23:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/12/2022 23:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/12/2022 23:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/12/2022 23:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CheckoutWithAValidCreditCardCreatesACorrectSaleAndRemovesTheCartFromTheService stamp: 'ldmaf 6/12/2022 23:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CheckoutWithAnInvalidCreditCardThrowsAnExpiredCardErrorAndKeepsTheCartInTheService stamp: 'ldmaf 6/12/2022 23:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12xxx stamp: 'ldmaf 6/12/2022 23:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13ListPurchasesBeforeDoingAnyCheckoutReturnsAnEmptyListOfPurchases stamp: 'ldmaf 6/12/2022 23:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/12/2022 23:37:25'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15ListPurchasesAfterDoingManyCheckoutsReturnsAListWithManyPurchases stamp: 'ldmaf 6/12/2022 23:37:25'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 23:49:24'!
test16ListPurchasesWithAnInvalidUserThrowsAnError
	| clientId clientPassword service|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	self should: [service listPurchasesOf: 999 with: clientPassword.] raise: Error withMessageText: ''.
	! !

!testRun: #TusLibrosInterfaceTest #test16ListPurchasesWithAnInvalidUserThrowsAnError stamp: 'ldmaf 6/12/2022 23:49:29'!
FAILURE!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 23:50:48'!
validateCredentialsOf: aClientId with: aClientPassword 
	! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 23:51:41' prior: 50495827!
validateCredentialsOf: aClientId with: aClientPassword 
	^(users at: aClientId ifAbsent: [self error: '']).! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 23:51:51' prior: 50495832!
validateCredentialsOf: aClientId with: aClientPassword 
	^(users at: aClientId ifAbsent: [self error: 'Invalid Credentials.']).! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 23:52:42' prior: 50495214!
createCartWith: aClientId and: aPassword at: aDateAndTime
	self validateCredentialsOf: aClientId with: aPassword.
	(users keys includes: aClientId) ifTrue: [
			((users at: aClientId) = aPassword) ifTrue: [ | id|
					id _ (Random next * 547) asInteger.
					carts add: (id -> (Cart acceptingItemsOf: tusLibrosCatalogue)).
					cartsTimestamps add: (id -> aDateAndTime).
					clientsCarts add: id -> aClientId.
					^id.
				] ifFalse: [self error: 'Invalid credentials.'] 
		] ifFalse: [self error: 'Invalid credentials.'].! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 23:53:07' prior: 50495839!
validateCredentialsOf: aClientId with: aClientPassword 
	^((users at: aClientId ifAbsent: [self error: 'Invalid Credentials.']) = aClientPassword).! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 23:53:50' prior: 50495847!
createCartWith: aClientId and: aPassword at: aDateAndTime
	|id|
	self validateCredentialsOf: aClientId with: aPassword.
	
	id _ (Random next * 547) asInteger.
	carts add: (id -> (Cart acceptingItemsOf: tusLibrosCatalogue)).
	cartsTimestamps add: (id -> aDateAndTime).
	clientsCarts add: id -> aClientId.
	^id.! !

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/12/2022 23:53:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 23:53:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/12/2022 23:53:51'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/12/2022 23:53:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 23:53:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 23:53:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/12/2022 23:53:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/12/2022 23:53:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/12/2022 23:53:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/12/2022 23:53:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CheckoutWithAValidCreditCardCreatesACorrectSaleAndRemovesTheCartFromTheService stamp: 'ldmaf 6/12/2022 23:53:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CheckoutWithAnInvalidCreditCardThrowsAnExpiredCardErrorAndKeepsTheCartInTheService stamp: 'ldmaf 6/12/2022 23:53:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12xxx stamp: 'ldmaf 6/12/2022 23:53:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13ListPurchasesBeforeDoingAnyCheckoutReturnsAnEmptyListOfPurchases stamp: 'ldmaf 6/12/2022 23:53:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/12/2022 23:53:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15ListPurchasesAfterDoingManyCheckoutsReturnsAListWithManyPurchases stamp: 'ldmaf 6/12/2022 23:53:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListPurchasesWithAnInvalidUserThrowsAnError stamp: 'ldmaf 6/12/2022 23:53:51'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/12/2022 23:54:12'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/12/2022 23:54:12'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 23:54:19' prior: 50493360!
test02CreateCartWithInvalidCredentialsShouldNotCreateCart
	|clientId clientPassword service |
	usersDicc _ Dictionary new.
	clientId _ 2.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	self should: [service createCartWith: clientId and: clientPassword at: DateAndTime now] raise: Error withMessageText: 'Invalid Credentials.'! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 23:54:26' prior: 50495809!
test16ListPurchasesWithAnInvalidUserThrowsAnError
	| clientId clientPassword service|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	self should: [service listPurchasesOf: 999 with: clientPassword.] raise: Error withMessageText: 'Invalid Credentials.'.
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 23:54:45' prior: 50495986!
test16ListPurchasesWithAnInvalidUserThrowsAnError
	| clientId clientPassword service|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	self should: [service listPurchasesOf: 999 with: clientPassword.] raise: Error withMessageText: ''.
	! !

!testRun: #TusLibrosInterfaceTest #test16ListPurchasesWithAnInvalidUserThrowsAnError stamp: 'ldmaf 6/12/2022 23:54:46'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/12/2022 23:54:57' prior: 50496001!
test16ListPurchasesWithAnInvalidUserThrowsAnError
	| clientId clientPassword service|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (clientId->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	self should: [service listPurchasesOf: 999 with: clientPassword.] raise: Error withMessageText: 'Invalid Credentials.'.
	! !

!testRun: #TusLibrosInterfaceTest #test16ListPurchasesWithAnInvalidUserThrowsAnError stamp: 'ldmaf 6/12/2022 23:54:59'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test16ListPurchasesWithAnInvalidUserThrowsAnError stamp: 'ldmaf 6/12/2022 23:55:02'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test16ListPurchasesWithAnInvalidUserThrowsAnError stamp: 'ldmaf 6/12/2022 23:55:10'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test16ListPurchasesWithAnInvalidUserThrowsAnError stamp: 'ldmaf 6/12/2022 23:55:10'!
FAILURE!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/12/2022 23:56:00' prior: 50495317!
listPurchasesOf: aClientId with: aClientPassword 
	self validateCredentialsOf: aClientId with: aClientPassword.
	^clientsPurchases at: aClientId ifAbsent: [OrderedCollection new].! !

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/12/2022 23:56:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/12/2022 23:56:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/12/2022 23:56:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/12/2022 23:56:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 23:56:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/12/2022 23:56:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/12/2022 23:56:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/12/2022 23:56:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/12/2022 23:56:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/12/2022 23:56:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CheckoutWithAValidCreditCardCreatesACorrectSaleAndRemovesTheCartFromTheService stamp: 'ldmaf 6/12/2022 23:56:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CheckoutWithAnInvalidCreditCardThrowsAnExpiredCardErrorAndKeepsTheCartInTheService stamp: 'ldmaf 6/12/2022 23:56:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12xxx stamp: 'ldmaf 6/12/2022 23:56:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13ListPurchasesBeforeDoingAnyCheckoutReturnsAnEmptyListOfPurchases stamp: 'ldmaf 6/12/2022 23:56:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/12/2022 23:56:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15ListPurchasesAfterDoingManyCheckoutsReturnsAListWithManyPurchases stamp: 'ldmaf 6/12/2022 23:56:01'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListPurchasesWithAnInvalidUserThrowsAnError stamp: 'ldmaf 6/12/2022 23:56:01'!
PASSED!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/13/2022 00:05:29' prior: 50495453!
checkoutOf: aCartId with: aCreditCard
	|total cashier sale cartOwner purchases|
	(carts keys includes: aCartId) ifFalse: [self error: 'Non Existing Cart Id.'].
	cashier _ Cashier toCheckout: (carts at: aCartId) charging: aCreditCard throught: self on: (DateAndTime now) registeringOn: salesBook.
	total _ cashier checkOut.
	sale _ (Sale of: total with: ((carts at: aCartId) items)).
	cartOwner _ (clientsCarts at: aCartId).
	purchases _ (clientsPurchases at: cartOwner ifAbsent: [(clientsPurchases add: cartOwner->OrderedCollection new) value]).
	purchases add: sale.
	carts removeKey: aCartId.
	clientsCarts removeKey: aCartId.
	^sale.! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/13/2022 00:13:56' prior: 50496134!
checkoutOf: aCartId with: aCreditCard
	|total cashier sale cartOwner purchases|
	(self hasCart: aCartId) ifFalse: [self error: 'Non Existing Cart Id.'].
	
	cashier _ Cashier toCheckout: (carts at: aCartId) charging: aCreditCard throught: self on: (DateAndTime now) registeringOn: salesBook.
	total _ cashier checkOut.
	sale _ (Sale of: total with: ((carts at: aCartId) items)).
	
	cartOwner _ (clientsCarts at: aCartId).
	purchases _ (clientsPurchases at: cartOwner ifAbsent: [(clientsPurchases add: cartOwner->OrderedCollection new) value]).
	purchases add: sale.
	
	carts removeKey: aCartId.
	clientsCarts removeKey: aCartId.
	
	^sale.! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/13/2022 00:14:35' prior: 50495875!
createCartWith: aClientId and: aPassword at: aDateAndTime
	|id|
	self validateCredentialsOf: aClientId with: aPassword.
	
	id _ (Random next * 547) asInteger. "Generacion de Ids muy basica, deberia implementarse algo mas sofisticado."
	carts add: (id -> (Cart acceptingItemsOf: tusLibrosCatalogue)).
	cartsTimestamps add: (id -> aDateAndTime).
	clientsCarts add: id -> aClientId.
	^id.! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/13/2022 00:15:04' prior: 50493181!
add: anAmount of: anIsbn to: aCartId
	(self hasCart: aCartId) ifFalse: [self error: 'Non Existing Cart Id.']. 
	(((DateAndTime now) - (cartsTimestamps at: aCartId)) totalMinutes >= 30) ifTrue: [self error: 'Cart Expired.'].
	(carts at: aCartId) add: anAmount of: anIsbn.! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/13/2022 00:15:23'!
assertCartIsExpired: aCartId

	^ ((DateAndTime now) - (cartsTimestamps at: aCartId)) totalMinutes >= 30! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/13/2022 00:15:23' prior: 50496198!
add: anAmount of: anIsbn to: aCartId
	(self hasCart: aCartId) ifFalse: [self error: 'Non Existing Cart Id.']. 
	((self assertCartIsExpired: aCartId)) ifTrue: [self error: 'Cart Expired.'].
	(carts at: aCartId) add: anAmount of: anIsbn.! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/13/2022 00:15:59'!
generateRandomId

	^ (Random next * 547) asInteger! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/13/2022 00:15:59' prior: 50496182!
createCartWith: aClientId and: aPassword at: aDateAndTime
	|id|
	self validateCredentialsOf: aClientId with: aPassword.
	
	id _ self generateRandomId. "Generacion de Ids muy basica, deberia implementarse algo mas sofisticado."
	carts add: (id -> (Cart acceptingItemsOf: tusLibrosCatalogue)).
	cartsTimestamps add: (id -> aDateAndTime).
	clientsCarts add: id -> aClientId.
	^id.! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/13/2022 00:16:21' prior: 50491862!
listCart: aCartId 
	| listOfBooks items |
	(self hasCart: aCartId) ifFalse: [self error: 'Non Existing Cart Id.'].
	listOfBooks _ Dictionary new.
	items _ 	(carts at: aCartId) items.
	items do: [:aBook | listOfBooks add: aBook->(items occurrencesOf: aBook)].
	^listOfBooks.
	! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/13/2022 00:17:54'!
fetchClientPurchases: cartOwner

	^ clientsPurchases at: cartOwner ifAbsent: [(clientsPurchases add: cartOwner->OrderedCollection new) value]! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/13/2022 00:17:54' prior: 50496158!
checkoutOf: aCartId with: aCreditCard
	|total cashier sale cartOwner purchases|
	(self hasCart: aCartId) ifFalse: [self error: 'Non Existing Cart Id.'].
	
	cashier _ Cashier toCheckout: (carts at: aCartId) charging: aCreditCard throught: self on: (DateAndTime now) registeringOn: salesBook.
	total _ cashier checkOut.
	sale _ (Sale of: total with: ((carts at: aCartId) items)).
	
	cartOwner _ (clientsCarts at: aCartId).
	purchases _ (self fetchClientPurchases: cartOwner).
	purchases add: sale.
	
	carts removeKey: aCartId.
	clientsCarts removeKey: aCartId.
	
	^sale.! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/13/2022 00:18:38' prior: 50496268!
checkoutOf: aCartId with: aCreditCard
	|total cashier sale cartOwner purchases|
	(self hasCart: aCartId) ifFalse: [self error: 'Non Existing Cart Id.'].
	
	cashier _ Cashier toCheckout: (carts at: aCartId) 
				     	charging: aCreditCard 
					throught: self 
					on: (DateAndTime now) 
					registeringOn: salesBook.
					
	total _ cashier checkOut.
	sale _ (Sale of: total with: ((carts at: aCartId) items)).
	
	cartOwner _ (clientsCarts at: aCartId).
	purchases _ (self fetchClientPurchases: cartOwner).
	purchases add: sale.
	
	carts removeKey: aCartId.
	clientsCarts removeKey: aCartId.
	
	^sale.! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/13/2022 00:19:02'!
generateSaleOf: aCartId withTotal: total

	^ Sale of: total with: ((carts at: aCartId) items)! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/13/2022 00:19:02' prior: 50496289!
checkoutOf: aCartId with: aCreditCard
	|total cashier sale cartOwner purchases|
	(self hasCart: aCartId) ifFalse: [self error: 'Non Existing Cart Id.'].
	
	cashier _ Cashier toCheckout: (carts at: aCartId) 
				     	charging: aCreditCard 
					throught: self 
					on: (DateAndTime now) 
					registeringOn: salesBook.
					
	total _ cashier checkOut.
	sale _ (self generateSaleOf: aCartId withTotal: total).
	
	cartOwner _ (clientsCarts at: aCartId).
	purchases _ (self fetchClientPurchases: cartOwner).
	purchases add: sale.
	
	carts removeKey: aCartId.
	clientsCarts removeKey: aCartId.
	
	^sale.! !

!classRemoval: #Ticket stamp: 'ldmaf 6/13/2022 00:19:17'!
Object subclass: #Ticket
	instanceVariableNames: 'transactionId items total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CheckoutWithAValidCreditCardCreatesACorrectSaleAndRemovesTheCartFromTheService stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CheckoutWithAnInvalidCreditCardThrowsAnExpiredCardErrorAndKeepsTheCartInTheService stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12xxx stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13ListPurchasesBeforeDoingAnyCheckoutReturnsAnEmptyListOfPurchases stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15ListPurchasesAfterDoingManyCheckoutsReturnsAListWithManyPurchases stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListPurchasesWithAnInvalidUserThrowsAnError stamp: 'ldmaf 6/13/2022 00:19:19'!
PASSED!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/13/2022 00:20:47' prior: 50496318!
checkoutOf: aCartId with: aCreditCard
	|total cashier sale cartOwner purchases|
	(self hasCart: aCartId) ifFalse: [self error: 'Non Existing Cart Id.'].
	((self assertCartIsExpired: aCartId)) ifTrue: [self error: 'Cart Expired.'].
	
	cashier _ Cashier toCheckout: (carts at: aCartId) 
				     	charging: aCreditCard 
					throught: self 
					on: (DateAndTime now) 
					registeringOn: salesBook.
					
	total _ cashier checkOut.
	sale _ (self generateSaleOf: aCartId withTotal: total).
	
	cartOwner _ (clientsCarts at: aCartId).
	purchases _ (self fetchClientPurchases: cartOwner).
	purchases add: sale.
	
	carts removeKey: aCartId.
	clientsCarts removeKey: aCartId.
	
	^sale.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CheckoutWithAValidCreditCardCreatesACorrectSaleAndRemovesTheCartFromTheService stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CheckoutWithAnInvalidCreditCardThrowsAnExpiredCardErrorAndKeepsTheCartInTheService stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12xxx stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13ListPurchasesBeforeDoingAnyCheckoutReturnsAnEmptyListOfPurchases stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15ListPurchasesAfterDoingManyCheckoutsReturnsAListWithManyPurchases stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListPurchasesWithAnInvalidUserThrowsAnError stamp: 'ldmaf 6/13/2022 00:20:51'!
PASSED!
!Behavior method!
initialize
	(today _ [
	(DateAndTime
		cover: (23 to: 33)
		declaredAt: (23 to: 33)) now ] valueCoveringAll:
		{35 to: 37})
		cover: (14 to: 18)
		declaredAt: (14 to: 18).! !
!Behavior method!
createCart
	^ [
	(Cart
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) acceptingItemsOf:
		([
		(self coverAll:
			{39 to: 42}) defaultCatalog ] valueCoveringAll:
			{44 to: 57}) ] valueCoveringAll:
		{21 to: 37}.! !
!Behavior method!
defaultCatalog
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(Dictionary
		cover: (21 to: 30)
		declaredAt: (21 to: 30)) new ] valueCoveringAll:
		{32 to: 34}.
	[
	cascadeReceiver
		at:
			([
			(self coverAll:
				{42 to: 45}) itemSellByTheStore ] valueCoveringAll:
				{47 to: 64})
		put:
			([
			(self coverAll:
				{71 to: 74}) itemSellByTheStorePrice ] valueCoveringAll:
				{76 to: 98}) ] valueCoveringAll:
		{38 to: 40. 66 to: 69}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{103 to: 110} ] value.! !
!Behavior method!
itemSellByTheStore
	^ 'validBook' coverAll:
		{25 to: 35}.! !
!Behavior method!
itemSellByTheStorePrice
	^ 10 coverAll:
		{29 to: 30}.! !
!Behavior method!
acceptingItemsOf: aCatalog
	^ [
	([
	(self coverAll:
		{31 to: 34}) new ] valueCoveringAll:
		{36 to: 38}) initializeAcceptingItemsOf:
		(aCatalog
			cover: (68 to: 75)
			declaredAt: (19 to: 26)) ] valueCoveringAll:
		{40 to: 66}.! !
!Behavior method!
initializeAcceptingItemsOf: aCatalog
	(catalog _ aCatalog
		cover: (51 to: 58)
		declaredAt: (29 to: 36))
		cover: (40 to: 46)
		declaredAt: (40 to: 46).
	(items _ [
	(OrderedCollection
		cover: (71 to: 87)
		declaredAt: (71 to: 87)) new ] valueCoveringAll:
		{89 to: 91})
		cover: (62 to: 66)
		declaredAt: (62 to: 66).! !
!Behavior method!
isEmpty
	^ [
	(items
		cover: (13 to: 17)
		declaredAt: (13 to: 17)) isEmpty ] valueCoveringAll:
		{19 to: 25}.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!
!Behavior method!
itemNotSellByTheStore
	^ 'invalidBook' coverAll:
		{27 to: 39}.! !
!Behavior method!
add: anItem
	^ [
	(self coverAll:
		{17 to: 20})
		add:
			(1 coverAll:
				{27 to: 27})
		of:
			(anItem
				cover: (33 to: 38)
				declaredAt: (6 to: 11)) ] valueCoveringAll:
		{22 to: 25. 29 to: 31}.! !
!Behavior method!
add: aQuantity of: anItem
	[
	(self coverAll:
		{29 to: 32}) assertIsValidQuantity:
		(aQuantity
			cover: (57 to: 65)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{34 to: 55}.
	[
	(self coverAll:
		{69 to: 72}) assertIsValidItem:
		(anItem
			cover: (93 to: 98)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{74 to: 91}.
	[
	(1 coverAll:
		{103 to: 103})
		to:
			(aQuantity
				cover: (109 to: 117)
				declaredAt: (6 to: 14))
		do: [ :aNumber |
			[
			(items
				cover: (136 to: 140)
				declaredAt: (136 to: 140)) add:
				(anItem
					cover: (147 to: 152)
					declaredAt: (20 to: 25)) ] valueCoveringAll:
				{142 to: 145} ]] valueCoveringAll:
		{105 to: 107. 119 to: 121}.! !
!Behavior method!
assertIsValidQuantity: aQuantity
	[
	([
	(aQuantity
		cover: (36 to: 44)
		declaredAt: (24 to: 32)) strictlyPositive ] valueCoveringAll:
		{46 to: 61}) ifFalse: [
		[
		(self coverAll:
			{74 to: 77}) error:
			([
			(self coverAll:
				{86 to: 89}) invalidQuantityErrorMessage ] valueCoveringAll:
				{91 to: 117}) ] valueCoveringAll:
			{79 to: 84} ]] valueCoveringAll:
		{63 to: 70}.! !
!Behavior method!
assertIsValidItem: anItem
	[
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anItem
			cover: (51 to: 56)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			(self coverAll:
				{82 to: 85}) invalidItemErrorMessage ] valueCoveringAll:
				{87 to: 109}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
invalidItemErrorMessage
	^ 'Item is not in catalog' coverAll:
		{29 to: 52}.! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!
!Behavior method!
invalidQuantityErrorMessage
	^ 'Invalid number of items' coverAll:
		{33 to: 57}.! !

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!
!Behavior method!
includes: anItem
	^ [
	(items
		cover: (21 to: 25)
		declaredAt: (21 to: 25)) includes:
		(anItem
			cover: (37 to: 42)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{27 to: 35}.! !

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!
!Behavior method!
occurrencesOf: anItem
	^ [
	(items
		cover: (26 to: 30)
		declaredAt: (26 to: 30)) occurrencesOf:
		(anItem
			cover: (47 to: 52)
			declaredAt: (16 to: 21)) ] valueCoveringAll:
		{32 to: 45}.! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!
!Behavior method!
notExpiredCreditCard
	^ [
	(CreditCard
		cover: (26 to: 35)
		declaredAt: (26 to: 35)) expiringOn:
		([
		(Month
			cover: (50 to: 54)
			declaredAt: (50 to: 54))
			month:
				([
				(today
					cover: (63 to: 67)
					declaredAt: (63 to: 67)) monthIndex ] valueCoveringAll:
					{69 to: 78})
			year:
				([
				([
				(today
					cover: (86 to: 90)
					declaredAt: (63 to: 67)) yearNumber ] valueCoveringAll:
					{92 to: 101}) +
					(1 coverAll:
						{105 to: 105}) ] valueCoveringAll:
					{103 to: 103}) ] valueCoveringAll:
			{56 to: 61. 80 to: 84}) ] valueCoveringAll:
		{37 to: 47}.! !
!Behavior method!
expiringOn: aMonth
	^ [
	([
	(self coverAll:
		{25 to: 28}) new ] valueCoveringAll:
		{30 to: 32}) initializeExpiringOn:
		(aMonth
			cover: (56 to: 61)
			declaredAt: (13 to: 18)) ] valueCoveringAll:
		{34 to: 54}.! !
!Behavior method!
initializeExpiringOn: aMonth
	(expiration _ aMonth
		cover: (48 to: 53)
		declaredAt: (23 to: 28))
		cover: (34 to: 43)
		declaredAt: (34 to: 43).! !
!Behavior method!
today
	^ today
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !
!Behavior method!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook
	[
	(self coverAll:
		{109 to: 112}) assertIsNotEmpty:
		(aCart
			cover: (132 to: 136)
			declaredAt: (13 to: 17)) ] valueCoveringAll:
		{114 to: 130}.
	[
	(self coverAll:
		{140 to: 143})
		assertIsNotExpired:
			(aCreditCard
				cover: (165 to: 175)
				declaredAt: (29 to: 39))
		on:
			(aDate
				cover: (181 to: 185)
				declaredAt: (74 to: 78)) ] valueCoveringAll:
		{145 to: 163. 177 to: 179}.
	^ [
	([
	(self coverAll:
		{192 to: 195}) new ] valueCoveringAll:
		{197 to: 199})
		initializeToCheckout:
			(aCart
				cover: (223 to: 227)
				declaredAt: (13 to: 17))
		charging:
			(aCreditCard
				cover: (239 to: 249)
				declaredAt: (29 to: 39))
		throught:
			(aMerchantProcessor
				cover: (261 to: 278)
				declaredAt: (51 to: 68))
		registeringOn:
			(aSalesBook
				cover: (295 to: 304)
				declaredAt: (95 to: 104)) ] valueCoveringAll:
		{201 to: 221. 229 to: 237. 251 to: 259. 280 to: 293}.! !
!Behavior method!
assertIsNotEmpty: aCart
	[
	([
	(aCart
		cover: (29 to: 33)
		declaredAt: (19 to: 23)) isEmpty ] valueCoveringAll:
		{35 to: 41}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(self coverAll:
				{64 to: 67}) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
				{69 to: 97}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
cartCanNotBeEmptyErrorMessage
	^ 'Can not check out an empty cart' coverAll:
		{35 to: 67}.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!
!Behavior method!
assertIsNotExpired: aCreditCard on: aDate
	[
	([
	(aCreditCard
		cover: (47 to: 57)
		declaredAt: (21 to: 31)) isExpiredOn:
		(aDate
			cover: (72 to: 76)
			declaredAt: (37 to: 41)) ] valueCoveringAll:
		{59 to: 70}) ifTrue: [
		[
		(self coverAll:
			{89 to: 92}) error:
			([
			(self coverAll:
				{101 to: 104}) canNotChargeAnExpiredCreditCardErrorMessage ] valueCoveringAll:
				{106 to: 148}) ] valueCoveringAll:
			{94 to: 99} ]] valueCoveringAll:
		{79 to: 85}.! !
!Behavior method!
isExpiredOn: aDate
	^ [
	([
	(expiration
		cover: (25 to: 34)
		declaredAt: (25 to: 34)) start ] valueCoveringAll:
		{36 to: 40}) <
		([
		([
		(Month
			cover: (45 to: 49)
			declaredAt: (45 to: 49))
			month:
				([
				(aDate
					cover: (58 to: 62)
					declaredAt: (14 to: 18)) monthIndex ] valueCoveringAll:
					{64 to: 73})
			year:
				([
				(aDate
					cover: (81 to: 85)
					declaredAt: (14 to: 18)) yearNumber ] valueCoveringAll:
					{87 to: 96}) ] valueCoveringAll:
			{51 to: 56. 75 to: 79}) start ] valueCoveringAll:
			{99 to: 103}) ] valueCoveringAll:
		{42 to: 42}.! !
!Behavior method!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook
	(cart _ aCart
		cover: (117 to: 121)
		declaredAt: (23 to: 27))
		cover: (109 to: 112)
		declaredAt: (109 to: 112).
	(creditCard _ aCreditCard
		cover: (139 to: 149)
		declaredAt: (39 to: 49))
		cover: (125 to: 134)
		declaredAt: (125 to: 134).
	(merchantProcessor _ aMerchantProcessor
		cover: (174 to: 191)
		declaredAt: (61 to: 78))
		cover: (153 to: 169)
		declaredAt: (153 to: 169).
	(salesBook _ aSalesBook
		cover: (208 to: 217)
		declaredAt: (95 to: 104))
		cover: (195 to: 203)
		declaredAt: (195 to: 203).! !
!Behavior method!
checkOut
	[
	(self coverAll:
		{12 to: 15}) calculateTotal ] valueCoveringAll:
		{17 to: 30}.
	[
	(self coverAll:
		{34 to: 37}) debitTotal ] valueCoveringAll:
		{39 to: 48}.
	[
	(self coverAll:
		{52 to: 55}) registerSale ] valueCoveringAll:
		{57 to: 68}.
	^ total
		cover: (75 to: 79)
		declaredAt: (75 to: 79).! !
!Behavior method!
calculateTotal
	(total _ [
	(cart
		cover: (27 to: 30)
		declaredAt: (27 to: 30)) total ] valueCoveringAll:
		{32 to: 36})
		cover: (18 to: 22)
		declaredAt: (18 to: 22).! !
!Behavior method!
total
	^ [
	(items
		cover: (11 to: 15)
		declaredAt: (11 to: 15)) sum: [ :anItem |
		[
		(catalog
			cover: (34 to: 40)
			declaredAt: (34 to: 40)) at:
			(anItem
				cover: (46 to: 51)
				declaredAt: (25 to: 30)) ] valueCoveringAll:
			{42 to: 44} ]] valueCoveringAll:
		{17 to: 20}.! !
!Behavior method!
debitTotal
	[
	(merchantProcessor
		cover: (14 to: 30)
		declaredAt: (14 to: 30))
		debit:
			(total
				cover: (39 to: 43)
				declaredAt: (39 to: 43))
		from:
			(creditCard
				cover: (51 to: 60)
				declaredAt: (51 to: 60)) ] valueCoveringAll:
		{32 to: 37. 45 to: 49}.! !
!Behavior method!
registerSale
	[
	(salesBook
		cover: (16 to: 24)
		declaredAt: (16 to: 24)) add:
		([
		(self coverAll:
			{31 to: 34}) createSale ] valueCoveringAll:
			{36 to: 45}) ] valueCoveringAll:
		{26 to: 29}.! !
!Behavior method!
createSale
	^ [
	(Sale
		cover: (16 to: 19)
		declaredAt: (16 to: 19))
		of:
			(total
				cover: (25 to: 29)
				declaredAt: (25 to: 29))
		with:
			([
			(cart
				cover: (38 to: 41)
				declaredAt: (38 to: 41)) items ] valueCoveringAll:
				{43 to: 47}) ] valueCoveringAll:
		{21 to: 23. 31 to: 35}.! !
!Behavior method!
items
	^ [
	(items
		cover: (10 to: 14)
		declaredAt: (10 to: 14)) copy ] valueCoveringAll:
		{16 to: 19}.! !
!Behavior method!
of: aTotal with: aCollectionOfItems
	"should assert total is not negative or 0!!"
	^ [
	([
	(self coverAll:
		{85 to: 88}) new ] valueCoveringAll:
		{90 to: 92})
		initializeTotal:
			(aTotal
				cover: (111 to: 116)
				declaredAt: (5 to: 10))
		with:
			(aCollectionOfItems
				cover: (124 to: 141)
				declaredAt: (18 to: 35)) ] valueCoveringAll:
		{94 to: 109. 118 to: 122}.! !
!Behavior method!
initializeTotal: aTotal with: aCollectionOfItems
	(total _ aTotal
		cover: (61 to: 66)
		declaredAt: (18 to: 23))
		cover: (52 to: 56)
		declaredAt: (52 to: 56).
	(id _ 1 coverAll:
		{76 to: 76})
		cover: (70 to: 71)
		declaredAt: (70 to: 71).
	(purchasedItems _ aCollectionOfItems
		cover: (98 to: 115)
		declaredAt: (31 to: 48))
		cover: (80 to: 93)
		declaredAt: (80 to: 93).! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!
!Behavior method!
expiredCreditCard
	^ [
	(CreditCard
		cover: (23 to: 32)
		declaredAt: (23 to: 32)) expiringOn:
		([
		(Month
			cover: (47 to: 51)
			declaredAt: (47 to: 51))
			month:
				([
				(today
					cover: (60 to: 64)
					declaredAt: (60 to: 64)) monthIndex ] valueCoveringAll:
					{66 to: 75})
			year:
				([
				([
				(today
					cover: (83 to: 87)
					declaredAt: (60 to: 64)) yearNumber ] valueCoveringAll:
					{89 to: 98}) -
					(1 coverAll:
						{102 to: 102}) ] valueCoveringAll:
					{100 to: 100}) ] valueCoveringAll:
			{53 to: 58. 77 to: 81}) ] valueCoveringAll:
		{34 to: 44}.! !
!Behavior method!
canNotChargeAnExpiredCreditCardErrorMessage
	^ 'Can not charge an expired credit card' coverAll:
		{49 to: 87}.! !

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!
!Behavior method!
total
	^ total
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!
!Behavior method!
creditCardHasNoCreditErrorMessage
	^ 'Credit card has no credit' coverAll:
		{39 to: 65}.! !

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!
!Behavior method!
with: aDictionary
	^ [
	([
	(self coverAll:
		{22 to: 25}) new ] valueCoveringAll:
		{27 to: 29}) initializeWith:
		(aDictionary
			cover: (47 to: 57)
			declaredAt: (7 to: 17)) ] valueCoveringAll:
		{31 to: 45}.! !
!Behavior method!
initializeWith: aDictionary
	(users _ aDictionary
		cover: (39 to: 49)
		declaredAt: (17 to: 27))
		cover: (31 to: 35)
		declaredAt: (31 to: 35).
	(carts _ [
	(Dictionary
		cover: (61 to: 70)
		declaredAt: (61 to: 70)) new ] valueCoveringAll:
		{72 to: 74})
		cover: (53 to: 57)
		declaredAt: (53 to: 57).
	(tusLibrosCatalogue _ [
	(Dictionary
		cover: (99 to: 108)
		declaredAt: (61 to: 70)) new ] valueCoveringAll:
		{110 to: 112})
		cover: (78 to: 95)
		declaredAt: (78 to: 95).
	(cartsTimestamps _ [
	(Dictionary
		cover: (134 to: 143)
		declaredAt: (61 to: 70)) new ] valueCoveringAll:
		{145 to: 147})
		cover: (116 to: 130)
		declaredAt: (116 to: 130).
	(debitBehavior _ [ :anAmount :aCreditCard |
	nil ])
		cover: (151 to: 163)
		declaredAt: (151 to: 163).
	(salesBook _ [
	(OrderedCollection
		cover: (211 to: 227)
		declaredAt: (211 to: 227)) new ] valueCoveringAll:
		{229 to: 231})
		cover: (199 to: 207)
		declaredAt: (199 to: 207).
	(clientsCarts _ [
	(Dictionary
		cover: (250 to: 259)
		declaredAt: (61 to: 70)) new ] valueCoveringAll:
		{261 to: 263})
		cover: (235 to: 246)
		declaredAt: (235 to: 246).
	(clientsPurchases _ [
	(Dictionary
		cover: (286 to: 295)
		declaredAt: (61 to: 70)) new ] valueCoveringAll:
		{297 to: 299})
		cover: (267 to: 282)
		declaredAt: (267 to: 282).
	[
	(tusLibrosCatalogue
		cover: (303 to: 320)
		declaredAt: (78 to: 95)) add:
		([
		('9780764548345' coverAll:
			{328 to: 342}) ->
			(100 coverAll:
				{345 to: 347}) ] valueCoveringAll:
			{343 to: 344}) ] valueCoveringAll:
		{322 to: 325}.
	[
	(tusLibrosCatalogue
		cover: (352 to: 369)
		declaredAt: (78 to: 95)) add:
		([
		('9788495070524' coverAll:
			{377 to: 391}) ->
			(73 coverAll:
				{396 to: 397}) ] valueCoveringAll:
			{393 to: 394}) ] valueCoveringAll:
		{371 to: 374}.
	[
	(tusLibrosCatalogue
		cover: (402 to: 419)
		declaredAt: (78 to: 95)) add:
		([
		('9780764548345' coverAll:
			{427 to: 441}) ->
			(12 coverAll:
				{446 to: 447}) ] valueCoveringAll:
			{443 to: 444}) ] valueCoveringAll:
		{421 to: 424}.
	[
	(tusLibrosCatalogue
		cover: (452 to: 469)
		declaredAt: (78 to: 95)) add:
		([
		('9789871497522' coverAll:
			{477 to: 491}) ->
			(59 coverAll:
				{496 to: 497}) ] valueCoveringAll:
			{493 to: 494}) ] valueCoveringAll:
		{471 to: 474}.! !
!Behavior method!
createCartWith: aClientId and: aPassword at: aDateAndTime
	| id |
	[
	(self coverAll:
		{66 to: 69})
		validateCredentialsOf:
			(aClientId
				cover: (94 to: 102)
				declaredAt: (17 to: 25))
		with:
			(aPassword
				cover: (110 to: 118)
				declaredAt: (32 to: 40)) ] valueCoveringAll:
		{71 to: 92. 104 to: 108}.
	(id _ [
	(self coverAll:
		{129 to: 132}) generateRandomId ] valueCoveringAll:
		{134 to: 149})
		cover: (124 to: 125)
		declaredAt: (61 to: 62).
	[
	(carts
		cover: (229 to: 233)
		declaredAt: (229 to: 233)) add:
		([
		(id
			cover: (241 to: 242)
			declaredAt: (61 to: 62)) ->
			([
			(Cart
				cover: (248 to: 251)
				declaredAt: (248 to: 251)) acceptingItemsOf:
				(tusLibrosCatalogue
					cover: (271 to: 288)
					declaredAt: (271 to: 288)) ] valueCoveringAll:
				{253 to: 269}) ] valueCoveringAll:
			{244 to: 245}) ] valueCoveringAll:
		{235 to: 238}.
	[
	(cartsTimestamps
		cover: (294 to: 308)
		declaredAt: (294 to: 308)) add:
		([
		(id
			cover: (316 to: 317)
			declaredAt: (61 to: 62)) ->
			(aDateAndTime
				cover: (322 to: 333)
				declaredAt: (46 to: 57)) ] valueCoveringAll:
			{319 to: 320}) ] valueCoveringAll:
		{310 to: 313}.
	[
	(clientsCarts
		cover: (338 to: 349)
		declaredAt: (338 to: 349)) add:
		([
		(id
			cover: (356 to: 357)
			declaredAt: (61 to: 62)) ->
			(aClientId
				cover: (362 to: 370)
				declaredAt: (17 to: 25)) ] valueCoveringAll:
			{359 to: 360}) ] valueCoveringAll:
		{351 to: 354}.
	^ id
		cover: (375 to: 376)
		declaredAt: (61 to: 62).! !
!Behavior method!
validateCredentialsOf: aClientId with: aClientPassword
	^ [
	([
	(users
		cover: (61 to: 65)
		declaredAt: (61 to: 65))
		at:
			(aClientId
				cover: (71 to: 79)
				declaredAt: (24 to: 32))
		ifAbsent: [
			[
			(self coverAll:
				{92 to: 95}) error:
				('Invalid Credentials.' coverAll:
					{104 to: 125}) ] valueCoveringAll:
				{97 to: 102} ]] valueCoveringAll:
		{67 to: 69. 81 to: 89}) =
		(aClientPassword
			cover: (131 to: 145)
			declaredAt: (40 to: 54)) ] valueCoveringAll:
		{129 to: 129}.! !
!Behavior method!
generateRandomId
	^ [
	([
	([
	(Random
		cover: (23 to: 28)
		declaredAt: (23 to: 28)) next ] valueCoveringAll:
		{30 to: 33}) *
		(547 coverAll:
			{37 to: 39}) ] valueCoveringAll:
		{35 to: 35}) asInteger ] valueCoveringAll:
		{42 to: 50}.! !
!Behavior method!
listCart: aCartId
	| listOfBooks items |
	[
	([
	(self coverAll:
		{45 to: 48}) hasCart:
		(aCartId
			cover: (59 to: 65)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{50 to: 57}) ifFalse: [
		[
		(self coverAll:
			{78 to: 81}) error:
			('Non Existing Cart Id.' coverAll:
				{90 to: 112}) ] valueCoveringAll:
			{83 to: 88} ]] valueCoveringAll:
		{68 to: 75}.
	(listOfBooks _ [
	(Dictionary
		cover: (131 to: 140)
		declaredAt: (131 to: 140)) new ] valueCoveringAll:
		{142 to: 144})
		cover: (117 to: 127)
		declaredAt: (23 to: 33).
	(items _ [
	([
	(carts
		cover: (158 to: 162)
		declaredAt: (158 to: 162)) at:
		(aCartId
			cover: (168 to: 174)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{164 to: 166}) items ] valueCoveringAll:
		{177 to: 181})
		cover: (148 to: 152)
		declaredAt: (35 to: 39).
	[
	(items
		cover: (185 to: 189)
		declaredAt: (35 to: 39)) do: [ :aBook |
		[
		(listOfBooks
			cover: (205 to: 215)
			declaredAt: (23 to: 33)) add:
			([
			(aBook
				cover: (222 to: 226)
				declaredAt: (197 to: 201)) ->
				([
				(items
					cover: (230 to: 234)
					declaredAt: (35 to: 39)) occurrencesOf:
					(aBook
						cover: (251 to: 255)
						declaredAt: (197 to: 201)) ] valueCoveringAll:
					{236 to: 249}) ] valueCoveringAll:
				{227 to: 228}) ] valueCoveringAll:
			{217 to: 220} ]] valueCoveringAll:
		{191 to: 193}.
	^ listOfBooks
		cover: (262 to: 272)
		declaredAt: (23 to: 33).! !
!Behavior method!
hasCart: aCartId
	^ [
	([
	(carts
		cover: (23 to: 27)
		declaredAt: (23 to: 27)) keys ] valueCoveringAll:
		{29 to: 32}) includes:
		(aCartId
			cover: (44 to: 50)
			declaredAt: (10 to: 16)) ] valueCoveringAll:
		{34 to: 42}.! !

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!
!Behavior method!
add: anAmount of: anIsbn to: aCartId
	[
	([
	(self coverAll:
		{40 to: 43}) hasCart:
		(aCartId
			cover: (54 to: 60)
			declaredAt: (30 to: 36)) ] valueCoveringAll:
		{45 to: 52}) ifFalse: [
		[
		(self coverAll:
			{73 to: 76}) error:
			('Non Existing Cart Id.' coverAll:
				{85 to: 107}) ] valueCoveringAll:
			{78 to: 83} ]] valueCoveringAll:
		{63 to: 70}.
	[
	([
	(self coverAll:
		{115 to: 118}) assertCartIsExpired:
		(aCartId
			cover: (141 to: 147)
			declaredAt: (30 to: 36)) ] valueCoveringAll:
		{120 to: 139}) ifTrue: [
		[
		(self coverAll:
			{160 to: 163}) error:
			('Cart Expired.' coverAll:
				{172 to: 186}) ] valueCoveringAll:
			{165 to: 170} ]] valueCoveringAll:
		{151 to: 157}.
	[
	([
	(carts
		cover: (192 to: 196)
		declaredAt: (192 to: 196)) at:
		(aCartId
			cover: (202 to: 208)
			declaredAt: (30 to: 36)) ] valueCoveringAll:
		{198 to: 200})
		add:
			(anAmount
				cover: (216 to: 223)
				declaredAt: (6 to: 13))
		of:
			(anIsbn
				cover: (229 to: 234)
				declaredAt: (19 to: 24)) ] valueCoveringAll:
		{211 to: 214. 225 to: 227}.! !
!Behavior method!
assertCartIsExpired: aCartId
	^ [
	([
	([
	([
	(DateAndTime
		cover: (36 to: 46)
		declaredAt: (36 to: 46)) now ] valueCoveringAll:
		{48 to: 50}) -
		([
		(cartsTimestamps
			cover: (56 to: 70)
			declaredAt: (56 to: 70)) at:
			(aCartId
				cover: (76 to: 82)
				declaredAt: (22 to: 28)) ] valueCoveringAll:
			{72 to: 74}) ] valueCoveringAll:
		{53 to: 53}) totalMinutes ] valueCoveringAll:
		{86 to: 97}) >=
		(30 coverAll:
			{102 to: 103}) ] valueCoveringAll:
		{99 to: 100}.! !

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!
!Behavior method!
expiringOn: aMonth withNumber: aCreditCardNumber andOwner: anOwner
	^ [
	([
	(self coverAll:
		{74 to: 77}) new ] valueCoveringAll:
		{79 to: 81})
		initializeExpiringOn:
			(aMonth
				cover: (105 to: 110)
				declaredAt: (13 to: 18))
		withNumber:
			(aCreditCardNumber
				cover: (124 to: 140)
				declaredAt: (32 to: 48))
		andOwner:
			(anOwner
				cover: (152 to: 158)
				declaredAt: (60 to: 66)) ] valueCoveringAll:
		{83 to: 103. 112 to: 122. 142 to: 150}.! !
!Behavior method!
initializeExpiringOn: aMonth withNumber: aCreditCardNumber andOwner: anOwner
	(expiration _ aMonth
		cover: (95 to: 100)
		declaredAt: (23 to: 28))
		cover: (81 to: 90)
		declaredAt: (81 to: 90).
	(number _ aCreditCardNumber
		cover: (114 to: 130)
		declaredAt: (42 to: 58))
		cover: (104 to: 109)
		declaredAt: (104 to: 109).
	(owner _ anOwner
		cover: (143 to: 149)
		declaredAt: (70 to: 76))
		cover: (134 to: 138)
		declaredAt: (134 to: 138).! !
!Behavior method!
checkoutOf: aCartId with: aCreditCard
	| total cashier sale cartOwner purchases |
	[
	([
	(self coverAll:
		{83 to: 86}) hasCart:
		(aCartId
			cover: (97 to: 103)
			declaredAt: (13 to: 19)) ] valueCoveringAll:
		{88 to: 95}) ifFalse: [
		[
		(self coverAll:
			{116 to: 119}) error:
			('Non Existing Cart Id.' coverAll:
				{128 to: 150}) ] valueCoveringAll:
			{121 to: 126} ]] valueCoveringAll:
		{106 to: 113}.
	[
	([
	(self coverAll:
		{157 to: 160}) assertCartIsExpired:
		(aCartId
			cover: (183 to: 189)
			declaredAt: (13 to: 19)) ] valueCoveringAll:
		{162 to: 181}) ifTrue: [
		[
		(self coverAll:
			{202 to: 205}) error:
			('Cart Expired.' coverAll:
				{214 to: 228}) ] valueCoveringAll:
			{207 to: 212} ]] valueCoveringAll:
		{193 to: 199}.
	(cashier _ [
	(Cashier
		cover: (245 to: 251)
		declaredAt: (245 to: 251))
		toCheckout:
			([
			(carts
				cover: (266 to: 270)
				declaredAt: (266 to: 270)) at:
				(aCartId
					cover: (276 to: 282)
					declaredAt: (13 to: 19)) ] valueCoveringAll:
				{272 to: 274})
		charging:
			(aCreditCard
				cover: (306 to: 316)
				declaredAt: (27 to: 37))
		throught:
			(self coverAll:
				{334 to: 337})
		on:
			([
			(DateAndTime
				cover: (350 to: 360)
				declaredAt: (350 to: 360)) now ] valueCoveringAll:
				{362 to: 364})
		registeringOn:
			(salesBook
				cover: (388 to: 396)
				declaredAt: (388 to: 396)) ] valueCoveringAll:
		{253 to: 263. 296 to: 304. 324 to: 332. 345 to: 347. 373 to: 386})
		cover: (235 to: 241)
		declaredAt: (47 to: 53).
	(total _ [
	(cashier
		cover: (414 to: 420)
		declaredAt: (47 to: 53)) checkOut ] valueCoveringAll:
		{422 to: 429})
		cover: (406 to: 410)
		declaredAt: (41 to: 45).
	(sale _ [
	(self coverAll:
		{441 to: 444})
		generateSaleOf:
			(aCartId
				cover: (462 to: 468)
				declaredAt: (13 to: 19))
		withTotal:
			(total
				cover: (481 to: 485)
				declaredAt: (41 to: 45)) ] valueCoveringAll:
		{446 to: 460. 470 to: 479})
		cover: (433 to: 436)
		declaredAt: (55 to: 58).
	(cartOwner _ [
	(clientsCarts
		cover: (505 to: 516)
		declaredAt: (505 to: 516)) at:
		(aCartId
			cover: (522 to: 528)
			declaredAt: (13 to: 19)) ] valueCoveringAll:
		{518 to: 520})
		cover: (492 to: 500)
		declaredAt: (60 to: 68).
	(purchases _ [
	(self coverAll:
		{546 to: 549}) fetchClientPurchases:
		(cartOwner
			cover: (573 to: 581)
			declaredAt: (60 to: 68)) ] valueCoveringAll:
		{551 to: 571})
		cover: (533 to: 541)
		declaredAt: (70 to: 78).
	[
	(purchases
		cover: (586 to: 594)
		declaredAt: (70 to: 78)) add:
		(sale
			cover: (601 to: 604)
			declaredAt: (55 to: 58)) ] valueCoveringAll:
		{596 to: 599}.
	[
	(carts
		cover: (610 to: 614)
		declaredAt: (266 to: 270)) removeKey:
		(aCartId
			cover: (627 to: 633)
			declaredAt: (13 to: 19)) ] valueCoveringAll:
		{616 to: 625}.
	[
	(clientsCarts
		cover: (637 to: 648)
		declaredAt: (505 to: 516)) removeKey:
		(aCartId
			cover: (661 to: 667)
			declaredAt: (13 to: 19)) ] valueCoveringAll:
		{650 to: 659}.
	^ sale
		cover: (674 to: 677)
		declaredAt: (55 to: 58).! !
!Behavior method!
debit: anAmount from: aCreditCard
	^ [
	(debitBehavior
		cover: (39 to: 51)
		declaredAt: (39 to: 51))
		value:
			(anAmount
				cover: (60 to: 67)
				declaredAt: (8 to: 15))
		value:
			(aCreditCard
				cover: (76 to: 86)
				declaredAt: (23 to: 33)) ] valueCoveringAll:
		{53 to: 58. 69 to: 74}.! !
!Behavior method!
generateSaleOf: aCartId withTotal: total
	^ [
	(Sale
		cover: (46 to: 49)
		declaredAt: (46 to: 49))
		of:
			(total
				cover: (55 to: 59)
				declaredAt: (36 to: 40))
		with:
			([
			([
			(carts
				cover: (69 to: 73)
				declaredAt: (69 to: 73)) at:
				(aCartId
					cover: (79 to: 85)
					declaredAt: (17 to: 23)) ] valueCoveringAll:
				{75 to: 77}) items ] valueCoveringAll:
				{88 to: 92}) ] valueCoveringAll:
		{51 to: 53. 61 to: 65}.! !
!Behavior method!
fetchClientPurchases: cartOwner
	^ [
	(clientsPurchases
		cover: (37 to: 52)
		declaredAt: (37 to: 52))
		at:
			(cartOwner
				cover: (58 to: 66)
				declaredAt: (23 to: 31))
		ifAbsent: [
			[
			([
			(clientsPurchases
				cover: (80 to: 95)
				declaredAt: (37 to: 52)) add:
				([
				(cartOwner
					cover: (102 to: 110)
					declaredAt: (23 to: 31)) ->
					([
					(OrderedCollection
						cover: (113 to: 129)
						declaredAt: (113 to: 129)) new ] valueCoveringAll:
						{131 to: 133}) ] valueCoveringAll:
					{111 to: 112}) ] valueCoveringAll:
				{97 to: 100}) value ] valueCoveringAll:
				{136 to: 140} ]] valueCoveringAll:
		{54 to: 56. 68 to: 76}.! !
!Behavior method!
id
	^ id
		cover: (6 to: 7)
		declaredAt: (6 to: 7).! !
!Behavior method!
transactionAmountOf: aSaleId
	^ [
	([
	([
	(salesBook
		cover: (35 to: 43)
		declaredAt: (35 to: 43)) select: [ :aSale |
		[
		([
		(aSale
			cover: (64 to: 68)
			declaredAt: (55 to: 59)) id ] valueCoveringAll:
			{70 to: 71}) =
			(aSaleId
				cover: (76 to: 82)
				declaredAt: (22 to: 28)) ] valueCoveringAll:
			{74 to: 74} ]] valueCoveringAll:
		{45 to: 51}) first ] valueCoveringAll:
		{87 to: 91}) total ] valueCoveringAll:
		{93 to: 97}.! !
!Behavior method!
quantityOf: anIsbn
	^ [
	(purchasedItems
		cover: (24 to: 37)
		declaredAt: (24 to: 37)) occurrencesOf:
		(anIsbn
			cover: (54 to: 59)
			declaredAt: (13 to: 18)) ] valueCoveringAll:
		{39 to: 52}.! !

!testRun: #TusLibrosInterfaceTest #test10CheckoutWithAValidCreditCardCreatesACorrectSaleAndRemovesTheCartFromTheService stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CheckoutWithAnInvalidCreditCardThrowsAnExpiredCardErrorAndKeepsTheCartInTheService stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12xxx stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!
!Behavior method!
listPurchasesOf: aClientId with: aClientPassword
	[
	(self coverAll:
		{52 to: 55})
		validateCredentialsOf:
			(aClientId
				cover: (80 to: 88)
				declaredAt: (18 to: 26))
		with:
			(aClientPassword
				cover: (96 to: 110)
				declaredAt: (34 to: 48)) ] valueCoveringAll:
		{57 to: 78. 90 to: 94}.
	^ [
	(clientsPurchases
		cover: (115 to: 130)
		declaredAt: (115 to: 130))
		at:
			(aClientId
				cover: (136 to: 144)
				declaredAt: (18 to: 26))
		ifAbsent: [
			[
			(OrderedCollection
				cover: (157 to: 173)
				declaredAt: (157 to: 173)) new ] valueCoveringAll:
				{175 to: 177} ]] valueCoveringAll:
		{132 to: 134. 146 to: 154}.! !

!testRun: #TusLibrosInterfaceTest #test13ListPurchasesBeforeDoingAnyCheckoutReturnsAnEmptyListOfPurchases stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15ListPurchasesAfterDoingManyCheckoutsReturnsAListWithManyPurchases stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListPurchasesWithAnInvalidUserThrowsAnError stamp: 'ldmaf 6/13/2022 00:22:09'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:23:36'!
test12asdad
	| clientId clientPassword service creditCard cartId|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.

	self should: [service checkoutOf: 666 with: creditCard] raise: Error withMessageText: 'Non Existing Cart Id.'.
! !

!methodRemoval: TusLibrosInterfaceTest #test12xxx stamp: 'ldmaf 6/13/2022 00:23:36'!
test12xxx
	| clientId clientPassword service creditCard cartId|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.

	self should: [service checkoutOf: 666 with: creditCard] raise: Error withMessageText: 'Non Existing Cart Id.'.
!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:23:54'!
test12CheckoutWithAnExpiredCartShouldThrowAnError
	| clientId clientPassword service creditCard cartId|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.

	self should: [service checkoutOf: 666 with: creditCard] raise: Error withMessageText: 'Non Existing Cart Id.'.
! !

!methodRemoval: TusLibrosInterfaceTest #test12asdad stamp: 'ldmaf 6/13/2022 00:23:54'!
test12asdad
	| clientId clientPassword service creditCard cartId|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.

	self should: [service checkoutOf: 666 with: creditCard] raise: Error withMessageText: 'Non Existing Cart Id.'.
!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:24:45' prior: 50497661!
test12CheckoutWithAnExpiredCartShouldThrowAnError
	| clientId clientPassword service creditCard cartId creationTimeInThePast |
	creationTimeInThePast _ (DateAndTime now) subtractDuration: (Duration minutes: 30). 
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: creationTimeInThePast.
	service add: 10 of: '9780764548345' to: cartId.

	self should: [service checkoutOf: 666 with: creditCard] raise: Error withMessageText: 'Non Existing Cart Id.'.
! !

----SNAPSHOT----(13 June 2022 00:24:51) CuisUniversity-5096.image priorSource: 5244565!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:25:15' prior: 50497710!
test12CheckoutWithAnExpiredCartShouldThrowAnError
	| clientId clientPassword service creditCard cartId creationTimeInThePast |
	creationTimeInThePast _ (DateAndTime now) subtractDuration: (Duration minutes: 30). 
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: creationTimeInThePast.
	service add: 10 of: '9780764548345' to: cartId.

	self should: [service checkoutOf: cartId with: creditCard at: DateAndTime now] raise: Error withMessageText: 'Non Existing Cart Id.'.
! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:25:22' prior: 50497742!
test12CheckoutWithAnExpiredCartShouldThrowAnError
	| clientId clientPassword service creditCard cartId creationTimeInThePast |
	creationTimeInThePast _ (DateAndTime now) subtractDuration: (Duration minutes: 30). 
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: creationTimeInThePast.
	service add: 10 of: '9780764548345' to: cartId.

	self should: [service checkoutOf: cartId with: creditCard at: DateAndTime now] raise: Error withMessageText: 'Expired Cart.'.
! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:31:33' prior: 50497772!
test12CheckoutWithAnExpiredCartShouldThrowAnError
	| clientId clientPassword service creditCard cartId creationTimeInThePast |
	creationTimeInThePast _ (DateAndTime now) subtractDuration: (Duration minutes: 30). 
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: creationTimeInThePast.
	service add: 10 of: '9780764548345' to: cartId.
	self should: [service checkoutOf: cartId with: creditCard at: DateAndTime now] raise: Error  withMessageText: 'Cart Expired.'.
! !

!testRun: #TusLibrosInterfaceTest #test12CheckoutWithAnExpiredCartShouldThrowAnError stamp: 'ldmaf 6/13/2022 00:31:35'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CheckoutWithAnExpiredCartShouldThrowAnError stamp: 'ldmaf 6/13/2022 00:31:35'!
ERROR!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:32:06' prior: 50497802!
test12CheckoutWithAnExpiredCartShouldThrowAnError
	| clientId clientPassword service creditCard cartId creationTimeInThePast |
	creationTimeInThePast _ (DateAndTime now) subtractDuration: (Duration minutes: 29). 
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: creationTimeInThePast.
	service add: 10 of: '9780764548345' to: cartId.
	self should: [service checkoutOf: cartId with: creditCard at: DateAndTime now] raise: Error  withMessageText: 'Cart Expired.'.
! !

!testRun: #TusLibrosInterfaceTest #test12CheckoutWithAnExpiredCartShouldThrowAnError stamp: 'ldmaf 6/13/2022 00:32:08'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test12CheckoutWithAnExpiredCartShouldThrowAnError stamp: 'ldmaf 6/13/2022 00:32:08'!
FAILURE!
!TusLibrosInterfaceTest methodsFor: 'assertions' stamp: 'ldmaf 6/13/2022 00:32:10' overrides: 16961444!
assert: aFalse description: aBlockClosure 
	self shouldBeImplemented.! !

!testRun: #TusLibrosInterfaceTest #test12CheckoutWithAnExpiredCartShouldThrowAnError stamp: 'ldmaf 6/13/2022 00:32:32'!
ERROR!

!testRun: #TusLibrosInterfaceTest #test12CheckoutWithAnExpiredCartShouldThrowAnError stamp: 'ldmaf 6/13/2022 00:32:32'!
ERROR!

!methodRemoval: TusLibrosInterfaceTest #assert:description: stamp: 'ldmaf 6/13/2022 00:32:43'!
assert: aFalse description: aBlockClosure 
	self shouldBeImplemented.!

!testRun: #TusLibrosInterfaceTest #test12CheckoutWithAnExpiredCartShouldThrowAnError stamp: 'ldmaf 6/13/2022 00:32:52'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test12CheckoutWithAnExpiredCartShouldThrowAnError stamp: 'ldmaf 6/13/2022 00:32:52'!
FAILURE!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/13/2022 00:34:02'!
checkoutOf: aCartId with: aCreditCard at: aDateTime
	|total cashier sale cartOwner purchases|
	(self hasCart: aCartId) ifFalse: [self error: 'Non Existing Cart Id.'].
	((self assertCartIsExpired: aCartId)) ifTrue: [self error: 'Cart Expired.'].
	
	cashier _ Cashier toCheckout: (carts at: aCartId) 
				     	charging: aCreditCard 
					throught: self 
					on: (DateAndTime now) 
					registeringOn: salesBook.
					
	total _ cashier checkOut.
	sale _ (self generateSaleOf: aCartId withTotal: total).
	
	cartOwner _ (clientsCarts at: aCartId).
	purchases _ (self fetchClientPurchases: cartOwner).
	purchases add: sale.
	
	carts removeKey: aCartId.
	clientsCarts removeKey: aCartId.
	
	^sale.! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/13/2022 00:35:27'!
assertCartIsExpired: aCartId at: aDateTime

	^ ((aDateTime) - (cartsTimestamps at: aCartId)) totalMinutes >= 30! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/13/2022 00:35:40' prior: 50497905!
checkoutOf: aCartId with: aCreditCard at: aDateTime
	|total cashier sale cartOwner purchases|
	(self hasCart: aCartId) ifFalse: [self error: 'Non Existing Cart Id.'].
	((self assertCartIsExpired: aCartId at: aDateTime)) ifTrue: [self error: 'Cart Expired.'].
	
	cashier _ Cashier toCheckout: (carts at: aCartId) 
				     	charging: aCreditCard 
					throught: self 
					on: (DateAndTime now) 
					registeringOn: salesBook.
					
	total _ cashier checkOut.
	sale _ (self generateSaleOf: aCartId withTotal: total).
	
	cartOwner _ (clientsCarts at: aCartId).
	purchases _ (self fetchClientPurchases: cartOwner).
	purchases add: sale.
	
	carts removeKey: aCartId.
	clientsCarts removeKey: aCartId.
	
	^sale.! !

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/13/2022 00:35:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/13/2022 00:35:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/13/2022 00:35:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/13/2022 00:35:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/13/2022 00:35:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/13/2022 00:35:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/13/2022 00:35:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/13/2022 00:35:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/13/2022 00:35:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/13/2022 00:35:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CheckoutWithAValidCreditCardCreatesACorrectSaleAndRemovesTheCartFromTheService stamp: 'ldmaf 6/13/2022 00:35:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CheckoutWithAnInvalidCreditCardThrowsAnExpiredCardErrorAndKeepsTheCartInTheService stamp: 'ldmaf 6/13/2022 00:35:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutWithAnExpiredCartShouldThrowAnError stamp: 'ldmaf 6/13/2022 00:35:44'!
FAILURE!

!testRun: #TusLibrosInterfaceTest #test13ListPurchasesBeforeDoingAnyCheckoutReturnsAnEmptyListOfPurchases stamp: 'ldmaf 6/13/2022 00:35:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/13/2022 00:35:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15ListPurchasesAfterDoingManyCheckoutsReturnsAListWithManyPurchases stamp: 'ldmaf 6/13/2022 00:35:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListPurchasesWithAnInvalidUserThrowsAnError stamp: 'ldmaf 6/13/2022 00:35:44'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutWithAnExpiredCartShouldThrowAnError stamp: 'ldmaf 6/13/2022 00:35:44'!
FAILURE!

(DateAndTime tomorrow).!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:36:59' prior: 50497840!
test12CheckoutWithAnExpiredCartShouldThrowAnError
	| clientId clientPassword service creditCard cartId creationTimeInThePast xxx|
	creationTimeInThePast _ (DateAndTime now) subtractDuration: (Duration minutes: 29).
	xxx _ (DateAndTime tomorrow).
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosFakeService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: creationTimeInThePast.
	service add: 10 of: '9780764548345' to: cartId.
	self should: [service checkoutOf: cartId with: creditCard at: xxx] raise: Error  withMessageText: 'Cart Expired.'.
! !

!testRun: #TusLibrosInterfaceTest #test12CheckoutWithAnExpiredCartShouldThrowAnError stamp: 'ldmaf 6/13/2022 00:37:01'!
PASSED!
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/13/2022 00:37:45' prior: 50496466!
checkoutOf: aCartId with: aCreditCard
	|total cashier sale cartOwner purchases|
	self checkoutOf: aCartId with: aCreditCard at: DateAndTime now.
	(self hasCart: aCartId) ifFalse: [self error: 'Non Existing Cart Id.'].
	((self assertCartIsExpired: aCartId)) ifTrue: [self error: 'Cart Expired.'].
	
	cashier _ Cashier toCheckout: (carts at: aCartId) 
				     	charging: aCreditCard 
					throught: self 
					on: (DateAndTime now) 
					registeringOn: salesBook.
					
	total _ cashier checkOut.
	sale _ (self generateSaleOf: aCartId withTotal: total).
	
	cartOwner _ (clientsCarts at: aCartId).
	purchases _ (self fetchClientPurchases: cartOwner).
	purchases add: sale.
	
	carts removeKey: aCartId.
	clientsCarts removeKey: aCartId.
	
	^sale.! !
!TusLibrosFakeService methodsFor: 'operations' stamp: 'ldmaf 6/13/2022 00:38:10' prior: 50498076!
checkoutOf: aCartId with: aCreditCard
	^ (self checkoutOf: aCartId with: aCreditCard at: DateAndTime now).
	! !

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/13/2022 00:38:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/13/2022 00:38:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/13/2022 00:38:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/13/2022 00:38:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/13/2022 00:38:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/13/2022 00:38:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/13/2022 00:38:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/13/2022 00:38:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/13/2022 00:38:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/13/2022 00:38:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CheckoutWithAValidCreditCardCreatesACorrectSaleAndRemovesTheCartFromTheService stamp: 'ldmaf 6/13/2022 00:38:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CheckoutWithAnInvalidCreditCardThrowsAnExpiredCardErrorAndKeepsTheCartInTheService stamp: 'ldmaf 6/13/2022 00:38:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutWithAnExpiredCartShouldThrowAnError stamp: 'ldmaf 6/13/2022 00:38:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13ListPurchasesBeforeDoingAnyCheckoutReturnsAnEmptyListOfPurchases stamp: 'ldmaf 6/13/2022 00:38:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/13/2022 00:38:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15ListPurchasesAfterDoingManyCheckoutsReturnsAListWithManyPurchases stamp: 'ldmaf 6/13/2022 00:38:12'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListPurchasesWithAnInvalidUserThrowsAnError stamp: 'ldmaf 6/13/2022 00:38:12'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CheckoutWithAValidCreditCardCreatesACorrectSaleAndRemovesTheCartFromTheService stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CheckoutWithAnInvalidCreditCardThrowsAnExpiredCardErrorAndKeepsTheCartInTheService stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutWithAnExpiredCartShouldThrowAnError stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13ListPurchasesBeforeDoingAnyCheckoutReturnsAnEmptyListOfPurchases stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15ListPurchasesAfterDoingManyCheckoutsReturnsAListWithManyPurchases stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListPurchasesWithAnInvalidUserThrowsAnError stamp: 'ldmaf 6/13/2022 00:38:15'!
PASSED!
!Behavior method!
initialize
	(today _ [
	(DateAndTime
		cover: (23 to: 33)
		declaredAt: (23 to: 33)) now ] valueCoveringAll:
		{35 to: 37})
		cover: (14 to: 18)
		declaredAt: (14 to: 18).! !
!Behavior method!
createCart
	^ [
	(Cart
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) acceptingItemsOf:
		([
		(self coverAll:
			{39 to: 42}) defaultCatalog ] valueCoveringAll:
			{44 to: 57}) ] valueCoveringAll:
		{21 to: 37}.! !
!Behavior method!
defaultCatalog
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(Dictionary
		cover: (21 to: 30)
		declaredAt: (21 to: 30)) new ] valueCoveringAll:
		{32 to: 34}.
	[
	cascadeReceiver
		at:
			([
			(self coverAll:
				{42 to: 45}) itemSellByTheStore ] valueCoveringAll:
				{47 to: 64})
		put:
			([
			(self coverAll:
				{71 to: 74}) itemSellByTheStorePrice ] valueCoveringAll:
				{76 to: 98}) ] valueCoveringAll:
		{38 to: 40. 66 to: 69}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{103 to: 110} ] value.! !
!Behavior method!
itemSellByTheStore
	^ 'validBook' coverAll:
		{25 to: 35}.! !
!Behavior method!
itemSellByTheStorePrice
	^ 10 coverAll:
		{29 to: 30}.! !
!Behavior method!
acceptingItemsOf: aCatalog
	^ [
	([
	(self coverAll:
		{31 to: 34}) new ] valueCoveringAll:
		{36 to: 38}) initializeAcceptingItemsOf:
		(aCatalog
			cover: (68 to: 75)
			declaredAt: (19 to: 26)) ] valueCoveringAll:
		{40 to: 66}.! !
!Behavior method!
initializeAcceptingItemsOf: aCatalog
	(catalog _ aCatalog
		cover: (51 to: 58)
		declaredAt: (29 to: 36))
		cover: (40 to: 46)
		declaredAt: (40 to: 46).
	(items _ [
	(OrderedCollection
		cover: (71 to: 87)
		declaredAt: (71 to: 87)) new ] valueCoveringAll:
		{89 to: 91})
		cover: (62 to: 66)
		declaredAt: (62 to: 66).! !
!Behavior method!
isEmpty
	^ [
	(items
		cover: (13 to: 17)
		declaredAt: (13 to: 17)) isEmpty ] valueCoveringAll:
		{19 to: 25}.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!
!Behavior method!
itemNotSellByTheStore
	^ 'invalidBook' coverAll:
		{27 to: 39}.! !
!Behavior method!
add: anItem
	^ [
	(self coverAll:
		{17 to: 20})
		add:
			(1 coverAll:
				{27 to: 27})
		of:
			(anItem
				cover: (33 to: 38)
				declaredAt: (6 to: 11)) ] valueCoveringAll:
		{22 to: 25. 29 to: 31}.! !
!Behavior method!
add: aQuantity of: anItem
	[
	(self coverAll:
		{29 to: 32}) assertIsValidQuantity:
		(aQuantity
			cover: (57 to: 65)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{34 to: 55}.
	[
	(self coverAll:
		{69 to: 72}) assertIsValidItem:
		(anItem
			cover: (93 to: 98)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{74 to: 91}.
	[
	(1 coverAll:
		{103 to: 103})
		to:
			(aQuantity
				cover: (109 to: 117)
				declaredAt: (6 to: 14))
		do: [ :aNumber |
			[
			(items
				cover: (136 to: 140)
				declaredAt: (136 to: 140)) add:
				(anItem
					cover: (147 to: 152)
					declaredAt: (20 to: 25)) ] valueCoveringAll:
				{142 to: 145} ]] valueCoveringAll:
		{105 to: 107. 119 to: 121}.! !
!Behavior method!
assertIsValidQuantity: aQuantity
	[
	([
	(aQuantity
		cover: (36 to: 44)
		declaredAt: (24 to: 32)) strictlyPositive ] valueCoveringAll:
		{46 to: 61}) ifFalse: [
		[
		(self coverAll:
			{74 to: 77}) error:
			([
			(self coverAll:
				{86 to: 89}) invalidQuantityErrorMessage ] valueCoveringAll:
				{91 to: 117}) ] valueCoveringAll:
			{79 to: 84} ]] valueCoveringAll:
		{63 to: 70}.! !
!Behavior method!
assertIsValidItem: anItem
	[
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anItem
			cover: (51 to: 56)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			(self coverAll:
				{82 to: 85}) invalidItemErrorMessage ] valueCoveringAll:
				{87 to: 109}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
invalidItemErrorMessage
	^ 'Item is not in catalog' coverAll:
		{29 to: 52}.! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!
!Behavior method!
invalidQuantityErrorMessage
	^ 'Invalid number of items' coverAll:
		{33 to: 57}.! !

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!
!Behavior method!
includes: anItem
	^ [
	(items
		cover: (21 to: 25)
		declaredAt: (21 to: 25)) includes:
		(anItem
			cover: (37 to: 42)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{27 to: 35}.! !

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!
!Behavior method!
occurrencesOf: anItem
	^ [
	(items
		cover: (26 to: 30)
		declaredAt: (26 to: 30)) occurrencesOf:
		(anItem
			cover: (47 to: 52)
			declaredAt: (16 to: 21)) ] valueCoveringAll:
		{32 to: 45}.! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!
!Behavior method!
notExpiredCreditCard
	^ [
	(CreditCard
		cover: (26 to: 35)
		declaredAt: (26 to: 35)) expiringOn:
		([
		(Month
			cover: (50 to: 54)
			declaredAt: (50 to: 54))
			month:
				([
				(today
					cover: (63 to: 67)
					declaredAt: (63 to: 67)) monthIndex ] valueCoveringAll:
					{69 to: 78})
			year:
				([
				([
				(today
					cover: (86 to: 90)
					declaredAt: (63 to: 67)) yearNumber ] valueCoveringAll:
					{92 to: 101}) +
					(1 coverAll:
						{105 to: 105}) ] valueCoveringAll:
					{103 to: 103}) ] valueCoveringAll:
			{56 to: 61. 80 to: 84}) ] valueCoveringAll:
		{37 to: 47}.! !
!Behavior method!
expiringOn: aMonth
	^ [
	([
	(self coverAll:
		{25 to: 28}) new ] valueCoveringAll:
		{30 to: 32}) initializeExpiringOn:
		(aMonth
			cover: (56 to: 61)
			declaredAt: (13 to: 18)) ] valueCoveringAll:
		{34 to: 54}.! !
!Behavior method!
initializeExpiringOn: aMonth
	(expiration _ aMonth
		cover: (48 to: 53)
		declaredAt: (23 to: 28))
		cover: (34 to: 43)
		declaredAt: (34 to: 43).! !
!Behavior method!
today
	^ today
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !
!Behavior method!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook
	[
	(self coverAll:
		{109 to: 112}) assertIsNotEmpty:
		(aCart
			cover: (132 to: 136)
			declaredAt: (13 to: 17)) ] valueCoveringAll:
		{114 to: 130}.
	[
	(self coverAll:
		{140 to: 143})
		assertIsNotExpired:
			(aCreditCard
				cover: (165 to: 175)
				declaredAt: (29 to: 39))
		on:
			(aDate
				cover: (181 to: 185)
				declaredAt: (74 to: 78)) ] valueCoveringAll:
		{145 to: 163. 177 to: 179}.
	^ [
	([
	(self coverAll:
		{192 to: 195}) new ] valueCoveringAll:
		{197 to: 199})
		initializeToCheckout:
			(aCart
				cover: (223 to: 227)
				declaredAt: (13 to: 17))
		charging:
			(aCreditCard
				cover: (239 to: 249)
				declaredAt: (29 to: 39))
		throught:
			(aMerchantProcessor
				cover: (261 to: 278)
				declaredAt: (51 to: 68))
		registeringOn:
			(aSalesBook
				cover: (295 to: 304)
				declaredAt: (95 to: 104)) ] valueCoveringAll:
		{201 to: 221. 229 to: 237. 251 to: 259. 280 to: 293}.! !
!Behavior method!
assertIsNotEmpty: aCart
	[
	([
	(aCart
		cover: (29 to: 33)
		declaredAt: (19 to: 23)) isEmpty ] valueCoveringAll:
		{35 to: 41}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(self coverAll:
				{64 to: 67}) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
				{69 to: 97}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
cartCanNotBeEmptyErrorMessage
	^ 'Can not check out an empty cart' coverAll:
		{35 to: 67}.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!
!Behavior method!
assertIsNotExpired: aCreditCard on: aDate
	[
	([
	(aCreditCard
		cover: (47 to: 57)
		declaredAt: (21 to: 31)) isExpiredOn:
		(aDate
			cover: (72 to: 76)
			declaredAt: (37 to: 41)) ] valueCoveringAll:
		{59 to: 70}) ifTrue: [
		[
		(self coverAll:
			{89 to: 92}) error:
			([
			(self coverAll:
				{101 to: 104}) canNotChargeAnExpiredCreditCardErrorMessage ] valueCoveringAll:
				{106 to: 148}) ] valueCoveringAll:
			{94 to: 99} ]] valueCoveringAll:
		{79 to: 85}.! !
!Behavior method!
isExpiredOn: aDate
	^ [
	([
	(expiration
		cover: (25 to: 34)
		declaredAt: (25 to: 34)) start ] valueCoveringAll:
		{36 to: 40}) <
		([
		([
		(Month
			cover: (45 to: 49)
			declaredAt: (45 to: 49))
			month:
				([
				(aDate
					cover: (58 to: 62)
					declaredAt: (14 to: 18)) monthIndex ] valueCoveringAll:
					{64 to: 73})
			year:
				([
				(aDate
					cover: (81 to: 85)
					declaredAt: (14 to: 18)) yearNumber ] valueCoveringAll:
					{87 to: 96}) ] valueCoveringAll:
			{51 to: 56. 75 to: 79}) start ] valueCoveringAll:
			{99 to: 103}) ] valueCoveringAll:
		{42 to: 42}.! !
!Behavior method!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook
	(cart _ aCart
		cover: (117 to: 121)
		declaredAt: (23 to: 27))
		cover: (109 to: 112)
		declaredAt: (109 to: 112).
	(creditCard _ aCreditCard
		cover: (139 to: 149)
		declaredAt: (39 to: 49))
		cover: (125 to: 134)
		declaredAt: (125 to: 134).
	(merchantProcessor _ aMerchantProcessor
		cover: (174 to: 191)
		declaredAt: (61 to: 78))
		cover: (153 to: 169)
		declaredAt: (153 to: 169).
	(salesBook _ aSalesBook
		cover: (208 to: 217)
		declaredAt: (95 to: 104))
		cover: (195 to: 203)
		declaredAt: (195 to: 203).! !
!Behavior method!
checkOut
	[
	(self coverAll:
		{12 to: 15}) calculateTotal ] valueCoveringAll:
		{17 to: 30}.
	[
	(self coverAll:
		{34 to: 37}) debitTotal ] valueCoveringAll:
		{39 to: 48}.
	[
	(self coverAll:
		{52 to: 55}) registerSale ] valueCoveringAll:
		{57 to: 68}.
	^ total
		cover: (75 to: 79)
		declaredAt: (75 to: 79).! !
!Behavior method!
calculateTotal
	(total _ [
	(cart
		cover: (27 to: 30)
		declaredAt: (27 to: 30)) total ] valueCoveringAll:
		{32 to: 36})
		cover: (18 to: 22)
		declaredAt: (18 to: 22).! !
!Behavior method!
total
	^ [
	(items
		cover: (11 to: 15)
		declaredAt: (11 to: 15)) sum: [ :anItem |
		[
		(catalog
			cover: (34 to: 40)
			declaredAt: (34 to: 40)) at:
			(anItem
				cover: (46 to: 51)
				declaredAt: (25 to: 30)) ] valueCoveringAll:
			{42 to: 44} ]] valueCoveringAll:
		{17 to: 20}.! !
!Behavior method!
debitTotal
	[
	(merchantProcessor
		cover: (14 to: 30)
		declaredAt: (14 to: 30))
		debit:
			(total
				cover: (39 to: 43)
				declaredAt: (39 to: 43))
		from:
			(creditCard
				cover: (51 to: 60)
				declaredAt: (51 to: 60)) ] valueCoveringAll:
		{32 to: 37. 45 to: 49}.! !
!Behavior method!
registerSale
	[
	(salesBook
		cover: (16 to: 24)
		declaredAt: (16 to: 24)) add:
		([
		(self coverAll:
			{31 to: 34}) createSale ] valueCoveringAll:
			{36 to: 45}) ] valueCoveringAll:
		{26 to: 29}.! !
!Behavior method!
createSale
	^ [
	(Sale
		cover: (16 to: 19)
		declaredAt: (16 to: 19))
		of:
			(total
				cover: (25 to: 29)
				declaredAt: (25 to: 29))
		with:
			([
			(cart
				cover: (38 to: 41)
				declaredAt: (38 to: 41)) items ] valueCoveringAll:
				{43 to: 47}) ] valueCoveringAll:
		{21 to: 23. 31 to: 35}.! !
!Behavior method!
items
	^ [
	(items
		cover: (10 to: 14)
		declaredAt: (10 to: 14)) copy ] valueCoveringAll:
		{16 to: 19}.! !
!Behavior method!
of: aTotal with: aCollectionOfItems
	"should assert total is not negative or 0!!"
	^ [
	([
	(self coverAll:
		{85 to: 88}) new ] valueCoveringAll:
		{90 to: 92})
		initializeTotal:
			(aTotal
				cover: (111 to: 116)
				declaredAt: (5 to: 10))
		with:
			(aCollectionOfItems
				cover: (124 to: 141)
				declaredAt: (18 to: 35)) ] valueCoveringAll:
		{94 to: 109. 118 to: 122}.! !
!Behavior method!
initializeTotal: aTotal with: aCollectionOfItems
	(total _ aTotal
		cover: (61 to: 66)
		declaredAt: (18 to: 23))
		cover: (52 to: 56)
		declaredAt: (52 to: 56).
	(id _ 1 coverAll:
		{76 to: 76})
		cover: (70 to: 71)
		declaredAt: (70 to: 71).
	(purchasedItems _ aCollectionOfItems
		cover: (98 to: 115)
		declaredAt: (31 to: 48))
		cover: (80 to: 93)
		declaredAt: (80 to: 93).! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!
!Behavior method!
expiredCreditCard
	^ [
	(CreditCard
		cover: (23 to: 32)
		declaredAt: (23 to: 32)) expiringOn:
		([
		(Month
			cover: (47 to: 51)
			declaredAt: (47 to: 51))
			month:
				([
				(today
					cover: (60 to: 64)
					declaredAt: (60 to: 64)) monthIndex ] valueCoveringAll:
					{66 to: 75})
			year:
				([
				([
				(today
					cover: (83 to: 87)
					declaredAt: (60 to: 64)) yearNumber ] valueCoveringAll:
					{89 to: 98}) -
					(1 coverAll:
						{102 to: 102}) ] valueCoveringAll:
					{100 to: 100}) ] valueCoveringAll:
			{53 to: 58. 77 to: 81}) ] valueCoveringAll:
		{34 to: 44}.! !
!Behavior method!
canNotChargeAnExpiredCreditCardErrorMessage
	^ 'Can not charge an expired credit card' coverAll:
		{49 to: 87}.! !

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!
!Behavior method!
total
	^ total
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!
!Behavior method!
creditCardHasNoCreditErrorMessage
	^ 'Credit card has no credit' coverAll:
		{39 to: 65}.! !

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!
!Behavior method!
with: aDictionary
	^ [
	([
	(self coverAll:
		{22 to: 25}) new ] valueCoveringAll:
		{27 to: 29}) initializeWith:
		(aDictionary
			cover: (47 to: 57)
			declaredAt: (7 to: 17)) ] valueCoveringAll:
		{31 to: 45}.! !
!Behavior method!
initializeWith: aDictionary
	(users _ aDictionary
		cover: (39 to: 49)
		declaredAt: (17 to: 27))
		cover: (31 to: 35)
		declaredAt: (31 to: 35).
	(carts _ [
	(Dictionary
		cover: (61 to: 70)
		declaredAt: (61 to: 70)) new ] valueCoveringAll:
		{72 to: 74})
		cover: (53 to: 57)
		declaredAt: (53 to: 57).
	(tusLibrosCatalogue _ [
	(Dictionary
		cover: (99 to: 108)
		declaredAt: (61 to: 70)) new ] valueCoveringAll:
		{110 to: 112})
		cover: (78 to: 95)
		declaredAt: (78 to: 95).
	(cartsTimestamps _ [
	(Dictionary
		cover: (134 to: 143)
		declaredAt: (61 to: 70)) new ] valueCoveringAll:
		{145 to: 147})
		cover: (116 to: 130)
		declaredAt: (116 to: 130).
	(debitBehavior _ [ :anAmount :aCreditCard |
	nil ])
		cover: (151 to: 163)
		declaredAt: (151 to: 163).
	(salesBook _ [
	(OrderedCollection
		cover: (211 to: 227)
		declaredAt: (211 to: 227)) new ] valueCoveringAll:
		{229 to: 231})
		cover: (199 to: 207)
		declaredAt: (199 to: 207).
	(clientsCarts _ [
	(Dictionary
		cover: (250 to: 259)
		declaredAt: (61 to: 70)) new ] valueCoveringAll:
		{261 to: 263})
		cover: (235 to: 246)
		declaredAt: (235 to: 246).
	(clientsPurchases _ [
	(Dictionary
		cover: (286 to: 295)
		declaredAt: (61 to: 70)) new ] valueCoveringAll:
		{297 to: 299})
		cover: (267 to: 282)
		declaredAt: (267 to: 282).
	[
	(tusLibrosCatalogue
		cover: (303 to: 320)
		declaredAt: (78 to: 95)) add:
		([
		('9780764548345' coverAll:
			{328 to: 342}) ->
			(100 coverAll:
				{345 to: 347}) ] valueCoveringAll:
			{343 to: 344}) ] valueCoveringAll:
		{322 to: 325}.
	[
	(tusLibrosCatalogue
		cover: (352 to: 369)
		declaredAt: (78 to: 95)) add:
		([
		('9788495070524' coverAll:
			{377 to: 391}) ->
			(73 coverAll:
				{396 to: 397}) ] valueCoveringAll:
			{393 to: 394}) ] valueCoveringAll:
		{371 to: 374}.
	[
	(tusLibrosCatalogue
		cover: (402 to: 419)
		declaredAt: (78 to: 95)) add:
		([
		('9780764548345' coverAll:
			{427 to: 441}) ->
			(12 coverAll:
				{446 to: 447}) ] valueCoveringAll:
			{443 to: 444}) ] valueCoveringAll:
		{421 to: 424}.
	[
	(tusLibrosCatalogue
		cover: (452 to: 469)
		declaredAt: (78 to: 95)) add:
		([
		('9789871497522' coverAll:
			{477 to: 491}) ->
			(59 coverAll:
				{496 to: 497}) ] valueCoveringAll:
			{493 to: 494}) ] valueCoveringAll:
		{471 to: 474}.! !
!Behavior method!
createCartWith: aClientId and: aPassword at: aDateAndTime
	| id |
	[
	(self coverAll:
		{66 to: 69})
		validateCredentialsOf:
			(aClientId
				cover: (94 to: 102)
				declaredAt: (17 to: 25))
		with:
			(aPassword
				cover: (110 to: 118)
				declaredAt: (32 to: 40)) ] valueCoveringAll:
		{71 to: 92. 104 to: 108}.
	(id _ [
	(self coverAll:
		{129 to: 132}) generateRandomId ] valueCoveringAll:
		{134 to: 149})
		cover: (124 to: 125)
		declaredAt: (61 to: 62).
	[
	(carts
		cover: (229 to: 233)
		declaredAt: (229 to: 233)) add:
		([
		(id
			cover: (241 to: 242)
			declaredAt: (61 to: 62)) ->
			([
			(Cart
				cover: (248 to: 251)
				declaredAt: (248 to: 251)) acceptingItemsOf:
				(tusLibrosCatalogue
					cover: (271 to: 288)
					declaredAt: (271 to: 288)) ] valueCoveringAll:
				{253 to: 269}) ] valueCoveringAll:
			{244 to: 245}) ] valueCoveringAll:
		{235 to: 238}.
	[
	(cartsTimestamps
		cover: (294 to: 308)
		declaredAt: (294 to: 308)) add:
		([
		(id
			cover: (316 to: 317)
			declaredAt: (61 to: 62)) ->
			(aDateAndTime
				cover: (322 to: 333)
				declaredAt: (46 to: 57)) ] valueCoveringAll:
			{319 to: 320}) ] valueCoveringAll:
		{310 to: 313}.
	[
	(clientsCarts
		cover: (338 to: 349)
		declaredAt: (338 to: 349)) add:
		([
		(id
			cover: (356 to: 357)
			declaredAt: (61 to: 62)) ->
			(aClientId
				cover: (362 to: 370)
				declaredAt: (17 to: 25)) ] valueCoveringAll:
			{359 to: 360}) ] valueCoveringAll:
		{351 to: 354}.
	^ id
		cover: (375 to: 376)
		declaredAt: (61 to: 62).! !
!Behavior method!
validateCredentialsOf: aClientId with: aClientPassword
	^ [
	([
	(users
		cover: (61 to: 65)
		declaredAt: (61 to: 65))
		at:
			(aClientId
				cover: (71 to: 79)
				declaredAt: (24 to: 32))
		ifAbsent: [
			[
			(self coverAll:
				{92 to: 95}) error:
				('Invalid Credentials.' coverAll:
					{104 to: 125}) ] valueCoveringAll:
				{97 to: 102} ]] valueCoveringAll:
		{67 to: 69. 81 to: 89}) =
		(aClientPassword
			cover: (131 to: 145)
			declaredAt: (40 to: 54)) ] valueCoveringAll:
		{129 to: 129}.! !
!Behavior method!
generateRandomId
	^ [
	([
	([
	(Random
		cover: (23 to: 28)
		declaredAt: (23 to: 28)) next ] valueCoveringAll:
		{30 to: 33}) *
		(547 coverAll:
			{37 to: 39}) ] valueCoveringAll:
		{35 to: 35}) asInteger ] valueCoveringAll:
		{42 to: 50}.! !
!Behavior method!
listCart: aCartId
	| listOfBooks items |
	[
	([
	(self coverAll:
		{45 to: 48}) hasCart:
		(aCartId
			cover: (59 to: 65)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{50 to: 57}) ifFalse: [
		[
		(self coverAll:
			{78 to: 81}) error:
			('Non Existing Cart Id.' coverAll:
				{90 to: 112}) ] valueCoveringAll:
			{83 to: 88} ]] valueCoveringAll:
		{68 to: 75}.
	(listOfBooks _ [
	(Dictionary
		cover: (131 to: 140)
		declaredAt: (131 to: 140)) new ] valueCoveringAll:
		{142 to: 144})
		cover: (117 to: 127)
		declaredAt: (23 to: 33).
	(items _ [
	([
	(carts
		cover: (158 to: 162)
		declaredAt: (158 to: 162)) at:
		(aCartId
			cover: (168 to: 174)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{164 to: 166}) items ] valueCoveringAll:
		{177 to: 181})
		cover: (148 to: 152)
		declaredAt: (35 to: 39).
	[
	(items
		cover: (185 to: 189)
		declaredAt: (35 to: 39)) do: [ :aBook |
		[
		(listOfBooks
			cover: (205 to: 215)
			declaredAt: (23 to: 33)) add:
			([
			(aBook
				cover: (222 to: 226)
				declaredAt: (197 to: 201)) ->
				([
				(items
					cover: (230 to: 234)
					declaredAt: (35 to: 39)) occurrencesOf:
					(aBook
						cover: (251 to: 255)
						declaredAt: (197 to: 201)) ] valueCoveringAll:
					{236 to: 249}) ] valueCoveringAll:
				{227 to: 228}) ] valueCoveringAll:
			{217 to: 220} ]] valueCoveringAll:
		{191 to: 193}.
	^ listOfBooks
		cover: (262 to: 272)
		declaredAt: (23 to: 33).! !
!Behavior method!
hasCart: aCartId
	^ [
	([
	(carts
		cover: (23 to: 27)
		declaredAt: (23 to: 27)) keys ] valueCoveringAll:
		{29 to: 32}) includes:
		(aCartId
			cover: (44 to: 50)
			declaredAt: (10 to: 16)) ] valueCoveringAll:
		{34 to: 42}.! !

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!
!Behavior method!
add: anAmount of: anIsbn to: aCartId
	[
	([
	(self coverAll:
		{40 to: 43}) hasCart:
		(aCartId
			cover: (54 to: 60)
			declaredAt: (30 to: 36)) ] valueCoveringAll:
		{45 to: 52}) ifFalse: [
		[
		(self coverAll:
			{73 to: 76}) error:
			('Non Existing Cart Id.' coverAll:
				{85 to: 107}) ] valueCoveringAll:
			{78 to: 83} ]] valueCoveringAll:
		{63 to: 70}.
	[
	([
	(self coverAll:
		{115 to: 118}) assertCartIsExpired:
		(aCartId
			cover: (141 to: 147)
			declaredAt: (30 to: 36)) ] valueCoveringAll:
		{120 to: 139}) ifTrue: [
		[
		(self coverAll:
			{160 to: 163}) error:
			('Cart Expired.' coverAll:
				{172 to: 186}) ] valueCoveringAll:
			{165 to: 170} ]] valueCoveringAll:
		{151 to: 157}.
	[
	([
	(carts
		cover: (192 to: 196)
		declaredAt: (192 to: 196)) at:
		(aCartId
			cover: (202 to: 208)
			declaredAt: (30 to: 36)) ] valueCoveringAll:
		{198 to: 200})
		add:
			(anAmount
				cover: (216 to: 223)
				declaredAt: (6 to: 13))
		of:
			(anIsbn
				cover: (229 to: 234)
				declaredAt: (19 to: 24)) ] valueCoveringAll:
		{211 to: 214. 225 to: 227}.! !
!Behavior method!
assertCartIsExpired: aCartId
	^ [
	([
	([
	([
	(DateAndTime
		cover: (36 to: 46)
		declaredAt: (36 to: 46)) now ] valueCoveringAll:
		{48 to: 50}) -
		([
		(cartsTimestamps
			cover: (56 to: 70)
			declaredAt: (56 to: 70)) at:
			(aCartId
				cover: (76 to: 82)
				declaredAt: (22 to: 28)) ] valueCoveringAll:
			{72 to: 74}) ] valueCoveringAll:
		{53 to: 53}) totalMinutes ] valueCoveringAll:
		{86 to: 97}) >=
		(30 coverAll:
			{102 to: 103}) ] valueCoveringAll:
		{99 to: 100}.! !

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!
!Behavior method!
expiringOn: aMonth withNumber: aCreditCardNumber andOwner: anOwner
	^ [
	([
	(self coverAll:
		{74 to: 77}) new ] valueCoveringAll:
		{79 to: 81})
		initializeExpiringOn:
			(aMonth
				cover: (105 to: 110)
				declaredAt: (13 to: 18))
		withNumber:
			(aCreditCardNumber
				cover: (124 to: 140)
				declaredAt: (32 to: 48))
		andOwner:
			(anOwner
				cover: (152 to: 158)
				declaredAt: (60 to: 66)) ] valueCoveringAll:
		{83 to: 103. 112 to: 122. 142 to: 150}.! !
!Behavior method!
initializeExpiringOn: aMonth withNumber: aCreditCardNumber andOwner: anOwner
	(expiration _ aMonth
		cover: (95 to: 100)
		declaredAt: (23 to: 28))
		cover: (81 to: 90)
		declaredAt: (81 to: 90).
	(number _ aCreditCardNumber
		cover: (114 to: 130)
		declaredAt: (42 to: 58))
		cover: (104 to: 109)
		declaredAt: (104 to: 109).
	(owner _ anOwner
		cover: (143 to: 149)
		declaredAt: (70 to: 76))
		cover: (134 to: 138)
		declaredAt: (134 to: 138).! !
!Behavior method!
checkoutOf: aCartId with: aCreditCard
	^ [
	(self coverAll:
		{43 to: 46})
		checkoutOf:
			(aCartId
				cover: (60 to: 66)
				declaredAt: (13 to: 19))
		with:
			(aCreditCard
				cover: (74 to: 84)
				declaredAt: (27 to: 37))
		at:
			([
			(DateAndTime
				cover: (90 to: 100)
				declaredAt: (90 to: 100)) now ] valueCoveringAll:
				{102 to: 104}) ] valueCoveringAll:
		{48 to: 58. 68 to: 72. 86 to: 88}.! !
!Behavior method!
checkoutOf: aCartId with: aCreditCard at: aDateTime
	| total cashier sale cartOwner purchases |
	[
	([
	(self coverAll:
		{97 to: 100}) hasCart:
		(aCartId
			cover: (111 to: 117)
			declaredAt: (13 to: 19)) ] valueCoveringAll:
		{102 to: 109}) ifFalse: [
		[
		(self coverAll:
			{130 to: 133}) error:
			('Non Existing Cart Id.' coverAll:
				{142 to: 164}) ] valueCoveringAll:
			{135 to: 140} ]] valueCoveringAll:
		{120 to: 127}.
	[
	([
	(self coverAll:
		{171 to: 174})
		assertCartIsExpired:
			(aCartId
				cover: (197 to: 203)
				declaredAt: (13 to: 19))
		at:
			(aDateTime
				cover: (209 to: 217)
				declaredAt: (43 to: 51)) ] valueCoveringAll:
		{176 to: 195. 205 to: 207}) ifTrue: [
		[
		(self coverAll:
			{230 to: 233}) error:
			('Cart Expired.' coverAll:
				{242 to: 256}) ] valueCoveringAll:
			{235 to: 240} ]] valueCoveringAll:
		{221 to: 227}.
	(cashier _ [
	(Cashier
		cover: (273 to: 279)
		declaredAt: (273 to: 279))
		toCheckout:
			([
			(carts
				cover: (294 to: 298)
				declaredAt: (294 to: 298)) at:
				(aCartId
					cover: (304 to: 310)
					declaredAt: (13 to: 19)) ] valueCoveringAll:
				{300 to: 302})
		charging:
			(aCreditCard
				cover: (334 to: 344)
				declaredAt: (27 to: 37))
		throught:
			(self coverAll:
				{362 to: 365})
		on:
			([
			(DateAndTime
				cover: (378 to: 388)
				declaredAt: (378 to: 388)) now ] valueCoveringAll:
				{390 to: 392})
		registeringOn:
			(salesBook
				cover: (416 to: 424)
				declaredAt: (416 to: 424)) ] valueCoveringAll:
		{281 to: 291. 324 to: 332. 352 to: 360. 373 to: 375. 401 to: 414})
		cover: (263 to: 269)
		declaredAt: (61 to: 67).
	(total _ [
	(cashier
		cover: (442 to: 448)
		declaredAt: (61 to: 67)) checkOut ] valueCoveringAll:
		{450 to: 457})
		cover: (434 to: 438)
		declaredAt: (55 to: 59).
	(sale _ [
	(self coverAll:
		{469 to: 472})
		generateSaleOf:
			(aCartId
				cover: (490 to: 496)
				declaredAt: (13 to: 19))
		withTotal:
			(total
				cover: (509 to: 513)
				declaredAt: (55 to: 59)) ] valueCoveringAll:
		{474 to: 488. 498 to: 507})
		cover: (461 to: 464)
		declaredAt: (69 to: 72).
	(cartOwner _ [
	(clientsCarts
		cover: (533 to: 544)
		declaredAt: (533 to: 544)) at:
		(aCartId
			cover: (550 to: 556)
			declaredAt: (13 to: 19)) ] valueCoveringAll:
		{546 to: 548})
		cover: (520 to: 528)
		declaredAt: (74 to: 82).
	(purchases _ [
	(self coverAll:
		{574 to: 577}) fetchClientPurchases:
		(cartOwner
			cover: (601 to: 609)
			declaredAt: (74 to: 82)) ] valueCoveringAll:
		{579 to: 599})
		cover: (561 to: 569)
		declaredAt: (84 to: 92).
	[
	(purchases
		cover: (614 to: 622)
		declaredAt: (84 to: 92)) add:
		(sale
			cover: (629 to: 632)
			declaredAt: (69 to: 72)) ] valueCoveringAll:
		{624 to: 627}.
	[
	(carts
		cover: (638 to: 642)
		declaredAt: (294 to: 298)) removeKey:
		(aCartId
			cover: (655 to: 661)
			declaredAt: (13 to: 19)) ] valueCoveringAll:
		{644 to: 653}.
	[
	(clientsCarts
		cover: (665 to: 676)
		declaredAt: (533 to: 544)) removeKey:
		(aCartId
			cover: (689 to: 695)
			declaredAt: (13 to: 19)) ] valueCoveringAll:
		{678 to: 687}.
	^ sale
		cover: (702 to: 705)
		declaredAt: (69 to: 72).! !
!Behavior method!
assertCartIsExpired: aCartId at: aDateTime
	^ [
	([
	([
	(aDateTime
		cover: (50 to: 58)
		declaredAt: (34 to: 42)) -
		([
		(cartsTimestamps
			cover: (64 to: 78)
			declaredAt: (64 to: 78)) at:
			(aCartId
				cover: (84 to: 90)
				declaredAt: (22 to: 28)) ] valueCoveringAll:
			{80 to: 82}) ] valueCoveringAll:
		{61 to: 61}) totalMinutes ] valueCoveringAll:
		{94 to: 105}) >=
		(30 coverAll:
			{110 to: 111}) ] valueCoveringAll:
		{107 to: 108}.! !
!Behavior method!
debit: anAmount from: aCreditCard
	^ [
	(debitBehavior
		cover: (39 to: 51)
		declaredAt: (39 to: 51))
		value:
			(anAmount
				cover: (60 to: 67)
				declaredAt: (8 to: 15))
		value:
			(aCreditCard
				cover: (76 to: 86)
				declaredAt: (23 to: 33)) ] valueCoveringAll:
		{53 to: 58. 69 to: 74}.! !
!Behavior method!
generateSaleOf: aCartId withTotal: total
	^ [
	(Sale
		cover: (46 to: 49)
		declaredAt: (46 to: 49))
		of:
			(total
				cover: (55 to: 59)
				declaredAt: (36 to: 40))
		with:
			([
			([
			(carts
				cover: (69 to: 73)
				declaredAt: (69 to: 73)) at:
				(aCartId
					cover: (79 to: 85)
					declaredAt: (17 to: 23)) ] valueCoveringAll:
				{75 to: 77}) items ] valueCoveringAll:
				{88 to: 92}) ] valueCoveringAll:
		{51 to: 53. 61 to: 65}.! !
!Behavior method!
fetchClientPurchases: cartOwner
	^ [
	(clientsPurchases
		cover: (37 to: 52)
		declaredAt: (37 to: 52))
		at:
			(cartOwner
				cover: (58 to: 66)
				declaredAt: (23 to: 31))
		ifAbsent: [
			[
			([
			(clientsPurchases
				cover: (80 to: 95)
				declaredAt: (37 to: 52)) add:
				([
				(cartOwner
					cover: (102 to: 110)
					declaredAt: (23 to: 31)) ->
					([
					(OrderedCollection
						cover: (113 to: 129)
						declaredAt: (113 to: 129)) new ] valueCoveringAll:
						{131 to: 133}) ] valueCoveringAll:
					{111 to: 112}) ] valueCoveringAll:
				{97 to: 100}) value ] valueCoveringAll:
				{136 to: 140} ]] valueCoveringAll:
		{54 to: 56. 68 to: 76}.! !
!Behavior method!
id
	^ id
		cover: (6 to: 7)
		declaredAt: (6 to: 7).! !
!Behavior method!
transactionAmountOf: aSaleId
	^ [
	([
	([
	(salesBook
		cover: (35 to: 43)
		declaredAt: (35 to: 43)) select: [ :aSale |
		[
		([
		(aSale
			cover: (64 to: 68)
			declaredAt: (55 to: 59)) id ] valueCoveringAll:
			{70 to: 71}) =
			(aSaleId
				cover: (76 to: 82)
				declaredAt: (22 to: 28)) ] valueCoveringAll:
			{74 to: 74} ]] valueCoveringAll:
		{45 to: 51}) first ] valueCoveringAll:
		{87 to: 91}) total ] valueCoveringAll:
		{93 to: 97}.! !
!Behavior method!
quantityOf: anIsbn
	^ [
	(purchasedItems
		cover: (24 to: 37)
		declaredAt: (24 to: 37)) occurrencesOf:
		(anIsbn
			cover: (54 to: 59)
			declaredAt: (13 to: 18)) ] valueCoveringAll:
		{39 to: 52}.! !

!testRun: #TusLibrosInterfaceTest #test10CheckoutWithAValidCreditCardCreatesACorrectSaleAndRemovesTheCartFromTheService stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CheckoutWithAnInvalidCreditCardThrowsAnExpiredCardErrorAndKeepsTheCartInTheService stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutWithAnExpiredCartShouldThrowAnError stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!
!Behavior method!
listPurchasesOf: aClientId with: aClientPassword
	[
	(self coverAll:
		{52 to: 55})
		validateCredentialsOf:
			(aClientId
				cover: (80 to: 88)
				declaredAt: (18 to: 26))
		with:
			(aClientPassword
				cover: (96 to: 110)
				declaredAt: (34 to: 48)) ] valueCoveringAll:
		{57 to: 78. 90 to: 94}.
	^ [
	(clientsPurchases
		cover: (115 to: 130)
		declaredAt: (115 to: 130))
		at:
			(aClientId
				cover: (136 to: 144)
				declaredAt: (18 to: 26))
		ifAbsent: [
			[
			(OrderedCollection
				cover: (157 to: 173)
				declaredAt: (157 to: 173)) new ] valueCoveringAll:
				{175 to: 177} ]] valueCoveringAll:
		{132 to: 134. 146 to: 154}.! !

!testRun: #TusLibrosInterfaceTest #test13ListPurchasesBeforeDoingAnyCheckoutReturnsAnEmptyListOfPurchases stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15ListPurchasesAfterDoingManyCheckoutsReturnsAListWithManyPurchases stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListPurchasesWithAnInvalidUserThrowsAnError stamp: 'ldmaf 6/13/2022 00:38:18'!
PASSED!
!Behavior method!
with: aDictionary
	^ [
	([
	(self coverAll:
		{22 to: 25}) new ] valueCoveringAll:
		{27 to: 29}) initializeWith:
		(aDictionary
			cover: (47 to: 57)
			declaredAt: (7 to: 17)) ] valueCoveringAll:
		{31 to: 45}.! !
!Behavior method!
initializeWith: aDictionary
	(users _ aDictionary
		cover: (39 to: 49)
		declaredAt: (17 to: 27))
		cover: (31 to: 35)
		declaredAt: (31 to: 35).
	(carts _ [
	(Dictionary
		cover: (61 to: 70)
		declaredAt: (61 to: 70)) new ] valueCoveringAll:
		{72 to: 74})
		cover: (53 to: 57)
		declaredAt: (53 to: 57).
	(tusLibrosCatalogue _ [
	(Dictionary
		cover: (99 to: 108)
		declaredAt: (61 to: 70)) new ] valueCoveringAll:
		{110 to: 112})
		cover: (78 to: 95)
		declaredAt: (78 to: 95).
	(cartsTimestamps _ [
	(Dictionary
		cover: (134 to: 143)
		declaredAt: (61 to: 70)) new ] valueCoveringAll:
		{145 to: 147})
		cover: (116 to: 130)
		declaredAt: (116 to: 130).
	(debitBehavior _ [ :anAmount :aCreditCard |
	nil ])
		cover: (151 to: 163)
		declaredAt: (151 to: 163).
	(salesBook _ [
	(OrderedCollection
		cover: (211 to: 227)
		declaredAt: (211 to: 227)) new ] valueCoveringAll:
		{229 to: 231})
		cover: (199 to: 207)
		declaredAt: (199 to: 207).
	(clientsCarts _ [
	(Dictionary
		cover: (250 to: 259)
		declaredAt: (61 to: 70)) new ] valueCoveringAll:
		{261 to: 263})
		cover: (235 to: 246)
		declaredAt: (235 to: 246).
	(clientsPurchases _ [
	(Dictionary
		cover: (286 to: 295)
		declaredAt: (61 to: 70)) new ] valueCoveringAll:
		{297 to: 299})
		cover: (267 to: 282)
		declaredAt: (267 to: 282).
	[
	(tusLibrosCatalogue
		cover: (303 to: 320)
		declaredAt: (78 to: 95)) add:
		([
		('9780764548345' coverAll:
			{328 to: 342}) ->
			(100 coverAll:
				{345 to: 347}) ] valueCoveringAll:
			{343 to: 344}) ] valueCoveringAll:
		{322 to: 325}.
	[
	(tusLibrosCatalogue
		cover: (352 to: 369)
		declaredAt: (78 to: 95)) add:
		([
		('9788495070524' coverAll:
			{377 to: 391}) ->
			(73 coverAll:
				{396 to: 397}) ] valueCoveringAll:
			{393 to: 394}) ] valueCoveringAll:
		{371 to: 374}.
	[
	(tusLibrosCatalogue
		cover: (402 to: 419)
		declaredAt: (78 to: 95)) add:
		([
		('9780764548345' coverAll:
			{427 to: 441}) ->
			(12 coverAll:
				{446 to: 447}) ] valueCoveringAll:
			{443 to: 444}) ] valueCoveringAll:
		{421 to: 424}.
	[
	(tusLibrosCatalogue
		cover: (452 to: 469)
		declaredAt: (78 to: 95)) add:
		([
		('9789871497522' coverAll:
			{477 to: 491}) ->
			(59 coverAll:
				{496 to: 497}) ] valueCoveringAll:
			{493 to: 494}) ] valueCoveringAll:
		{471 to: 474}.! !
!Behavior method!
createCartWith: aClientId and: aPassword at: aDateAndTime
	| id |
	[
	(self coverAll:
		{66 to: 69})
		validateCredentialsOf:
			(aClientId
				cover: (94 to: 102)
				declaredAt: (17 to: 25))
		with:
			(aPassword
				cover: (110 to: 118)
				declaredAt: (32 to: 40)) ] valueCoveringAll:
		{71 to: 92. 104 to: 108}.
	(id _ [
	(self coverAll:
		{129 to: 132}) generateRandomId ] valueCoveringAll:
		{134 to: 149})
		cover: (124 to: 125)
		declaredAt: (61 to: 62).
	[
	(carts
		cover: (229 to: 233)
		declaredAt: (229 to: 233)) add:
		([
		(id
			cover: (241 to: 242)
			declaredAt: (61 to: 62)) ->
			([
			(Cart
				cover: (248 to: 251)
				declaredAt: (248 to: 251)) acceptingItemsOf:
				(tusLibrosCatalogue
					cover: (271 to: 288)
					declaredAt: (271 to: 288)) ] valueCoveringAll:
				{253 to: 269}) ] valueCoveringAll:
			{244 to: 245}) ] valueCoveringAll:
		{235 to: 238}.
	[
	(cartsTimestamps
		cover: (294 to: 308)
		declaredAt: (294 to: 308)) add:
		([
		(id
			cover: (316 to: 317)
			declaredAt: (61 to: 62)) ->
			(aDateAndTime
				cover: (322 to: 333)
				declaredAt: (46 to: 57)) ] valueCoveringAll:
			{319 to: 320}) ] valueCoveringAll:
		{310 to: 313}.
	[
	(clientsCarts
		cover: (338 to: 349)
		declaredAt: (338 to: 349)) add:
		([
		(id
			cover: (356 to: 357)
			declaredAt: (61 to: 62)) ->
			(aClientId
				cover: (362 to: 370)
				declaredAt: (17 to: 25)) ] valueCoveringAll:
			{359 to: 360}) ] valueCoveringAll:
		{351 to: 354}.
	^ id
		cover: (375 to: 376)
		declaredAt: (61 to: 62).! !
!Behavior method!
validateCredentialsOf: aClientId with: aClientPassword
	^ [
	([
	(users
		cover: (61 to: 65)
		declaredAt: (61 to: 65))
		at:
			(aClientId
				cover: (71 to: 79)
				declaredAt: (24 to: 32))
		ifAbsent: [
			[
			(self coverAll:
				{92 to: 95}) error:
				('Invalid Credentials.' coverAll:
					{104 to: 125}) ] valueCoveringAll:
				{97 to: 102} ]] valueCoveringAll:
		{67 to: 69. 81 to: 89}) =
		(aClientPassword
			cover: (131 to: 145)
			declaredAt: (40 to: 54)) ] valueCoveringAll:
		{129 to: 129}.! !
!Behavior method!
generateRandomId
	^ [
	([
	([
	(Random
		cover: (23 to: 28)
		declaredAt: (23 to: 28)) next ] valueCoveringAll:
		{30 to: 33}) *
		(547 coverAll:
			{37 to: 39}) ] valueCoveringAll:
		{35 to: 35}) asInteger ] valueCoveringAll:
		{42 to: 50}.! !
!Behavior method!
acceptingItemsOf: aCatalog
	^ [
	([
	(self coverAll:
		{31 to: 34}) new ] valueCoveringAll:
		{36 to: 38}) initializeAcceptingItemsOf:
		(aCatalog
			cover: (68 to: 75)
			declaredAt: (19 to: 26)) ] valueCoveringAll:
		{40 to: 66}.! !
!Behavior method!
initializeAcceptingItemsOf: aCatalog
	(catalog _ aCatalog
		cover: (51 to: 58)
		declaredAt: (29 to: 36))
		cover: (40 to: 46)
		declaredAt: (40 to: 46).
	(items _ [
	(OrderedCollection
		cover: (71 to: 87)
		declaredAt: (71 to: 87)) new ] valueCoveringAll:
		{89 to: 91})
		cover: (62 to: 66)
		declaredAt: (62 to: 66).! !
!Behavior method!
listCart: aCartId
	| listOfBooks items |
	[
	([
	(self coverAll:
		{45 to: 48}) hasCart:
		(aCartId
			cover: (59 to: 65)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{50 to: 57}) ifFalse: [
		[
		(self coverAll:
			{78 to: 81}) error:
			('Non Existing Cart Id.' coverAll:
				{90 to: 112}) ] valueCoveringAll:
			{83 to: 88} ]] valueCoveringAll:
		{68 to: 75}.
	(listOfBooks _ [
	(Dictionary
		cover: (131 to: 140)
		declaredAt: (131 to: 140)) new ] valueCoveringAll:
		{142 to: 144})
		cover: (117 to: 127)
		declaredAt: (23 to: 33).
	(items _ [
	([
	(carts
		cover: (158 to: 162)
		declaredAt: (158 to: 162)) at:
		(aCartId
			cover: (168 to: 174)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{164 to: 166}) items ] valueCoveringAll:
		{177 to: 181})
		cover: (148 to: 152)
		declaredAt: (35 to: 39).
	[
	(items
		cover: (185 to: 189)
		declaredAt: (35 to: 39)) do: [ :aBook |
		[
		(listOfBooks
			cover: (205 to: 215)
			declaredAt: (23 to: 33)) add:
			([
			(aBook
				cover: (222 to: 226)
				declaredAt: (197 to: 201)) ->
				([
				(items
					cover: (230 to: 234)
					declaredAt: (35 to: 39)) occurrencesOf:
					(aBook
						cover: (251 to: 255)
						declaredAt: (197 to: 201)) ] valueCoveringAll:
					{236 to: 249}) ] valueCoveringAll:
				{227 to: 228}) ] valueCoveringAll:
			{217 to: 220} ]] valueCoveringAll:
		{191 to: 193}.
	^ listOfBooks
		cover: (262 to: 272)
		declaredAt: (23 to: 33).! !
!Behavior method!
hasCart: aCartId
	^ [
	([
	(carts
		cover: (23 to: 27)
		declaredAt: (23 to: 27)) keys ] valueCoveringAll:
		{29 to: 32}) includes:
		(aCartId
			cover: (44 to: 50)
			declaredAt: (10 to: 16)) ] valueCoveringAll:
		{34 to: 42}.! !
!Behavior method!
items
	^ [
	(items
		cover: (10 to: 14)
		declaredAt: (10 to: 14)) copy ] valueCoveringAll:
		{16 to: 19}.! !

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/13/2022 00:38:37'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/13/2022 00:38:37'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/13/2022 00:38:37'!
PASSED!
!Behavior method!
add: anAmount of: anIsbn to: aCartId
	[
	([
	(self coverAll:
		{40 to: 43}) hasCart:
		(aCartId
			cover: (54 to: 60)
			declaredAt: (30 to: 36)) ] valueCoveringAll:
		{45 to: 52}) ifFalse: [
		[
		(self coverAll:
			{73 to: 76}) error:
			('Non Existing Cart Id.' coverAll:
				{85 to: 107}) ] valueCoveringAll:
			{78 to: 83} ]] valueCoveringAll:
		{63 to: 70}.
	[
	([
	(self coverAll:
		{115 to: 118}) assertCartIsExpired:
		(aCartId
			cover: (141 to: 147)
			declaredAt: (30 to: 36)) ] valueCoveringAll:
		{120 to: 139}) ifTrue: [
		[
		(self coverAll:
			{160 to: 163}) error:
			('Cart Expired.' coverAll:
				{172 to: 186}) ] valueCoveringAll:
			{165 to: 170} ]] valueCoveringAll:
		{151 to: 157}.
	[
	([
	(carts
		cover: (192 to: 196)
		declaredAt: (192 to: 196)) at:
		(aCartId
			cover: (202 to: 208)
			declaredAt: (30 to: 36)) ] valueCoveringAll:
		{198 to: 200})
		add:
			(anAmount
				cover: (216 to: 223)
				declaredAt: (6 to: 13))
		of:
			(anIsbn
				cover: (229 to: 234)
				declaredAt: (19 to: 24)) ] valueCoveringAll:
		{211 to: 214. 225 to: 227}.! !
!Behavior method!
assertCartIsExpired: aCartId
	^ [
	([
	([
	([
	(DateAndTime
		cover: (36 to: 46)
		declaredAt: (36 to: 46)) now ] valueCoveringAll:
		{48 to: 50}) -
		([
		(cartsTimestamps
			cover: (56 to: 70)
			declaredAt: (56 to: 70)) at:
			(aCartId
				cover: (76 to: 82)
				declaredAt: (22 to: 28)) ] valueCoveringAll:
			{72 to: 74}) ] valueCoveringAll:
		{53 to: 53}) totalMinutes ] valueCoveringAll:
		{86 to: 97}) >=
		(30 coverAll:
			{102 to: 103}) ] valueCoveringAll:
		{99 to: 100}.! !
!Behavior method!
add: aQuantity of: anItem
	[
	(self coverAll:
		{29 to: 32}) assertIsValidQuantity:
		(aQuantity
			cover: (57 to: 65)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{34 to: 55}.
	[
	(self coverAll:
		{69 to: 72}) assertIsValidItem:
		(anItem
			cover: (93 to: 98)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{74 to: 91}.
	[
	(1 coverAll:
		{103 to: 103})
		to:
			(aQuantity
				cover: (109 to: 117)
				declaredAt: (6 to: 14))
		do: [ :aNumber |
			[
			(items
				cover: (136 to: 140)
				declaredAt: (136 to: 140)) add:
				(anItem
					cover: (147 to: 152)
					declaredAt: (20 to: 25)) ] valueCoveringAll:
				{142 to: 145} ]] valueCoveringAll:
		{105 to: 107. 119 to: 121}.! !
!Behavior method!
assertIsValidQuantity: aQuantity
	[
	([
	(aQuantity
		cover: (36 to: 44)
		declaredAt: (24 to: 32)) strictlyPositive ] valueCoveringAll:
		{46 to: 61}) ifFalse: [
		[
		(self coverAll:
			{74 to: 77}) error:
			([
			(self coverAll:
				{86 to: 89}) invalidQuantityErrorMessage ] valueCoveringAll:
				{91 to: 117}) ] valueCoveringAll:
			{79 to: 84} ]] valueCoveringAll:
		{63 to: 70}.! !
!Behavior method!
assertIsValidItem: anItem
	[
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anItem
			cover: (51 to: 56)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			(self coverAll:
				{82 to: 85}) invalidItemErrorMessage ] valueCoveringAll:
				{87 to: 109}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{59 to: 66}.! !

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/13/2022 00:38:37'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/13/2022 00:38:37'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/13/2022 00:38:37'!
PASSED!
!Behavior method!
invalidQuantityErrorMessage
	^ 'Invalid number of items' coverAll:
		{33 to: 57}.! !

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/13/2022 00:38:37'!
PASSED!
!Behavior method!
invalidItemErrorMessage
	^ 'Item is not in catalog' coverAll:
		{29 to: 52}.! !

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/13/2022 00:38:37'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/13/2022 00:38:37'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/13/2022 00:38:37'!
PASSED!
!Behavior method!
expiringOn: aMonth withNumber: aCreditCardNumber andOwner: anOwner
	^ [
	([
	(self coverAll:
		{74 to: 77}) new ] valueCoveringAll:
		{79 to: 81})
		initializeExpiringOn:
			(aMonth
				cover: (105 to: 110)
				declaredAt: (13 to: 18))
		withNumber:
			(aCreditCardNumber
				cover: (124 to: 140)
				declaredAt: (32 to: 48))
		andOwner:
			(anOwner
				cover: (152 to: 158)
				declaredAt: (60 to: 66)) ] valueCoveringAll:
		{83 to: 103. 112 to: 122. 142 to: 150}.! !
!Behavior method!
initializeExpiringOn: aMonth withNumber: aCreditCardNumber andOwner: anOwner
	(expiration _ aMonth
		cover: (95 to: 100)
		declaredAt: (23 to: 28))
		cover: (81 to: 90)
		declaredAt: (81 to: 90).
	(number _ aCreditCardNumber
		cover: (114 to: 130)
		declaredAt: (42 to: 58))
		cover: (104 to: 109)
		declaredAt: (104 to: 109).
	(owner _ anOwner
		cover: (143 to: 149)
		declaredAt: (70 to: 76))
		cover: (134 to: 138)
		declaredAt: (134 to: 138).! !
!Behavior method!
checkoutOf: aCartId with: aCreditCard
	^ [
	(self coverAll:
		{43 to: 46})
		checkoutOf:
			(aCartId
				cover: (60 to: 66)
				declaredAt: (13 to: 19))
		with:
			(aCreditCard
				cover: (74 to: 84)
				declaredAt: (27 to: 37))
		at:
			([
			(DateAndTime
				cover: (90 to: 100)
				declaredAt: (90 to: 100)) now ] valueCoveringAll:
				{102 to: 104}) ] valueCoveringAll:
		{48 to: 58. 68 to: 72. 86 to: 88}.! !
!Behavior method!
checkoutOf: aCartId with: aCreditCard at: aDateTime
	| total cashier sale cartOwner purchases |
	[
	([
	(self coverAll:
		{97 to: 100}) hasCart:
		(aCartId
			cover: (111 to: 117)
			declaredAt: (13 to: 19)) ] valueCoveringAll:
		{102 to: 109}) ifFalse: [
		[
		(self coverAll:
			{130 to: 133}) error:
			('Non Existing Cart Id.' coverAll:
				{142 to: 164}) ] valueCoveringAll:
			{135 to: 140} ]] valueCoveringAll:
		{120 to: 127}.
	[
	([
	(self coverAll:
		{171 to: 174})
		assertCartIsExpired:
			(aCartId
				cover: (197 to: 203)
				declaredAt: (13 to: 19))
		at:
			(aDateTime
				cover: (209 to: 217)
				declaredAt: (43 to: 51)) ] valueCoveringAll:
		{176 to: 195. 205 to: 207}) ifTrue: [
		[
		(self coverAll:
			{230 to: 233}) error:
			('Cart Expired.' coverAll:
				{242 to: 256}) ] valueCoveringAll:
			{235 to: 240} ]] valueCoveringAll:
		{221 to: 227}.
	(cashier _ [
	(Cashier
		cover: (273 to: 279)
		declaredAt: (273 to: 279))
		toCheckout:
			([
			(carts
				cover: (294 to: 298)
				declaredAt: (294 to: 298)) at:
				(aCartId
					cover: (304 to: 310)
					declaredAt: (13 to: 19)) ] valueCoveringAll:
				{300 to: 302})
		charging:
			(aCreditCard
				cover: (334 to: 344)
				declaredAt: (27 to: 37))
		throught:
			(self coverAll:
				{362 to: 365})
		on:
			([
			(DateAndTime
				cover: (378 to: 388)
				declaredAt: (378 to: 388)) now ] valueCoveringAll:
				{390 to: 392})
		registeringOn:
			(salesBook
				cover: (416 to: 424)
				declaredAt: (416 to: 424)) ] valueCoveringAll:
		{281 to: 291. 324 to: 332. 352 to: 360. 373 to: 375. 401 to: 414})
		cover: (263 to: 269)
		declaredAt: (61 to: 67).
	(total _ [
	(cashier
		cover: (442 to: 448)
		declaredAt: (61 to: 67)) checkOut ] valueCoveringAll:
		{450 to: 457})
		cover: (434 to: 438)
		declaredAt: (55 to: 59).
	(sale _ [
	(self coverAll:
		{469 to: 472})
		generateSaleOf:
			(aCartId
				cover: (490 to: 496)
				declaredAt: (13 to: 19))
		withTotal:
			(total
				cover: (509 to: 513)
				declaredAt: (55 to: 59)) ] valueCoveringAll:
		{474 to: 488. 498 to: 507})
		cover: (461 to: 464)
		declaredAt: (69 to: 72).
	(cartOwner _ [
	(clientsCarts
		cover: (533 to: 544)
		declaredAt: (533 to: 544)) at:
		(aCartId
			cover: (550 to: 556)
			declaredAt: (13 to: 19)) ] valueCoveringAll:
		{546 to: 548})
		cover: (520 to: 528)
		declaredAt: (74 to: 82).
	(purchases _ [
	(self coverAll:
		{574 to: 577}) fetchClientPurchases:
		(cartOwner
			cover: (601 to: 609)
			declaredAt: (74 to: 82)) ] valueCoveringAll:
		{579 to: 599})
		cover: (561 to: 569)
		declaredAt: (84 to: 92).
	[
	(purchases
		cover: (614 to: 622)
		declaredAt: (84 to: 92)) add:
		(sale
			cover: (629 to: 632)
			declaredAt: (69 to: 72)) ] valueCoveringAll:
		{624 to: 627}.
	[
	(carts
		cover: (638 to: 642)
		declaredAt: (294 to: 298)) removeKey:
		(aCartId
			cover: (655 to: 661)
			declaredAt: (13 to: 19)) ] valueCoveringAll:
		{644 to: 653}.
	[
	(clientsCarts
		cover: (665 to: 676)
		declaredAt: (533 to: 544)) removeKey:
		(aCartId
			cover: (689 to: 695)
			declaredAt: (13 to: 19)) ] valueCoveringAll:
		{678 to: 687}.
	^ sale
		cover: (702 to: 705)
		declaredAt: (69 to: 72).! !
!Behavior method!
assertCartIsExpired: aCartId at: aDateTime
	^ [
	([
	([
	(aDateTime
		cover: (50 to: 58)
		declaredAt: (34 to: 42)) -
		([
		(cartsTimestamps
			cover: (64 to: 78)
			declaredAt: (64 to: 78)) at:
			(aCartId
				cover: (84 to: 90)
				declaredAt: (22 to: 28)) ] valueCoveringAll:
			{80 to: 82}) ] valueCoveringAll:
		{61 to: 61}) totalMinutes ] valueCoveringAll:
		{94 to: 105}) >=
		(30 coverAll:
			{110 to: 111}) ] valueCoveringAll:
		{107 to: 108}.! !
!Behavior method!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook
	[
	(self coverAll:
		{109 to: 112}) assertIsNotEmpty:
		(aCart
			cover: (132 to: 136)
			declaredAt: (13 to: 17)) ] valueCoveringAll:
		{114 to: 130}.
	[
	(self coverAll:
		{140 to: 143})
		assertIsNotExpired:
			(aCreditCard
				cover: (165 to: 175)
				declaredAt: (29 to: 39))
		on:
			(aDate
				cover: (181 to: 185)
				declaredAt: (74 to: 78)) ] valueCoveringAll:
		{145 to: 163. 177 to: 179}.
	^ [
	([
	(self coverAll:
		{192 to: 195}) new ] valueCoveringAll:
		{197 to: 199})
		initializeToCheckout:
			(aCart
				cover: (223 to: 227)
				declaredAt: (13 to: 17))
		charging:
			(aCreditCard
				cover: (239 to: 249)
				declaredAt: (29 to: 39))
		throught:
			(aMerchantProcessor
				cover: (261 to: 278)
				declaredAt: (51 to: 68))
		registeringOn:
			(aSalesBook
				cover: (295 to: 304)
				declaredAt: (95 to: 104)) ] valueCoveringAll:
		{201 to: 221. 229 to: 237. 251 to: 259. 280 to: 293}.! !
!Behavior method!
assertIsNotEmpty: aCart
	[
	([
	(aCart
		cover: (29 to: 33)
		declaredAt: (19 to: 23)) isEmpty ] valueCoveringAll:
		{35 to: 41}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(self coverAll:
				{64 to: 67}) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
				{69 to: 97}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
isEmpty
	^ [
	(items
		cover: (13 to: 17)
		declaredAt: (13 to: 17)) isEmpty ] valueCoveringAll:
		{19 to: 25}.! !
!Behavior method!
assertIsNotExpired: aCreditCard on: aDate
	[
	([
	(aCreditCard
		cover: (47 to: 57)
		declaredAt: (21 to: 31)) isExpiredOn:
		(aDate
			cover: (72 to: 76)
			declaredAt: (37 to: 41)) ] valueCoveringAll:
		{59 to: 70}) ifTrue: [
		[
		(self coverAll:
			{89 to: 92}) error:
			([
			(self coverAll:
				{101 to: 104}) canNotChargeAnExpiredCreditCardErrorMessage ] valueCoveringAll:
				{106 to: 148}) ] valueCoveringAll:
			{94 to: 99} ]] valueCoveringAll:
		{79 to: 85}.! !
!Behavior method!
isExpiredOn: aDate
	^ [
	([
	(expiration
		cover: (25 to: 34)
		declaredAt: (25 to: 34)) start ] valueCoveringAll:
		{36 to: 40}) <
		([
		([
		(Month
			cover: (45 to: 49)
			declaredAt: (45 to: 49))
			month:
				([
				(aDate
					cover: (58 to: 62)
					declaredAt: (14 to: 18)) monthIndex ] valueCoveringAll:
					{64 to: 73})
			year:
				([
				(aDate
					cover: (81 to: 85)
					declaredAt: (14 to: 18)) yearNumber ] valueCoveringAll:
					{87 to: 96}) ] valueCoveringAll:
			{51 to: 56. 75 to: 79}) start ] valueCoveringAll:
			{99 to: 103}) ] valueCoveringAll:
		{42 to: 42}.! !
!Behavior method!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook
	(cart _ aCart
		cover: (117 to: 121)
		declaredAt: (23 to: 27))
		cover: (109 to: 112)
		declaredAt: (109 to: 112).
	(creditCard _ aCreditCard
		cover: (139 to: 149)
		declaredAt: (39 to: 49))
		cover: (125 to: 134)
		declaredAt: (125 to: 134).
	(merchantProcessor _ aMerchantProcessor
		cover: (174 to: 191)
		declaredAt: (61 to: 78))
		cover: (153 to: 169)
		declaredAt: (153 to: 169).
	(salesBook _ aSalesBook
		cover: (208 to: 217)
		declaredAt: (95 to: 104))
		cover: (195 to: 203)
		declaredAt: (195 to: 203).! !
!Behavior method!
checkOut
	[
	(self coverAll:
		{12 to: 15}) calculateTotal ] valueCoveringAll:
		{17 to: 30}.
	[
	(self coverAll:
		{34 to: 37}) debitTotal ] valueCoveringAll:
		{39 to: 48}.
	[
	(self coverAll:
		{52 to: 55}) registerSale ] valueCoveringAll:
		{57 to: 68}.
	^ total
		cover: (75 to: 79)
		declaredAt: (75 to: 79).! !
!Behavior method!
calculateTotal
	(total _ [
	(cart
		cover: (27 to: 30)
		declaredAt: (27 to: 30)) total ] valueCoveringAll:
		{32 to: 36})
		cover: (18 to: 22)
		declaredAt: (18 to: 22).! !
!Behavior method!
total
	^ [
	(items
		cover: (11 to: 15)
		declaredAt: (11 to: 15)) sum: [ :anItem |
		[
		(catalog
			cover: (34 to: 40)
			declaredAt: (34 to: 40)) at:
			(anItem
				cover: (46 to: 51)
				declaredAt: (25 to: 30)) ] valueCoveringAll:
			{42 to: 44} ]] valueCoveringAll:
		{17 to: 20}.! !
!Behavior method!
debitTotal
	[
	(merchantProcessor
		cover: (14 to: 30)
		declaredAt: (14 to: 30))
		debit:
			(total
				cover: (39 to: 43)
				declaredAt: (39 to: 43))
		from:
			(creditCard
				cover: (51 to: 60)
				declaredAt: (51 to: 60)) ] valueCoveringAll:
		{32 to: 37. 45 to: 49}.! !
!Behavior method!
debit: anAmount from: aCreditCard
	^ [
	(debitBehavior
		cover: (39 to: 51)
		declaredAt: (39 to: 51))
		value:
			(anAmount
				cover: (60 to: 67)
				declaredAt: (8 to: 15))
		value:
			(aCreditCard
				cover: (76 to: 86)
				declaredAt: (23 to: 33)) ] valueCoveringAll:
		{53 to: 58. 69 to: 74}.! !
!Behavior method!
registerSale
	[
	(salesBook
		cover: (16 to: 24)
		declaredAt: (16 to: 24)) add:
		([
		(self coverAll:
			{31 to: 34}) createSale ] valueCoveringAll:
			{36 to: 45}) ] valueCoveringAll:
		{26 to: 29}.! !
!Behavior method!
createSale
	^ [
	(Sale
		cover: (16 to: 19)
		declaredAt: (16 to: 19))
		of:
			(total
				cover: (25 to: 29)
				declaredAt: (25 to: 29))
		with:
			([
			(cart
				cover: (38 to: 41)
				declaredAt: (38 to: 41)) items ] valueCoveringAll:
				{43 to: 47}) ] valueCoveringAll:
		{21 to: 23. 31 to: 35}.! !
!Behavior method!
of: aTotal with: aCollectionOfItems
	"should assert total is not negative or 0!!"
	^ [
	([
	(self coverAll:
		{85 to: 88}) new ] valueCoveringAll:
		{90 to: 92})
		initializeTotal:
			(aTotal
				cover: (111 to: 116)
				declaredAt: (5 to: 10))
		with:
			(aCollectionOfItems
				cover: (124 to: 141)
				declaredAt: (18 to: 35)) ] valueCoveringAll:
		{94 to: 109. 118 to: 122}.! !
!Behavior method!
initializeTotal: aTotal with: aCollectionOfItems
	(total _ aTotal
		cover: (61 to: 66)
		declaredAt: (18 to: 23))
		cover: (52 to: 56)
		declaredAt: (52 to: 56).
	(id _ 1 coverAll:
		{76 to: 76})
		cover: (70 to: 71)
		declaredAt: (70 to: 71).
	(purchasedItems _ aCollectionOfItems
		cover: (98 to: 115)
		declaredAt: (31 to: 48))
		cover: (80 to: 93)
		declaredAt: (80 to: 93).! !
!Behavior method!
generateSaleOf: aCartId withTotal: total
	^ [
	(Sale
		cover: (46 to: 49)
		declaredAt: (46 to: 49))
		of:
			(total
				cover: (55 to: 59)
				declaredAt: (36 to: 40))
		with:
			([
			([
			(carts
				cover: (69 to: 73)
				declaredAt: (69 to: 73)) at:
				(aCartId
					cover: (79 to: 85)
					declaredAt: (17 to: 23)) ] valueCoveringAll:
				{75 to: 77}) items ] valueCoveringAll:
				{88 to: 92}) ] valueCoveringAll:
		{51 to: 53. 61 to: 65}.! !
!Behavior method!
fetchClientPurchases: cartOwner
	^ [
	(clientsPurchases
		cover: (37 to: 52)
		declaredAt: (37 to: 52))
		at:
			(cartOwner
				cover: (58 to: 66)
				declaredAt: (23 to: 31))
		ifAbsent: [
			[
			([
			(clientsPurchases
				cover: (80 to: 95)
				declaredAt: (37 to: 52)) add:
				([
				(cartOwner
					cover: (102 to: 110)
					declaredAt: (23 to: 31)) ->
					([
					(OrderedCollection
						cover: (113 to: 129)
						declaredAt: (113 to: 129)) new ] valueCoveringAll:
						{131 to: 133}) ] valueCoveringAll:
					{111 to: 112}) ] valueCoveringAll:
				{97 to: 100}) value ] valueCoveringAll:
				{136 to: 140} ]] valueCoveringAll:
		{54 to: 56. 68 to: 76}.! !
!Behavior method!
id
	^ id
		cover: (6 to: 7)
		declaredAt: (6 to: 7).! !
!Behavior method!
transactionAmountOf: aSaleId
	^ [
	([
	([
	(salesBook
		cover: (35 to: 43)
		declaredAt: (35 to: 43)) select: [ :aSale |
		[
		([
		(aSale
			cover: (64 to: 68)
			declaredAt: (55 to: 59)) id ] valueCoveringAll:
			{70 to: 71}) =
			(aSaleId
				cover: (76 to: 82)
				declaredAt: (22 to: 28)) ] valueCoveringAll:
			{74 to: 74} ]] valueCoveringAll:
		{45 to: 51}) first ] valueCoveringAll:
		{87 to: 91}) total ] valueCoveringAll:
		{93 to: 97}.! !
!Behavior method!
total
	^ total
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !
!Behavior method!
quantityOf: anIsbn
	^ [
	(purchasedItems
		cover: (24 to: 37)
		declaredAt: (24 to: 37)) occurrencesOf:
		(anIsbn
			cover: (54 to: 59)
			declaredAt: (13 to: 18)) ] valueCoveringAll:
		{39 to: 52}.! !

!testRun: #TusLibrosInterfaceTest #test10CheckoutWithAValidCreditCardCreatesACorrectSaleAndRemovesTheCartFromTheService stamp: 'ldmaf 6/13/2022 00:38:38'!
PASSED!
!Behavior method!
canNotChargeAnExpiredCreditCardErrorMessage
	^ 'Can not charge an expired credit card' coverAll:
		{49 to: 87}.! !

!testRun: #TusLibrosInterfaceTest #test11CheckoutWithAnInvalidCreditCardThrowsAnExpiredCardErrorAndKeepsTheCartInTheService stamp: 'ldmaf 6/13/2022 00:38:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutWithAnExpiredCartShouldThrowAnError stamp: 'ldmaf 6/13/2022 00:38:38'!
PASSED!
!Behavior method!
listPurchasesOf: aClientId with: aClientPassword
	[
	(self coverAll:
		{52 to: 55})
		validateCredentialsOf:
			(aClientId
				cover: (80 to: 88)
				declaredAt: (18 to: 26))
		with:
			(aClientPassword
				cover: (96 to: 110)
				declaredAt: (34 to: 48)) ] valueCoveringAll:
		{57 to: 78. 90 to: 94}.
	^ [
	(clientsPurchases
		cover: (115 to: 130)
		declaredAt: (115 to: 130))
		at:
			(aClientId
				cover: (136 to: 144)
				declaredAt: (18 to: 26))
		ifAbsent: [
			[
			(OrderedCollection
				cover: (157 to: 173)
				declaredAt: (157 to: 173)) new ] valueCoveringAll:
				{175 to: 177} ]] valueCoveringAll:
		{132 to: 134. 146 to: 154}.! !

!testRun: #TusLibrosInterfaceTest #test13ListPurchasesBeforeDoingAnyCheckoutReturnsAnEmptyListOfPurchases stamp: 'ldmaf 6/13/2022 00:38:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/13/2022 00:38:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15ListPurchasesAfterDoingManyCheckoutsReturnsAListWithManyPurchases stamp: 'ldmaf 6/13/2022 00:38:38'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListPurchasesWithAnInvalidUserThrowsAnError stamp: 'ldmaf 6/13/2022 00:38:38'!
PASSED!
!Behavior method!
initialize
	(today _ [
	(DateAndTime
		cover: (23 to: 33)
		declaredAt: (23 to: 33)) now ] valueCoveringAll:
		{35 to: 37})
		cover: (14 to: 18)
		declaredAt: (14 to: 18).! !
!Behavior method!
createCart
	^ [
	(Cart
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) acceptingItemsOf:
		([
		(self coverAll:
			{39 to: 42}) defaultCatalog ] valueCoveringAll:
			{44 to: 57}) ] valueCoveringAll:
		{21 to: 37}.! !
!Behavior method!
defaultCatalog
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(Dictionary
		cover: (21 to: 30)
		declaredAt: (21 to: 30)) new ] valueCoveringAll:
		{32 to: 34}.
	[
	cascadeReceiver
		at:
			([
			(self coverAll:
				{42 to: 45}) itemSellByTheStore ] valueCoveringAll:
				{47 to: 64})
		put:
			([
			(self coverAll:
				{71 to: 74}) itemSellByTheStorePrice ] valueCoveringAll:
				{76 to: 98}) ] valueCoveringAll:
		{38 to: 40. 66 to: 69}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{103 to: 110} ] value.! !
!Behavior method!
itemSellByTheStore
	^ 'validBook' coverAll:
		{25 to: 35}.! !
!Behavior method!
itemSellByTheStorePrice
	^ 10 coverAll:
		{29 to: 30}.! !
!Behavior method!
acceptingItemsOf: aCatalog
	^ [
	([
	(self coverAll:
		{31 to: 34}) new ] valueCoveringAll:
		{36 to: 38}) initializeAcceptingItemsOf:
		(aCatalog
			cover: (68 to: 75)
			declaredAt: (19 to: 26)) ] valueCoveringAll:
		{40 to: 66}.! !
!Behavior method!
initializeAcceptingItemsOf: aCatalog
	(catalog _ aCatalog
		cover: (51 to: 58)
		declaredAt: (29 to: 36))
		cover: (40 to: 46)
		declaredAt: (40 to: 46).
	(items _ [
	(OrderedCollection
		cover: (71 to: 87)
		declaredAt: (71 to: 87)) new ] valueCoveringAll:
		{89 to: 91})
		cover: (62 to: 66)
		declaredAt: (62 to: 66).! !
!Behavior method!
isEmpty
	^ [
	(items
		cover: (13 to: 17)
		declaredAt: (13 to: 17)) isEmpty ] valueCoveringAll:
		{19 to: 25}.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ldmaf 6/13/2022 00:38:59'!
PASSED!
!Behavior method!
itemNotSellByTheStore
	^ 'invalidBook' coverAll:
		{27 to: 39}.! !
!Behavior method!
add: anItem
	^ [
	(self coverAll:
		{17 to: 20})
		add:
			(1 coverAll:
				{27 to: 27})
		of:
			(anItem
				cover: (33 to: 38)
				declaredAt: (6 to: 11)) ] valueCoveringAll:
		{22 to: 25. 29 to: 31}.! !
!Behavior method!
add: aQuantity of: anItem
	[
	(self coverAll:
		{29 to: 32}) assertIsValidQuantity:
		(aQuantity
			cover: (57 to: 65)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{34 to: 55}.
	[
	(self coverAll:
		{69 to: 72}) assertIsValidItem:
		(anItem
			cover: (93 to: 98)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{74 to: 91}.
	[
	(1 coverAll:
		{103 to: 103})
		to:
			(aQuantity
				cover: (109 to: 117)
				declaredAt: (6 to: 14))
		do: [ :aNumber |
			[
			(items
				cover: (136 to: 140)
				declaredAt: (136 to: 140)) add:
				(anItem
					cover: (147 to: 152)
					declaredAt: (20 to: 25)) ] valueCoveringAll:
				{142 to: 145} ]] valueCoveringAll:
		{105 to: 107. 119 to: 121}.! !
!Behavior method!
assertIsValidQuantity: aQuantity
	[
	([
	(aQuantity
		cover: (36 to: 44)
		declaredAt: (24 to: 32)) strictlyPositive ] valueCoveringAll:
		{46 to: 61}) ifFalse: [
		[
		(self coverAll:
			{74 to: 77}) error:
			([
			(self coverAll:
				{86 to: 89}) invalidQuantityErrorMessage ] valueCoveringAll:
				{91 to: 117}) ] valueCoveringAll:
			{79 to: 84} ]] valueCoveringAll:
		{63 to: 70}.! !
!Behavior method!
assertIsValidItem: anItem
	[
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anItem
			cover: (51 to: 56)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			(self coverAll:
				{82 to: 85}) invalidItemErrorMessage ] valueCoveringAll:
				{87 to: 109}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
invalidItemErrorMessage
	^ 'Item is not in catalog' coverAll:
		{29 to: 52}.! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ldmaf 6/13/2022 00:38:59'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ldmaf 6/13/2022 00:38:59'!
PASSED!
!Behavior method!
invalidQuantityErrorMessage
	^ 'Invalid number of items' coverAll:
		{33 to: 57}.! !

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ldmaf 6/13/2022 00:38:59'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ldmaf 6/13/2022 00:38:59'!
PASSED!
!Behavior method!
includes: anItem
	^ [
	(items
		cover: (21 to: 25)
		declaredAt: (21 to: 25)) includes:
		(anItem
			cover: (37 to: 42)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{27 to: 35}.! !

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ldmaf 6/13/2022 00:38:59'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ldmaf 6/13/2022 00:38:59'!
PASSED!
!Behavior method!
occurrencesOf: anItem
	^ [
	(items
		cover: (26 to: 30)
		declaredAt: (26 to: 30)) occurrencesOf:
		(anItem
			cover: (47 to: 52)
			declaredAt: (16 to: 21)) ] valueCoveringAll:
		{32 to: 45}.! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ldmaf 6/13/2022 00:38:59'!
PASSED!
!Behavior method!
notExpiredCreditCard
	^ [
	(CreditCard
		cover: (26 to: 35)
		declaredAt: (26 to: 35)) expiringOn:
		([
		(Month
			cover: (50 to: 54)
			declaredAt: (50 to: 54))
			month:
				([
				(today
					cover: (63 to: 67)
					declaredAt: (63 to: 67)) monthIndex ] valueCoveringAll:
					{69 to: 78})
			year:
				([
				([
				(today
					cover: (86 to: 90)
					declaredAt: (63 to: 67)) yearNumber ] valueCoveringAll:
					{92 to: 101}) +
					(1 coverAll:
						{105 to: 105}) ] valueCoveringAll:
					{103 to: 103}) ] valueCoveringAll:
			{56 to: 61. 80 to: 84}) ] valueCoveringAll:
		{37 to: 47}.! !
!Behavior method!
expiringOn: aMonth
	^ [
	([
	(self coverAll:
		{25 to: 28}) new ] valueCoveringAll:
		{30 to: 32}) initializeExpiringOn:
		(aMonth
			cover: (56 to: 61)
			declaredAt: (13 to: 18)) ] valueCoveringAll:
		{34 to: 54}.! !
!Behavior method!
initializeExpiringOn: aMonth
	(expiration _ aMonth
		cover: (48 to: 53)
		declaredAt: (23 to: 28))
		cover: (34 to: 43)
		declaredAt: (34 to: 43).! !
!Behavior method!
today
	^ today
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !
!Behavior method!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook
	[
	(self coverAll:
		{109 to: 112}) assertIsNotEmpty:
		(aCart
			cover: (132 to: 136)
			declaredAt: (13 to: 17)) ] valueCoveringAll:
		{114 to: 130}.
	[
	(self coverAll:
		{140 to: 143})
		assertIsNotExpired:
			(aCreditCard
				cover: (165 to: 175)
				declaredAt: (29 to: 39))
		on:
			(aDate
				cover: (181 to: 185)
				declaredAt: (74 to: 78)) ] valueCoveringAll:
		{145 to: 163. 177 to: 179}.
	^ [
	([
	(self coverAll:
		{192 to: 195}) new ] valueCoveringAll:
		{197 to: 199})
		initializeToCheckout:
			(aCart
				cover: (223 to: 227)
				declaredAt: (13 to: 17))
		charging:
			(aCreditCard
				cover: (239 to: 249)
				declaredAt: (29 to: 39))
		throught:
			(aMerchantProcessor
				cover: (261 to: 278)
				declaredAt: (51 to: 68))
		registeringOn:
			(aSalesBook
				cover: (295 to: 304)
				declaredAt: (95 to: 104)) ] valueCoveringAll:
		{201 to: 221. 229 to: 237. 251 to: 259. 280 to: 293}.! !
!Behavior method!
assertIsNotEmpty: aCart
	[
	([
	(aCart
		cover: (29 to: 33)
		declaredAt: (19 to: 23)) isEmpty ] valueCoveringAll:
		{35 to: 41}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(self coverAll:
				{64 to: 67}) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
				{69 to: 97}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
cartCanNotBeEmptyErrorMessage
	^ 'Can not check out an empty cart' coverAll:
		{35 to: 67}.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ldmaf 6/13/2022 00:39:00'!
PASSED!
!Behavior method!
assertIsNotExpired: aCreditCard on: aDate
	[
	([
	(aCreditCard
		cover: (47 to: 57)
		declaredAt: (21 to: 31)) isExpiredOn:
		(aDate
			cover: (72 to: 76)
			declaredAt: (37 to: 41)) ] valueCoveringAll:
		{59 to: 70}) ifTrue: [
		[
		(self coverAll:
			{89 to: 92}) error:
			([
			(self coverAll:
				{101 to: 104}) canNotChargeAnExpiredCreditCardErrorMessage ] valueCoveringAll:
				{106 to: 148}) ] valueCoveringAll:
			{94 to: 99} ]] valueCoveringAll:
		{79 to: 85}.! !
!Behavior method!
isExpiredOn: aDate
	^ [
	([
	(expiration
		cover: (25 to: 34)
		declaredAt: (25 to: 34)) start ] valueCoveringAll:
		{36 to: 40}) <
		([
		([
		(Month
			cover: (45 to: 49)
			declaredAt: (45 to: 49))
			month:
				([
				(aDate
					cover: (58 to: 62)
					declaredAt: (14 to: 18)) monthIndex ] valueCoveringAll:
					{64 to: 73})
			year:
				([
				(aDate
					cover: (81 to: 85)
					declaredAt: (14 to: 18)) yearNumber ] valueCoveringAll:
					{87 to: 96}) ] valueCoveringAll:
			{51 to: 56. 75 to: 79}) start ] valueCoveringAll:
			{99 to: 103}) ] valueCoveringAll:
		{42 to: 42}.! !
!Behavior method!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook
	(cart _ aCart
		cover: (117 to: 121)
		declaredAt: (23 to: 27))
		cover: (109 to: 112)
		declaredAt: (109 to: 112).
	(creditCard _ aCreditCard
		cover: (139 to: 149)
		declaredAt: (39 to: 49))
		cover: (125 to: 134)
		declaredAt: (125 to: 134).
	(merchantProcessor _ aMerchantProcessor
		cover: (174 to: 191)
		declaredAt: (61 to: 78))
		cover: (153 to: 169)
		declaredAt: (153 to: 169).
	(salesBook _ aSalesBook
		cover: (208 to: 217)
		declaredAt: (95 to: 104))
		cover: (195 to: 203)
		declaredAt: (195 to: 203).! !
!Behavior method!
checkOut
	[
	(self coverAll:
		{12 to: 15}) calculateTotal ] valueCoveringAll:
		{17 to: 30}.
	[
	(self coverAll:
		{34 to: 37}) debitTotal ] valueCoveringAll:
		{39 to: 48}.
	[
	(self coverAll:
		{52 to: 55}) registerSale ] valueCoveringAll:
		{57 to: 68}.
	^ total
		cover: (75 to: 79)
		declaredAt: (75 to: 79).! !
!Behavior method!
calculateTotal
	(total _ [
	(cart
		cover: (27 to: 30)
		declaredAt: (27 to: 30)) total ] valueCoveringAll:
		{32 to: 36})
		cover: (18 to: 22)
		declaredAt: (18 to: 22).! !
!Behavior method!
total
	^ [
	(items
		cover: (11 to: 15)
		declaredAt: (11 to: 15)) sum: [ :anItem |
		[
		(catalog
			cover: (34 to: 40)
			declaredAt: (34 to: 40)) at:
			(anItem
				cover: (46 to: 51)
				declaredAt: (25 to: 30)) ] valueCoveringAll:
			{42 to: 44} ]] valueCoveringAll:
		{17 to: 20}.! !
!Behavior method!
debitTotal
	[
	(merchantProcessor
		cover: (14 to: 30)
		declaredAt: (14 to: 30))
		debit:
			(total
				cover: (39 to: 43)
				declaredAt: (39 to: 43))
		from:
			(creditCard
				cover: (51 to: 60)
				declaredAt: (51 to: 60)) ] valueCoveringAll:
		{32 to: 37. 45 to: 49}.! !
!Behavior method!
registerSale
	[
	(salesBook
		cover: (16 to: 24)
		declaredAt: (16 to: 24)) add:
		([
		(self coverAll:
			{31 to: 34}) createSale ] valueCoveringAll:
			{36 to: 45}) ] valueCoveringAll:
		{26 to: 29}.! !
!Behavior method!
createSale
	^ [
	(Sale
		cover: (16 to: 19)
		declaredAt: (16 to: 19))
		of:
			(total
				cover: (25 to: 29)
				declaredAt: (25 to: 29))
		with:
			([
			(cart
				cover: (38 to: 41)
				declaredAt: (38 to: 41)) items ] valueCoveringAll:
				{43 to: 47}) ] valueCoveringAll:
		{21 to: 23. 31 to: 35}.! !
!Behavior method!
items
	^ [
	(items
		cover: (10 to: 14)
		declaredAt: (10 to: 14)) copy ] valueCoveringAll:
		{16 to: 19}.! !
!Behavior method!
of: aTotal with: aCollectionOfItems
	"should assert total is not negative or 0!!"
	^ [
	([
	(self coverAll:
		{85 to: 88}) new ] valueCoveringAll:
		{90 to: 92})
		initializeTotal:
			(aTotal
				cover: (111 to: 116)
				declaredAt: (5 to: 10))
		with:
			(aCollectionOfItems
				cover: (124 to: 141)
				declaredAt: (18 to: 35)) ] valueCoveringAll:
		{94 to: 109. 118 to: 122}.! !
!Behavior method!
initializeTotal: aTotal with: aCollectionOfItems
	(total _ aTotal
		cover: (61 to: 66)
		declaredAt: (18 to: 23))
		cover: (52 to: 56)
		declaredAt: (52 to: 56).
	(id _ 1 coverAll:
		{76 to: 76})
		cover: (70 to: 71)
		declaredAt: (70 to: 71).
	(purchasedItems _ aCollectionOfItems
		cover: (98 to: 115)
		declaredAt: (31 to: 48))
		cover: (80 to: 93)
		declaredAt: (80 to: 93).! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ldmaf 6/13/2022 00:39:00'!
PASSED!
!Behavior method!
expiredCreditCard
	^ [
	(CreditCard
		cover: (23 to: 32)
		declaredAt: (23 to: 32)) expiringOn:
		([
		(Month
			cover: (47 to: 51)
			declaredAt: (47 to: 51))
			month:
				([
				(today
					cover: (60 to: 64)
					declaredAt: (60 to: 64)) monthIndex ] valueCoveringAll:
					{66 to: 75})
			year:
				([
				([
				(today
					cover: (83 to: 87)
					declaredAt: (60 to: 64)) yearNumber ] valueCoveringAll:
					{89 to: 98}) -
					(1 coverAll:
						{102 to: 102}) ] valueCoveringAll:
					{100 to: 100}) ] valueCoveringAll:
			{53 to: 58. 77 to: 81}) ] valueCoveringAll:
		{34 to: 44}.! !
!Behavior method!
canNotChargeAnExpiredCreditCardErrorMessage
	^ 'Can not charge an expired credit card' coverAll:
		{49 to: 87}.! !

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ldmaf 6/13/2022 00:39:00'!
PASSED!
!Behavior method!
total
	^ total
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ldmaf 6/13/2022 00:39:00'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ldmaf 6/13/2022 00:39:00'!
PASSED!
!Behavior method!
creditCardHasNoCreditErrorMessage
	^ 'Credit card has no credit' coverAll:
		{39 to: 65}.! !

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ldmaf 6/13/2022 00:39:00'!
PASSED!
!Behavior method!
with: aDictionary
	^ [
	([
	(self coverAll:
		{22 to: 25}) new ] valueCoveringAll:
		{27 to: 29}) initializeWith:
		(aDictionary
			cover: (47 to: 57)
			declaredAt: (7 to: 17)) ] valueCoveringAll:
		{31 to: 45}.! !
!Behavior method!
initializeWith: aDictionary
	(users _ aDictionary
		cover: (39 to: 49)
		declaredAt: (17 to: 27))
		cover: (31 to: 35)
		declaredAt: (31 to: 35).
	(carts _ [
	(Dictionary
		cover: (61 to: 70)
		declaredAt: (61 to: 70)) new ] valueCoveringAll:
		{72 to: 74})
		cover: (53 to: 57)
		declaredAt: (53 to: 57).
	(tusLibrosCatalogue _ [
	(Dictionary
		cover: (99 to: 108)
		declaredAt: (61 to: 70)) new ] valueCoveringAll:
		{110 to: 112})
		cover: (78 to: 95)
		declaredAt: (78 to: 95).
	(cartsTimestamps _ [
	(Dictionary
		cover: (134 to: 143)
		declaredAt: (61 to: 70)) new ] valueCoveringAll:
		{145 to: 147})
		cover: (116 to: 130)
		declaredAt: (116 to: 130).
	(debitBehavior _ [ :anAmount :aCreditCard |
	nil ])
		cover: (151 to: 163)
		declaredAt: (151 to: 163).
	(salesBook _ [
	(OrderedCollection
		cover: (211 to: 227)
		declaredAt: (211 to: 227)) new ] valueCoveringAll:
		{229 to: 231})
		cover: (199 to: 207)
		declaredAt: (199 to: 207).
	(clientsCarts _ [
	(Dictionary
		cover: (250 to: 259)
		declaredAt: (61 to: 70)) new ] valueCoveringAll:
		{261 to: 263})
		cover: (235 to: 246)
		declaredAt: (235 to: 246).
	(clientsPurchases _ [
	(Dictionary
		cover: (286 to: 295)
		declaredAt: (61 to: 70)) new ] valueCoveringAll:
		{297 to: 299})
		cover: (267 to: 282)
		declaredAt: (267 to: 282).
	[
	(tusLibrosCatalogue
		cover: (303 to: 320)
		declaredAt: (78 to: 95)) add:
		([
		('9780764548345' coverAll:
			{328 to: 342}) ->
			(100 coverAll:
				{345 to: 347}) ] valueCoveringAll:
			{343 to: 344}) ] valueCoveringAll:
		{322 to: 325}.
	[
	(tusLibrosCatalogue
		cover: (352 to: 369)
		declaredAt: (78 to: 95)) add:
		([
		('9788495070524' coverAll:
			{377 to: 391}) ->
			(73 coverAll:
				{396 to: 397}) ] valueCoveringAll:
			{393 to: 394}) ] valueCoveringAll:
		{371 to: 374}.
	[
	(tusLibrosCatalogue
		cover: (402 to: 419)
		declaredAt: (78 to: 95)) add:
		([
		('9780764548345' coverAll:
			{427 to: 441}) ->
			(12 coverAll:
				{446 to: 447}) ] valueCoveringAll:
			{443 to: 444}) ] valueCoveringAll:
		{421 to: 424}.
	[
	(tusLibrosCatalogue
		cover: (452 to: 469)
		declaredAt: (78 to: 95)) add:
		([
		('9789871497522' coverAll:
			{477 to: 491}) ->
			(59 coverAll:
				{496 to: 497}) ] valueCoveringAll:
			{493 to: 494}) ] valueCoveringAll:
		{471 to: 474}.! !
!Behavior method!
createCartWith: aClientId and: aPassword at: aDateAndTime
	| id |
	[
	(self coverAll:
		{66 to: 69})
		validateCredentialsOf:
			(aClientId
				cover: (94 to: 102)
				declaredAt: (17 to: 25))
		with:
			(aPassword
				cover: (110 to: 118)
				declaredAt: (32 to: 40)) ] valueCoveringAll:
		{71 to: 92. 104 to: 108}.
	(id _ [
	(self coverAll:
		{129 to: 132}) generateRandomId ] valueCoveringAll:
		{134 to: 149})
		cover: (124 to: 125)
		declaredAt: (61 to: 62).
	[
	(carts
		cover: (229 to: 233)
		declaredAt: (229 to: 233)) add:
		([
		(id
			cover: (241 to: 242)
			declaredAt: (61 to: 62)) ->
			([
			(Cart
				cover: (248 to: 251)
				declaredAt: (248 to: 251)) acceptingItemsOf:
				(tusLibrosCatalogue
					cover: (271 to: 288)
					declaredAt: (271 to: 288)) ] valueCoveringAll:
				{253 to: 269}) ] valueCoveringAll:
			{244 to: 245}) ] valueCoveringAll:
		{235 to: 238}.
	[
	(cartsTimestamps
		cover: (294 to: 308)
		declaredAt: (294 to: 308)) add:
		([
		(id
			cover: (316 to: 317)
			declaredAt: (61 to: 62)) ->
			(aDateAndTime
				cover: (322 to: 333)
				declaredAt: (46 to: 57)) ] valueCoveringAll:
			{319 to: 320}) ] valueCoveringAll:
		{310 to: 313}.
	[
	(clientsCarts
		cover: (338 to: 349)
		declaredAt: (338 to: 349)) add:
		([
		(id
			cover: (356 to: 357)
			declaredAt: (61 to: 62)) ->
			(aClientId
				cover: (362 to: 370)
				declaredAt: (17 to: 25)) ] valueCoveringAll:
			{359 to: 360}) ] valueCoveringAll:
		{351 to: 354}.
	^ id
		cover: (375 to: 376)
		declaredAt: (61 to: 62).! !
!Behavior method!
validateCredentialsOf: aClientId with: aClientPassword
	^ [
	([
	(users
		cover: (61 to: 65)
		declaredAt: (61 to: 65))
		at:
			(aClientId
				cover: (71 to: 79)
				declaredAt: (24 to: 32))
		ifAbsent: [
			[
			(self coverAll:
				{92 to: 95}) error:
				('Invalid Credentials.' coverAll:
					{104 to: 125}) ] valueCoveringAll:
				{97 to: 102} ]] valueCoveringAll:
		{67 to: 69. 81 to: 89}) =
		(aClientPassword
			cover: (131 to: 145)
			declaredAt: (40 to: 54)) ] valueCoveringAll:
		{129 to: 129}.! !
!Behavior method!
generateRandomId
	^ [
	([
	([
	(Random
		cover: (23 to: 28)
		declaredAt: (23 to: 28)) next ] valueCoveringAll:
		{30 to: 33}) *
		(547 coverAll:
			{37 to: 39}) ] valueCoveringAll:
		{35 to: 35}) asInteger ] valueCoveringAll:
		{42 to: 50}.! !
!Behavior method!
listCart: aCartId
	| listOfBooks items |
	[
	([
	(self coverAll:
		{45 to: 48}) hasCart:
		(aCartId
			cover: (59 to: 65)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{50 to: 57}) ifFalse: [
		[
		(self coverAll:
			{78 to: 81}) error:
			('Non Existing Cart Id.' coverAll:
				{90 to: 112}) ] valueCoveringAll:
			{83 to: 88} ]] valueCoveringAll:
		{68 to: 75}.
	(listOfBooks _ [
	(Dictionary
		cover: (131 to: 140)
		declaredAt: (131 to: 140)) new ] valueCoveringAll:
		{142 to: 144})
		cover: (117 to: 127)
		declaredAt: (23 to: 33).
	(items _ [
	([
	(carts
		cover: (158 to: 162)
		declaredAt: (158 to: 162)) at:
		(aCartId
			cover: (168 to: 174)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{164 to: 166}) items ] valueCoveringAll:
		{177 to: 181})
		cover: (148 to: 152)
		declaredAt: (35 to: 39).
	[
	(items
		cover: (185 to: 189)
		declaredAt: (35 to: 39)) do: [ :aBook |
		[
		(listOfBooks
			cover: (205 to: 215)
			declaredAt: (23 to: 33)) add:
			([
			(aBook
				cover: (222 to: 226)
				declaredAt: (197 to: 201)) ->
				([
				(items
					cover: (230 to: 234)
					declaredAt: (35 to: 39)) occurrencesOf:
					(aBook
						cover: (251 to: 255)
						declaredAt: (197 to: 201)) ] valueCoveringAll:
					{236 to: 249}) ] valueCoveringAll:
				{227 to: 228}) ] valueCoveringAll:
			{217 to: 220} ]] valueCoveringAll:
		{191 to: 193}.
	^ listOfBooks
		cover: (262 to: 272)
		declaredAt: (23 to: 33).! !
!Behavior method!
hasCart: aCartId
	^ [
	([
	(carts
		cover: (23 to: 27)
		declaredAt: (23 to: 27)) keys ] valueCoveringAll:
		{29 to: 32}) includes:
		(aCartId
			cover: (44 to: 50)
			declaredAt: (10 to: 16)) ] valueCoveringAll:
		{34 to: 42}.! !

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/13/2022 00:39:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/13/2022 00:39:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/13/2022 00:39:00'!
PASSED!
!Behavior method!
add: anAmount of: anIsbn to: aCartId
	[
	([
	(self coverAll:
		{40 to: 43}) hasCart:
		(aCartId
			cover: (54 to: 60)
			declaredAt: (30 to: 36)) ] valueCoveringAll:
		{45 to: 52}) ifFalse: [
		[
		(self coverAll:
			{73 to: 76}) error:
			('Non Existing Cart Id.' coverAll:
				{85 to: 107}) ] valueCoveringAll:
			{78 to: 83} ]] valueCoveringAll:
		{63 to: 70}.
	[
	([
	(self coverAll:
		{115 to: 118}) assertCartIsExpired:
		(aCartId
			cover: (141 to: 147)
			declaredAt: (30 to: 36)) ] valueCoveringAll:
		{120 to: 139}) ifTrue: [
		[
		(self coverAll:
			{160 to: 163}) error:
			('Cart Expired.' coverAll:
				{172 to: 186}) ] valueCoveringAll:
			{165 to: 170} ]] valueCoveringAll:
		{151 to: 157}.
	[
	([
	(carts
		cover: (192 to: 196)
		declaredAt: (192 to: 196)) at:
		(aCartId
			cover: (202 to: 208)
			declaredAt: (30 to: 36)) ] valueCoveringAll:
		{198 to: 200})
		add:
			(anAmount
				cover: (216 to: 223)
				declaredAt: (6 to: 13))
		of:
			(anIsbn
				cover: (229 to: 234)
				declaredAt: (19 to: 24)) ] valueCoveringAll:
		{211 to: 214. 225 to: 227}.! !
!Behavior method!
assertCartIsExpired: aCartId
	^ [
	([
	([
	([
	(DateAndTime
		cover: (36 to: 46)
		declaredAt: (36 to: 46)) now ] valueCoveringAll:
		{48 to: 50}) -
		([
		(cartsTimestamps
			cover: (56 to: 70)
			declaredAt: (56 to: 70)) at:
			(aCartId
				cover: (76 to: 82)
				declaredAt: (22 to: 28)) ] valueCoveringAll:
			{72 to: 74}) ] valueCoveringAll:
		{53 to: 53}) totalMinutes ] valueCoveringAll:
		{86 to: 97}) >=
		(30 coverAll:
			{102 to: 103}) ] valueCoveringAll:
		{99 to: 100}.! !

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/13/2022 00:39:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/13/2022 00:39:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/13/2022 00:39:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/13/2022 00:39:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/13/2022 00:39:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/13/2022 00:39:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/13/2022 00:39:00'!
PASSED!
!Behavior method!
expiringOn: aMonth withNumber: aCreditCardNumber andOwner: anOwner
	^ [
	([
	(self coverAll:
		{74 to: 77}) new ] valueCoveringAll:
		{79 to: 81})
		initializeExpiringOn:
			(aMonth
				cover: (105 to: 110)
				declaredAt: (13 to: 18))
		withNumber:
			(aCreditCardNumber
				cover: (124 to: 140)
				declaredAt: (32 to: 48))
		andOwner:
			(anOwner
				cover: (152 to: 158)
				declaredAt: (60 to: 66)) ] valueCoveringAll:
		{83 to: 103. 112 to: 122. 142 to: 150}.! !
!Behavior method!
initializeExpiringOn: aMonth withNumber: aCreditCardNumber andOwner: anOwner
	(expiration _ aMonth
		cover: (95 to: 100)
		declaredAt: (23 to: 28))
		cover: (81 to: 90)
		declaredAt: (81 to: 90).
	(number _ aCreditCardNumber
		cover: (114 to: 130)
		declaredAt: (42 to: 58))
		cover: (104 to: 109)
		declaredAt: (104 to: 109).
	(owner _ anOwner
		cover: (143 to: 149)
		declaredAt: (70 to: 76))
		cover: (134 to: 138)
		declaredAt: (134 to: 138).! !
!Behavior method!
checkoutOf: aCartId with: aCreditCard
	^ [
	(self coverAll:
		{43 to: 46})
		checkoutOf:
			(aCartId
				cover: (60 to: 66)
				declaredAt: (13 to: 19))
		with:
			(aCreditCard
				cover: (74 to: 84)
				declaredAt: (27 to: 37))
		at:
			([
			(DateAndTime
				cover: (90 to: 100)
				declaredAt: (90 to: 100)) now ] valueCoveringAll:
				{102 to: 104}) ] valueCoveringAll:
		{48 to: 58. 68 to: 72. 86 to: 88}.! !
!Behavior method!
checkoutOf: aCartId with: aCreditCard at: aDateTime
	| total cashier sale cartOwner purchases |
	[
	([
	(self coverAll:
		{97 to: 100}) hasCart:
		(aCartId
			cover: (111 to: 117)
			declaredAt: (13 to: 19)) ] valueCoveringAll:
		{102 to: 109}) ifFalse: [
		[
		(self coverAll:
			{130 to: 133}) error:
			('Non Existing Cart Id.' coverAll:
				{142 to: 164}) ] valueCoveringAll:
			{135 to: 140} ]] valueCoveringAll:
		{120 to: 127}.
	[
	([
	(self coverAll:
		{171 to: 174})
		assertCartIsExpired:
			(aCartId
				cover: (197 to: 203)
				declaredAt: (13 to: 19))
		at:
			(aDateTime
				cover: (209 to: 217)
				declaredAt: (43 to: 51)) ] valueCoveringAll:
		{176 to: 195. 205 to: 207}) ifTrue: [
		[
		(self coverAll:
			{230 to: 233}) error:
			('Cart Expired.' coverAll:
				{242 to: 256}) ] valueCoveringAll:
			{235 to: 240} ]] valueCoveringAll:
		{221 to: 227}.
	(cashier _ [
	(Cashier
		cover: (273 to: 279)
		declaredAt: (273 to: 279))
		toCheckout:
			([
			(carts
				cover: (294 to: 298)
				declaredAt: (294 to: 298)) at:
				(aCartId
					cover: (304 to: 310)
					declaredAt: (13 to: 19)) ] valueCoveringAll:
				{300 to: 302})
		charging:
			(aCreditCard
				cover: (334 to: 344)
				declaredAt: (27 to: 37))
		throught:
			(self coverAll:
				{362 to: 365})
		on:
			([
			(DateAndTime
				cover: (378 to: 388)
				declaredAt: (378 to: 388)) now ] valueCoveringAll:
				{390 to: 392})
		registeringOn:
			(salesBook
				cover: (416 to: 424)
				declaredAt: (416 to: 424)) ] valueCoveringAll:
		{281 to: 291. 324 to: 332. 352 to: 360. 373 to: 375. 401 to: 414})
		cover: (263 to: 269)
		declaredAt: (61 to: 67).
	(total _ [
	(cashier
		cover: (442 to: 448)
		declaredAt: (61 to: 67)) checkOut ] valueCoveringAll:
		{450 to: 457})
		cover: (434 to: 438)
		declaredAt: (55 to: 59).
	(sale _ [
	(self coverAll:
		{469 to: 472})
		generateSaleOf:
			(aCartId
				cover: (490 to: 496)
				declaredAt: (13 to: 19))
		withTotal:
			(total
				cover: (509 to: 513)
				declaredAt: (55 to: 59)) ] valueCoveringAll:
		{474 to: 488. 498 to: 507})
		cover: (461 to: 464)
		declaredAt: (69 to: 72).
	(cartOwner _ [
	(clientsCarts
		cover: (533 to: 544)
		declaredAt: (533 to: 544)) at:
		(aCartId
			cover: (550 to: 556)
			declaredAt: (13 to: 19)) ] valueCoveringAll:
		{546 to: 548})
		cover: (520 to: 528)
		declaredAt: (74 to: 82).
	(purchases _ [
	(self coverAll:
		{574 to: 577}) fetchClientPurchases:
		(cartOwner
			cover: (601 to: 609)
			declaredAt: (74 to: 82)) ] valueCoveringAll:
		{579 to: 599})
		cover: (561 to: 569)
		declaredAt: (84 to: 92).
	[
	(purchases
		cover: (614 to: 622)
		declaredAt: (84 to: 92)) add:
		(sale
			cover: (629 to: 632)
			declaredAt: (69 to: 72)) ] valueCoveringAll:
		{624 to: 627}.
	[
	(carts
		cover: (638 to: 642)
		declaredAt: (294 to: 298)) removeKey:
		(aCartId
			cover: (655 to: 661)
			declaredAt: (13 to: 19)) ] valueCoveringAll:
		{644 to: 653}.
	[
	(clientsCarts
		cover: (665 to: 676)
		declaredAt: (533 to: 544)) removeKey:
		(aCartId
			cover: (689 to: 695)
			declaredAt: (13 to: 19)) ] valueCoveringAll:
		{678 to: 687}.
	^ sale
		cover: (702 to: 705)
		declaredAt: (69 to: 72).! !
!Behavior method!
assertCartIsExpired: aCartId at: aDateTime
	^ [
	([
	([
	(aDateTime
		cover: (50 to: 58)
		declaredAt: (34 to: 42)) -
		([
		(cartsTimestamps
			cover: (64 to: 78)
			declaredAt: (64 to: 78)) at:
			(aCartId
				cover: (84 to: 90)
				declaredAt: (22 to: 28)) ] valueCoveringAll:
			{80 to: 82}) ] valueCoveringAll:
		{61 to: 61}) totalMinutes ] valueCoveringAll:
		{94 to: 105}) >=
		(30 coverAll:
			{110 to: 111}) ] valueCoveringAll:
		{107 to: 108}.! !
!Behavior method!
debit: anAmount from: aCreditCard
	^ [
	(debitBehavior
		cover: (39 to: 51)
		declaredAt: (39 to: 51))
		value:
			(anAmount
				cover: (60 to: 67)
				declaredAt: (8 to: 15))
		value:
			(aCreditCard
				cover: (76 to: 86)
				declaredAt: (23 to: 33)) ] valueCoveringAll:
		{53 to: 58. 69 to: 74}.! !
!Behavior method!
generateSaleOf: aCartId withTotal: total
	^ [
	(Sale
		cover: (46 to: 49)
		declaredAt: (46 to: 49))
		of:
			(total
				cover: (55 to: 59)
				declaredAt: (36 to: 40))
		with:
			([
			([
			(carts
				cover: (69 to: 73)
				declaredAt: (69 to: 73)) at:
				(aCartId
					cover: (79 to: 85)
					declaredAt: (17 to: 23)) ] valueCoveringAll:
				{75 to: 77}) items ] valueCoveringAll:
				{88 to: 92}) ] valueCoveringAll:
		{51 to: 53. 61 to: 65}.! !
!Behavior method!
fetchClientPurchases: cartOwner
	^ [
	(clientsPurchases
		cover: (37 to: 52)
		declaredAt: (37 to: 52))
		at:
			(cartOwner
				cover: (58 to: 66)
				declaredAt: (23 to: 31))
		ifAbsent: [
			[
			([
			(clientsPurchases
				cover: (80 to: 95)
				declaredAt: (37 to: 52)) add:
				([
				(cartOwner
					cover: (102 to: 110)
					declaredAt: (23 to: 31)) ->
					([
					(OrderedCollection
						cover: (113 to: 129)
						declaredAt: (113 to: 129)) new ] valueCoveringAll:
						{131 to: 133}) ] valueCoveringAll:
					{111 to: 112}) ] valueCoveringAll:
				{97 to: 100}) value ] valueCoveringAll:
				{136 to: 140} ]] valueCoveringAll:
		{54 to: 56. 68 to: 76}.! !
!Behavior method!
id
	^ id
		cover: (6 to: 7)
		declaredAt: (6 to: 7).! !
!Behavior method!
transactionAmountOf: aSaleId
	^ [
	([
	([
	(salesBook
		cover: (35 to: 43)
		declaredAt: (35 to: 43)) select: [ :aSale |
		[
		([
		(aSale
			cover: (64 to: 68)
			declaredAt: (55 to: 59)) id ] valueCoveringAll:
			{70 to: 71}) =
			(aSaleId
				cover: (76 to: 82)
				declaredAt: (22 to: 28)) ] valueCoveringAll:
			{74 to: 74} ]] valueCoveringAll:
		{45 to: 51}) first ] valueCoveringAll:
		{87 to: 91}) total ] valueCoveringAll:
		{93 to: 97}.! !
!Behavior method!
quantityOf: anIsbn
	^ [
	(purchasedItems
		cover: (24 to: 37)
		declaredAt: (24 to: 37)) occurrencesOf:
		(anIsbn
			cover: (54 to: 59)
			declaredAt: (13 to: 18)) ] valueCoveringAll:
		{39 to: 52}.! !

!testRun: #TusLibrosInterfaceTest #test10CheckoutWithAValidCreditCardCreatesACorrectSaleAndRemovesTheCartFromTheService stamp: 'ldmaf 6/13/2022 00:39:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CheckoutWithAnInvalidCreditCardThrowsAnExpiredCardErrorAndKeepsTheCartInTheService stamp: 'ldmaf 6/13/2022 00:39:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutWithAnExpiredCartShouldThrowAnError stamp: 'ldmaf 6/13/2022 00:39:00'!
PASSED!
!Behavior method!
listPurchasesOf: aClientId with: aClientPassword
	[
	(self coverAll:
		{52 to: 55})
		validateCredentialsOf:
			(aClientId
				cover: (80 to: 88)
				declaredAt: (18 to: 26))
		with:
			(aClientPassword
				cover: (96 to: 110)
				declaredAt: (34 to: 48)) ] valueCoveringAll:
		{57 to: 78. 90 to: 94}.
	^ [
	(clientsPurchases
		cover: (115 to: 130)
		declaredAt: (115 to: 130))
		at:
			(aClientId
				cover: (136 to: 144)
				declaredAt: (18 to: 26))
		ifAbsent: [
			[
			(OrderedCollection
				cover: (157 to: 173)
				declaredAt: (157 to: 173)) new ] valueCoveringAll:
				{175 to: 177} ]] valueCoveringAll:
		{132 to: 134. 146 to: 154}.! !

!testRun: #TusLibrosInterfaceTest #test13ListPurchasesBeforeDoingAnyCheckoutReturnsAnEmptyListOfPurchases stamp: 'ldmaf 6/13/2022 00:39:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/13/2022 00:39:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15ListPurchasesAfterDoingManyCheckoutsReturnsAListWithManyPurchases stamp: 'ldmaf 6/13/2022 00:39:00'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListPurchasesWithAnInvalidUserThrowsAnError stamp: 'ldmaf 6/13/2022 00:39:00'!
PASSED!

----SNAPSHOT----(13 June 2022 00:44:23) CuisUniversity-5096.image priorSource: 5314800!

!classRenamed: #TusLibrosFakeService as: #TusLibrosService stamp: 'ldmaf 6/13/2022 00:46:09'!
Smalltalk renameClassNamed: #TusLibrosFakeService as: #TusLibrosService!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:46:09' prior: 50493155!
test05AddingToANonExistingCartIdThrowsAnError
	|clientId clientPassword service fakeCartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	fakeCartId _ 666.
	service _ TusLibrosService with: usersDicc.
	service createCartWith: clientId and: clientPassword at: DateAndTime now.
	self should: [service add: 3 of: '9780764548345' to: fakeCartId.] raise: Error withMessageText: 'Non Existing Cart Id.'! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:46:09' prior: 50495970!
test02CreateCartWithInvalidCredentialsShouldNotCreateCart
	|clientId clientPassword service |
	usersDicc _ Dictionary new.
	clientId _ 2.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	self should: [service createCartWith: clientId and: clientPassword at: DateAndTime now] raise: Error withMessageText: 'Invalid Credentials.'! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:46:09' prior: 50495582!
test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase
	| clientId clientPassword service cartId creditCard purchases|
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.  
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	service checkoutOf: cartId with: creditCard.
	purchases _ service listPurchasesOf: clientId with: clientPassword.
	self assert: (purchases isEmpty not).
	self assert: ((purchases first quantityOf: '9780764548345') = 10).
! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:46:09' prior: 50494986!
test13ListPurchasesBeforeDoingAnyCheckoutReturnsAnEmptyListOfPurchases
	| clientId clientPassword service cartId |  
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	
	self assert: ((service listPurchasesOf: clientId with: clientPassword) isEmpty).
! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:46:10' prior: 50493317!
test01CreateCartWithValidCredentialsReturnsAnEmptyCart
	|clientId clientPassword service cartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (clientId->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ (service createCartWith: clientId and: clientPassword at: DateAndTime now). 
	self assert: ((service listCart: cartId) isEmpty).! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:46:10' prior: 50493131!
test04ListingANonExistingCartIdThrowsAnError
	|clientId clientPassword service cartId fakeCartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	fakeCartId _ 999.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 3 of: '9780764548345' to: cartId.
	self should: [service listCart: fakeCartId] raise: Error withMessageText: 'Non Existing Cart Id.'! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:46:10' prior: 50493041!
test09CartShouldExistForThirtyMinutes
	| clientId clientPassword service cartId creationTimeInThePast |
	creationTimeInThePast _ (DateAndTime now) subtractDuration: (Duration minutes: 30).
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: creationTimeInThePast.
	self should: [service add: 3 of: '9780764548345' to: cartId]  raise: Error  withMessageText: 'Cart Expired.' .
! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:46:10' prior: 50493198!
test06AddingAnInvalidAmountOfBooksToACartThrowsAnError
	|clientId clientPassword service cartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	self should: [service add: -1 of: '9780764548345' to: cartId.] raise: Error withMessageText: 'Invalid number of items'! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:46:10' prior: 50493334!
test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts
	| clientId clientPassword clientId2 clientPassword2 service cartId cartId2 |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	clientId2 _ 2.
	clientPassword2 _ '54321bb'.
	usersDicc add: (clientId->clientPassword).
	usersDicc add: (clientId2->clientPassword2).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	cartId2 _ service createCartWith: clientId2 and: clientPassword2 at: DateAndTime now.
	self assert: ((service listCart: cartId) isEmpty).
	self assert: ((service listCart: cartId2) isEmpty).
	self assert: ((cartId = cartId2) not)	
! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:46:10' prior: 50493107!
test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt
	|clientId clientPassword service cartId |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 3 of: '9780764548345' to: cartId.
	self assert: (((service listCart: cartId) at: '9780764548345') = 3).! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:46:10' prior: 50498042!
test12CheckoutWithAnExpiredCartShouldThrowAnError
	| clientId clientPassword service creditCard cartId creationTimeInThePast xxx|
	creationTimeInThePast _ (DateAndTime now) subtractDuration: (Duration minutes: 29).
	xxx _ (DateAndTime tomorrow).
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: creationTimeInThePast.
	service add: 10 of: '9780764548345' to: cartId.
	self should: [service checkoutOf: cartId with: creditCard at: xxx] raise: Error  withMessageText: 'Cart Expired.'.
! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:46:10' prior: 50494449!
test11CheckoutWithAnInvalidCreditCardThrowsAnExpiredCardErrorAndKeepsTheCartInTheService
	| clientId clientPassword service creditCard cartId|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber - 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.

	self should: [service checkoutOf: cartId with: creditCard] raise: Error withMessageText: 'Can not charge an expired credit card'.
	self assert: ((service hasCart: cartId)).
! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:46:10' prior: 50494252!
test10CheckoutWithAValidCreditCardCreatesACorrectSaleAndRemovesTheCartFromTheService
	| clientId clientPassword service cartIdticket creditCard cartId ticket|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	ticket _ service checkoutOf: cartId with: creditCard.
	self assert: ((service transactionAmountOf: (ticket id)) = (ticket total)).
	self assert: ((service hasCart: cartId) not).
	self assert: ((ticket quantityOf: '9780764548345') = 10).
! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:46:10' prior: 50496020!
test16ListPurchasesWithAnInvalidUserThrowsAnError
	| clientId clientPassword service|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (clientId->clientPassword).
	service _ TusLibrosService with: usersDicc.
	self should: [service listPurchasesOf: 999 with: clientPassword.] raise: Error withMessageText: 'Invalid Credentials.'.
	! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:46:10' prior: 50495698!
test15ListPurchasesAfterDoingManyCheckoutsReturnsAListWithManyPurchases
	| clientId clientPassword service cartId creditCard purchases|
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.  
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	service checkoutOf: cartId with: creditCard.
	
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 5 of: '9789871497522' to: cartId.
	service checkoutOf: cartId with: creditCard.
	purchases _ service listPurchasesOf: clientId with: clientPassword.
	self assert: (purchases isEmpty not).
	self assert: ((purchases first quantityOf: '9780764548345') = 10).
	self assert: ((purchases second quantityOf: '9789871497522') = 5).! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:46:10' prior: 50493221!
test07AddingAnInvalidANonExistingBookToACartThrowsAnError
	|clientId clientPassword service cartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	self should: [service add: 2 of: '123' to: cartId.] raise: Error withMessageText: 'Item is not in catalog'! !
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:46:10' prior: 50493243!
test08ListingCartReturnsAllBooksInside
	| clientId clientPassword service cartId listOfBooks |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 3 of: '9780764548345' to: cartId.
	service add: 12 of: '9789871497522' to: cartId.
	service add: 7 of: '9788495070524' to: cartId.
	listOfBooks _ service listCart: cartId.
	self assert: ((listOfBooks at: '9780764548345') = 3).
	self assert: ((listOfBooks at: '9789871497522') = 12).
	self assert: ((listOfBooks at: '9788495070524') = 7).! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CheckoutWithAValidCreditCardCreatesACorrectSaleAndRemovesTheCartFromTheService stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CheckoutWithAnInvalidCreditCardThrowsAnExpiredCardErrorAndKeepsTheCartInTheService stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutWithAnExpiredCartShouldThrowAnError stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13ListPurchasesBeforeDoingAnyCheckoutReturnsAnEmptyListOfPurchases stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15ListPurchasesAfterDoingManyCheckoutsReturnsAListWithManyPurchases stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListPurchasesWithAnInvalidUserThrowsAnError stamp: 'ldmaf 6/13/2022 00:46:18'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:46:49'!
test02CreateManyCartsWithValidCredentialsShouldCreateManyCarts
	| clientId clientPassword clientId2 clientPassword2 service cartId cartId2 |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	clientId2 _ 2.
	clientPassword2 _ '54321bb'.
	usersDicc add: (clientId->clientPassword).
	usersDicc add: (clientId2->clientPassword2).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	cartId2 _ service createCartWith: clientId2 and: clientPassword2 at: DateAndTime now.
	self assert: ((service listCart: cartId) isEmpty).
	self assert: ((service listCart: cartId2) isEmpty).
	self assert: ((cartId = cartId2) not)	
! !

!methodRemoval: TusLibrosInterfaceTest #test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/13/2022 00:46:49'!
test02BisCreateManyCartsWithValidCredentialsShouldCreateManyCarts
	| clientId clientPassword clientId2 clientPassword2 service cartId cartId2 |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	clientId2 _ 2.
	clientPassword2 _ '54321bb'.
	usersDicc add: (clientId->clientPassword).
	usersDicc add: (clientId2->clientPassword2).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	cartId2 _ service createCartWith: clientId2 and: clientPassword2 at: DateAndTime now.
	self assert: ((service listCart: cartId) isEmpty).
	self assert: ((service listCart: cartId2) isEmpty).
	self assert: ((cartId = cartId2) not)	
!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:47:14'!
test17ListPurchasesWithAnInvalidUserThrowsAnError
	| clientId clientPassword service|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (clientId->clientPassword).
	service _ TusLibrosService with: usersDicc.
	self should: [service listPurchasesOf: 999 with: clientPassword.] raise: Error withMessageText: 'Invalid Credentials.'.
	! !

!methodRemoval: TusLibrosInterfaceTest #test16ListPurchasesWithAnInvalidUserThrowsAnError stamp: 'ldmaf 6/13/2022 00:47:14'!
test16ListPurchasesWithAnInvalidUserThrowsAnError
	| clientId clientPassword service|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (clientId->clientPassword).
	service _ TusLibrosService with: usersDicc.
	self should: [service listPurchasesOf: 999 with: clientPassword.] raise: Error withMessageText: 'Invalid Credentials.'.
	!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:47:21'!
test16ListPurchasesAfterDoingManyCheckoutsReturnsAListWithManyPurchases
	| clientId clientPassword service cartId creditCard purchases|
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.  
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	service checkoutOf: cartId with: creditCard.
	
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 5 of: '9789871497522' to: cartId.
	service checkoutOf: cartId with: creditCard.
	purchases _ service listPurchasesOf: clientId with: clientPassword.
	self assert: (purchases isEmpty not).
	self assert: ((purchases first quantityOf: '9780764548345') = 10).
	self assert: ((purchases second quantityOf: '9789871497522') = 5).! !

!methodRemoval: TusLibrosInterfaceTest #test15ListPurchasesAfterDoingManyCheckoutsReturnsAListWithManyPurchases stamp: 'ldmaf 6/13/2022 00:47:21'!
test15ListPurchasesAfterDoingManyCheckoutsReturnsAListWithManyPurchases
	| clientId clientPassword service cartId creditCard purchases|
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.  
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	service checkoutOf: cartId with: creditCard.
	
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 5 of: '9789871497522' to: cartId.
	service checkoutOf: cartId with: creditCard.
	purchases _ service listPurchasesOf: clientId with: clientPassword.
	self assert: (purchases isEmpty not).
	self assert: ((purchases first quantityOf: '9780764548345') = 10).
	self assert: ((purchases second quantityOf: '9789871497522') = 5).!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:47:26'!
test15ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase
	| clientId clientPassword service cartId creditCard purchases|
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.  
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	service checkoutOf: cartId with: creditCard.
	purchases _ service listPurchasesOf: clientId with: clientPassword.
	self assert: (purchases isEmpty not).
	self assert: ((purchases first quantityOf: '9780764548345') = 10).
! !

!methodRemoval: TusLibrosInterfaceTest #test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/13/2022 00:47:26'!
test14ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase
	| clientId clientPassword service cartId creditCard purchases|
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.  
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	service checkoutOf: cartId with: creditCard.
	purchases _ service listPurchasesOf: clientId with: clientPassword.
	self assert: (purchases isEmpty not).
	self assert: ((purchases first quantityOf: '9780764548345') = 10).
!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:47:34'!
test14ListPurchasesBeforeDoingAnyCheckoutReturnsAnEmptyListOfPurchases
	| clientId clientPassword service cartId |  
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	
	self assert: ((service listPurchasesOf: clientId with: clientPassword) isEmpty).
! !

!methodRemoval: TusLibrosInterfaceTest #test13ListPurchasesBeforeDoingAnyCheckoutReturnsAnEmptyListOfPurchases stamp: 'ldmaf 6/13/2022 00:47:34'!
test13ListPurchasesBeforeDoingAnyCheckoutReturnsAnEmptyListOfPurchases
	| clientId clientPassword service cartId |  
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	
	self assert: ((service listPurchasesOf: clientId with: clientPassword) isEmpty).
!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:47:41'!
test13CheckoutWithAnExpiredCartShouldThrowAnError
	| clientId clientPassword service creditCard cartId creationTimeInThePast xxx|
	creationTimeInThePast _ (DateAndTime now) subtractDuration: (Duration minutes: 29).
	xxx _ (DateAndTime tomorrow).
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: creationTimeInThePast.
	service add: 10 of: '9780764548345' to: cartId.
	self should: [service checkoutOf: cartId with: creditCard at: xxx] raise: Error  withMessageText: 'Cart Expired.'.
! !

!methodRemoval: TusLibrosInterfaceTest #test12CheckoutWithAnExpiredCartShouldThrowAnError stamp: 'ldmaf 6/13/2022 00:47:41'!
test12CheckoutWithAnExpiredCartShouldThrowAnError
	| clientId clientPassword service creditCard cartId creationTimeInThePast xxx|
	creationTimeInThePast _ (DateAndTime now) subtractDuration: (Duration minutes: 29).
	xxx _ (DateAndTime tomorrow).
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: creationTimeInThePast.
	service add: 10 of: '9780764548345' to: cartId.
	self should: [service checkoutOf: cartId with: creditCard at: xxx] raise: Error  withMessageText: 'Cart Expired.'.
!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:47:46'!
test12CheckoutWithAnInvalidCreditCardThrowsAnExpiredCardErrorAndKeepsTheCartInTheService
	| clientId clientPassword service creditCard cartId|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber - 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.

	self should: [service checkoutOf: cartId with: creditCard] raise: Error withMessageText: 'Can not charge an expired credit card'.
	self assert: ((service hasCart: cartId)).
! !

!methodRemoval: TusLibrosInterfaceTest #test11CheckoutWithAnInvalidCreditCardThrowsAnExpiredCardErrorAndKeepsTheCartInTheService stamp: 'ldmaf 6/13/2022 00:47:46'!
test11CheckoutWithAnInvalidCreditCardThrowsAnExpiredCardErrorAndKeepsTheCartInTheService
	| clientId clientPassword service creditCard cartId|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber - 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.

	self should: [service checkoutOf: cartId with: creditCard] raise: Error withMessageText: 'Can not charge an expired credit card'.
	self assert: ((service hasCart: cartId)).
!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:47:53'!
test11CheckoutWithAValidCreditCardCreatesACorrectSaleAndRemovesTheCartFromTheService
	| clientId clientPassword service cartIdticket creditCard cartId ticket|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	ticket _ service checkoutOf: cartId with: creditCard.
	self assert: ((service transactionAmountOf: (ticket id)) = (ticket total)).
	self assert: ((service hasCart: cartId) not).
	self assert: ((ticket quantityOf: '9780764548345') = 10).
! !

!methodRemoval: TusLibrosInterfaceTest #test10CheckoutWithAValidCreditCardCreatesACorrectSaleAndRemovesTheCartFromTheService stamp: 'ldmaf 6/13/2022 00:47:53'!
test10CheckoutWithAValidCreditCardCreatesACorrectSaleAndRemovesTheCartFromTheService
	| clientId clientPassword service cartIdticket creditCard cartId ticket|  
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 10 of: '9780764548345' to: cartId.
	ticket _ service checkoutOf: cartId with: creditCard.
	self assert: ((service transactionAmountOf: (ticket id)) = (ticket total)).
	self assert: ((service hasCart: cartId) not).
	self assert: ((ticket quantityOf: '9780764548345') = 10).
!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:48:00'!
test10CartShouldExistForThirtyMinutes
	| clientId clientPassword service cartId creationTimeInThePast |
	creationTimeInThePast _ (DateAndTime now) subtractDuration: (Duration minutes: 30).
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: creationTimeInThePast.
	self should: [service add: 3 of: '9780764548345' to: cartId]  raise: Error  withMessageText: 'Cart Expired.' .
! !

!methodRemoval: TusLibrosInterfaceTest #test09CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/13/2022 00:48:00'!
test09CartShouldExistForThirtyMinutes
	| clientId clientPassword service cartId creationTimeInThePast |
	creationTimeInThePast _ (DateAndTime now) subtractDuration: (Duration minutes: 30).
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: creationTimeInThePast.
	self should: [service add: 3 of: '9780764548345' to: cartId]  raise: Error  withMessageText: 'Cart Expired.' .
!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:48:09'!
test09ListingCartReturnsAllBooksInside
	| clientId clientPassword service cartId listOfBooks |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 3 of: '9780764548345' to: cartId.
	service add: 12 of: '9789871497522' to: cartId.
	service add: 7 of: '9788495070524' to: cartId.
	listOfBooks _ service listCart: cartId.
	self assert: ((listOfBooks at: '9780764548345') = 3).
	self assert: ((listOfBooks at: '9789871497522') = 12).
	self assert: ((listOfBooks at: '9788495070524') = 7).! !

!methodRemoval: TusLibrosInterfaceTest #test08ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/13/2022 00:48:09'!
test08ListingCartReturnsAllBooksInside
	| clientId clientPassword service cartId listOfBooks |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 3 of: '9780764548345' to: cartId.
	service add: 12 of: '9789871497522' to: cartId.
	service add: 7 of: '9788495070524' to: cartId.
	listOfBooks _ service listCart: cartId.
	self assert: ((listOfBooks at: '9780764548345') = 3).
	self assert: ((listOfBooks at: '9789871497522') = 12).
	self assert: ((listOfBooks at: '9788495070524') = 7).!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:48:15'!
test08AddingAnInvalidANonExistingBookToACartThrowsAnError
	|clientId clientPassword service cartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	self should: [service add: 2 of: '123' to: cartId.] raise: Error withMessageText: 'Item is not in catalog'! !

!methodRemoval: TusLibrosInterfaceTest #test07AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/13/2022 00:48:15'!
test07AddingAnInvalidANonExistingBookToACartThrowsAnError
	|clientId clientPassword service cartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	self should: [service add: 2 of: '123' to: cartId.] raise: Error withMessageText: 'Item is not in catalog'!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:48:21'!
test07AddingAnInvalidAmountOfBooksToACartThrowsAnError
	|clientId clientPassword service cartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	self should: [service add: -1 of: '9780764548345' to: cartId.] raise: Error withMessageText: 'Invalid number of items'! !

!methodRemoval: TusLibrosInterfaceTest #test06AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/13/2022 00:48:21'!
test06AddingAnInvalidAmountOfBooksToACartThrowsAnError
	|clientId clientPassword service cartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	self should: [service add: -1 of: '9780764548345' to: cartId.] raise: Error withMessageText: 'Invalid number of items'!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:48:27'!
test06AddingToANonExistingCartIdThrowsAnError
	|clientId clientPassword service fakeCartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	fakeCartId _ 666.
	service _ TusLibrosService with: usersDicc.
	service createCartWith: clientId and: clientPassword at: DateAndTime now.
	self should: [service add: 3 of: '9780764548345' to: fakeCartId.] raise: Error withMessageText: 'Non Existing Cart Id.'! !

!methodRemoval: TusLibrosInterfaceTest #test05AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/13/2022 00:48:27'!
test05AddingToANonExistingCartIdThrowsAnError
	|clientId clientPassword service fakeCartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	fakeCartId _ 666.
	service _ TusLibrosService with: usersDicc.
	service createCartWith: clientId and: clientPassword at: DateAndTime now.
	self should: [service add: 3 of: '9780764548345' to: fakeCartId.] raise: Error withMessageText: 'Non Existing Cart Id.'!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:48:32'!
test05ListingANonExistingCartIdThrowsAnError
	|clientId clientPassword service cartId fakeCartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	fakeCartId _ 999.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 3 of: '9780764548345' to: cartId.
	self should: [service listCart: fakeCartId] raise: Error withMessageText: 'Non Existing Cart Id.'! !

!methodRemoval: TusLibrosInterfaceTest #test04ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/13/2022 00:48:32'!
test04ListingANonExistingCartIdThrowsAnError
	|clientId clientPassword service cartId fakeCartId|
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	fakeCartId _ 999.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 3 of: '9780764548345' to: cartId.
	self should: [service listCart: fakeCartId] raise: Error withMessageText: 'Non Existing Cart Id.'!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:48:38'!
test04AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt
	|clientId clientPassword service cartId |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 3 of: '9780764548345' to: cartId.
	self assert: (((service listCart: cartId) at: '9780764548345') = 3).! !

!methodRemoval: TusLibrosInterfaceTest #test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/13/2022 00:48:38'!
test03AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt
	|clientId clientPassword service cartId |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	service add: 3 of: '9780764548345' to: cartId.
	self assert: (((service listCart: cartId) at: '9780764548345') = 3).!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:48:44'!
test03CreateManyCartsWithValidCredentialsShouldCreateManyCarts
	| clientId clientPassword clientId2 clientPassword2 service cartId cartId2 |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	clientId2 _ 2.
	clientPassword2 _ '54321bb'.
	usersDicc add: (clientId->clientPassword).
	usersDicc add: (clientId2->clientPassword2).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	cartId2 _ service createCartWith: clientId2 and: clientPassword2 at: DateAndTime now.
	self assert: ((service listCart: cartId) isEmpty).
	self assert: ((service listCart: cartId2) isEmpty).
	self assert: ((cartId = cartId2) not)	
! !

!methodRemoval: TusLibrosInterfaceTest #test02CreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/13/2022 00:48:44'!
test02CreateManyCartsWithValidCredentialsShouldCreateManyCarts
	| clientId clientPassword clientId2 clientPassword2 service cartId cartId2 |
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	clientId2 _ 2.
	clientPassword2 _ '54321bb'.
	usersDicc add: (clientId->clientPassword).
	usersDicc add: (clientId2->clientPassword2).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: DateAndTime now.
	cartId2 _ service createCartWith: clientId2 and: clientPassword2 at: DateAndTime now.
	self assert: ((service listCart: cartId) isEmpty).
	self assert: ((service listCart: cartId2) isEmpty).
	self assert: ((cartId = cartId2) not)	
!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/13/2022 00:48:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/13/2022 00:48:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/13/2022 00:48:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/13/2022 00:48:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/13/2022 00:48:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/13/2022 00:48:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/13/2022 00:48:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/13/2022 00:48:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/13/2022 00:48:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/13/2022 00:48:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CheckoutWithAValidCreditCardCreatesACorrectSaleAndRemovesTheCartFromTheService stamp: 'ldmaf 6/13/2022 00:48:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutWithAnInvalidCreditCardThrowsAnExpiredCardErrorAndKeepsTheCartInTheService stamp: 'ldmaf 6/13/2022 00:48:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CheckoutWithAnExpiredCartShouldThrowAnError stamp: 'ldmaf 6/13/2022 00:48:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesBeforeDoingAnyCheckoutReturnsAnEmptyListOfPurchases stamp: 'ldmaf 6/13/2022 00:48:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/13/2022 00:48:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListPurchasesAfterDoingManyCheckoutsReturnsAListWithManyPurchases stamp: 'ldmaf 6/13/2022 00:48:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17ListPurchasesWithAnInvalidUserThrowsAnError stamp: 'ldmaf 6/13/2022 00:48:48'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CheckoutWithAnExpiredCartShouldThrowAnError stamp: 'ldmaf 6/13/2022 00:49:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test01CreateCartWithValidCredentialsReturnsAnEmptyCart stamp: 'ldmaf 6/13/2022 00:49:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test02CreateCartWithInvalidCredentialsShouldNotCreateCart stamp: 'ldmaf 6/13/2022 00:49:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test03CreateManyCartsWithValidCredentialsShouldCreateManyCarts stamp: 'ldmaf 6/13/2022 00:49:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test04AddingManyBooksToACartAndThenListingItShouldReturnAllOccurrencesOfIt stamp: 'ldmaf 6/13/2022 00:49:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test05ListingANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/13/2022 00:49:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test06AddingToANonExistingCartIdThrowsAnError stamp: 'ldmaf 6/13/2022 00:49:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test07AddingAnInvalidAmountOfBooksToACartThrowsAnError stamp: 'ldmaf 6/13/2022 00:49:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test08AddingAnInvalidANonExistingBookToACartThrowsAnError stamp: 'ldmaf 6/13/2022 00:49:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test09ListingCartReturnsAllBooksInside stamp: 'ldmaf 6/13/2022 00:49:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test10CartShouldExistForThirtyMinutes stamp: 'ldmaf 6/13/2022 00:49:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test11CheckoutWithAValidCreditCardCreatesACorrectSaleAndRemovesTheCartFromTheService stamp: 'ldmaf 6/13/2022 00:49:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test12CheckoutWithAnInvalidCreditCardThrowsAnExpiredCardErrorAndKeepsTheCartInTheService stamp: 'ldmaf 6/13/2022 00:49:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test13CheckoutWithAnExpiredCartShouldThrowAnError stamp: 'ldmaf 6/13/2022 00:49:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test14ListPurchasesBeforeDoingAnyCheckoutReturnsAnEmptyListOfPurchases stamp: 'ldmaf 6/13/2022 00:49:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test15ListPurchasesAfterDoingOneCheckoutReturnsAListWithOnePurchase stamp: 'ldmaf 6/13/2022 00:49:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test16ListPurchasesAfterDoingManyCheckoutsReturnsAListWithManyPurchases stamp: 'ldmaf 6/13/2022 00:49:10'!
PASSED!

!testRun: #TusLibrosInterfaceTest #test17ListPurchasesWithAnInvalidUserThrowsAnError stamp: 'ldmaf 6/13/2022 00:49:10'!
PASSED!
!TusLibrosInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/13/2022 00:49:20' prior: 50502015!
test13CheckoutWithAnExpiredCartShouldThrowAnError
	| clientId clientPassword service creditCard cartId creationTimeInThePast futureDate|
	creationTimeInThePast _ (DateAndTime now) subtractDuration: (Duration minutes: 29).
	futureDate _ (DateAndTime tomorrow).
	creditCard _ CreditCard expiringOn: (Month month: (DateAndTime now) monthIndex year: (DateAndTime now) yearNumber + 1) 
						withNumber: 1234123412341234 
						andOwner: 'Mickey Mouse'.
	usersDicc _ Dictionary new.
	clientId _ 1.
	clientPassword _ '12345aa'.
	usersDicc add: (1->clientPassword).
	service _ TusLibrosService with: usersDicc.
	cartId _ service createCartWith: clientId and: clientPassword at: creationTimeInThePast.
	service add: 10 of: '9780764548345' to: cartId.
	self should: [service checkoutOf: cartId with: creditCard at: futureDate] raise: Error  withMessageText: 'Cart Expired.'.
! !

----SNAPSHOT----(13 June 2022 00:49:37) CuisUniversity-5096.image priorSource: 5426757!

----QUIT----(13 June 2022 00:49:57) CuisUniversity-5096.image priorSource: 5473797!