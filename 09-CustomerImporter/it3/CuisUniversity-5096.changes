

----STARTUP---- (28 June 2022 21:02:38) as C:\Users\Felder\Desktop\UBA\2022\Ing soft I\windows64\CuisUniversity-5096.image!


TestCase subclass: #ImportTest
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'af 6/28/2022 21:03:06'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:09:11'!
       test01ValidDataIsImportedCorrectly

	CustomerImporter valueFrom: self validImportData into: session..

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:58:00'!
                  test02CanNotImportAddressWithoutCustomer

	self
		should: [ CustomerImporter valueFrom: self addressWithoutCustomerData into: session. ]
		raise: Error - MessageNotUnderstood
		withMessageText: CustomerImporter canNotImportAddressWithoutCustomerErrorDescription

	! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:56:58'!
                   test03DoesNotImportRecordsStartingWithCButMoreCharacters

	self
		shouldFailImporting: self invalidCustomerRecordStartData
		messageText: CustomerImporter invalidRecordTypeErrorDescription
		asserting: [ self assertNoCustomerWasImported ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:49:03'!
          test04DoesNotImportRecordsStartingWithAButMoreCharacters

	self
		shouldFailImporting: self invalidAddressRecordStartData
		messageText: CustomerImporter invalidRecordTypeErrorDescription
		asserting: [ self assertImportedOneCustomerWithoutAddress ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:49:36'!
                               test05CanNotImportAddressRecordWithLessThanSixFields

	self
		shouldFailImporting: self addressRecordWithLessThanSixFields
		messageText: CustomerImporter invalidAddressRecordErrorDescription
		asserting: [ self assertImportedOneCustomerWithoutAddress ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:51:14'!
                           test06CanNotImportAddressRecordWithMoreThanSixFields

	self
		shouldFailImporting: self addressRecordWithMoreThanSixFields
		messageText: CustomerImporter invalidAddressRecordErrorDescription
		asserting: [ self assertImportedOneCustomerWithoutAddress ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:56:58'!
                           test07CanNotImportCustomerRecordWithLessThanFiveFields

	self
		shouldFailImporting: self customerRecordWithLessThanFiveFields
		messageText: CustomerImporter invalidCustomerRecordErrorDescription
		asserting: [ self assertNoCustomerWasImported ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:56:58'!
  test08CanNotImportCustomerRecordWithMoreThanFiveFields

	self
		shouldFailImporting: self customerRecordWithMoreThanFiveFields
		messageText: CustomerImporter invalidCustomerRecordErrorDescription
		asserting: [ self assertNoCustomerWasImported ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 20:01:43'!
  test09CannotImportEmptyLine

	self
		shouldFailImporting: self emptyLine
		messageText: CustomerImporter invalidRecordTypeErrorDescription
		asserting: [ self assertNoCustomerWasImported ]

	! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 18:22:05'!
                       assertAddressOf: importedCustomer at: aStreetName hasNumber: aNumber town: aTown zipCode: aZipCode province: aProvince

	| importedAddress |

	importedAddress := importedCustomer addressAt: aStreetName ifNone: [ self fail ].
	self assert: aStreetName equals: importedAddress streetName.
	self assert: aNumber equals: importedAddress streetNumber.
	self assert: aTown equals: importedAddress town.
	self assert: aZipCode equals: importedAddress zipCode.
	self assert: aProvince equals: importedAddress province.

	! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 18:27:57'!
                     assertCustomerWithIdentificationType: anIdType number: anIdNumber hasFirstName: aFirstName lastName: aLastName

	| importedCustomer |

	importedCustomer := self customerWithIdentificationType: anIdType number: anIdNumber.

	self assert: aFirstName equals: importedCustomer firstName.
	self assert: aLastName equals: importedCustomer lastName.
	self assert: anIdType equals: importedCustomer identificationType.
	self assert: anIdNumber equals: importedCustomer identificationNumber.

	^importedCustomer

	! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 19:45:10'!
                             assertImportedOneCustomerWithoutAddress

	| importedCustomer |

	self assert: 1 equals: self numberOfCustomers.
	importedCustomer := self customerWithIdentificationType: 'D' number: '22333444'.
	self assert: importedCustomer isAddressesEmpty
	! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 19:24:40'!
   assertImportedRightNumberOfCustomers

	^ self assert: 2 equals: self numberOfCustomers! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 18:28:45'!
assertJuanPerezWasImportedCorrectly

	| importedCustomer |

	importedCustomer := self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez'.
	self assertAddressOf: importedCustomer at: 'Alem' hasNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 19:56:58'!
      assertNoCustomerWasImported

	^ self assert: 0 equals: self numberOfCustomers! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 18:28:05'!
         assertPepeSanchezWasImportedCorrecty

	| importedCustomer |

	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assertAddressOf: importedCustomer at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	self assertAddressOf: importedCustomer at: 'Maipu' hasNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'.


	! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 19:47:40'!
  shouldFailImporting: aReadStream messageText: anErrorMessageText asserting: anAssertionBlock

	self
		should: [ CustomerImporter valueFrom: aReadStream into: session. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anErrorMessageText equals: anError messageText.
			anAssertionBlock value ]

	! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'HAW 5/22/2022 00:27:50' overrides: 16961394!
                 setUp

	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.
! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'HAW 5/22/2022 00:28:23' overrides: 16961402!
                     tearDown

	session commit.
	session close.
	! !
!ImportTest methodsFor: 'customer' stamp: 'HAW 5/22/2022 18:14:22'!
            customerWithIdentificationType: anIdType number: anIdNumber

	^ (session
		select: [ :aCustomer | aCustomer identificationType = anIdType and: [ aCustomer identificationNumber = anIdNumber ]]
		ofType: Customer) anyOne! !
!ImportTest methodsFor: 'customer' stamp: 'HAW 5/22/2022 19:24:40'!
                              numberOfCustomers

	^ (session selectAllOfType: Customer) size! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 19:41:20'!
                         addressRecordWithLessThanSixFields

	^ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 19:51:35'!
         addressRecordWithMoreThanSixFields

	^ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs,x'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 19:14:13'!
  addressWithoutCustomerData

	^ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 19:53:41'!
      customerRecordWithLessThanFiveFields

	^ReadStream on: 'C,Pepe,Sanchez,D'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 19:55:59'!
              customerRecordWithMoreThanFiveFields

	^ReadStream on: 'C,Pepe,Sanchez,D,22333444,x'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 20:02:57'!
   emptyLine

	^ReadStream on: '
'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 19:34:25'!
                        invalidAddressRecordStartData

	^ReadStream on: 'C,Pepe,Sanchez,D,22333444
AA,San Martin,3322,Olivos,1636,BsAs'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 19:22:55'!
        invalidCustomerRecordStartData

	^ReadStream on: 'CC,Pepe,Sanchez,D,22333444'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 18:08:08'!
          validImportData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Address category: 'CustomerImporter' stamp: 'af 6/28/2022 21:03:07'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Address methodsFor: 'province' stamp: 'HAW 5/22/2022 00:19:29'!
                              province

	^province! !
!Address methodsFor: 'province' stamp: 'HAW 5/22/2022 00:19:29'!
       province: aProvince

	province := aProvince
	! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 17:55:46'!
                isAt: aStreetName

	^streetName = aStreetName ! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29'!
               streetName

	^streetName ! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29'!
    streetName: aStreetName

	streetName := aStreetName ! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29'!
         streetNumber

	^streetNumber ! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29'!
streetNumber: aStreetNumber

	streetNumber := aStreetNumber ! !
!Address methodsFor: 'twon' stamp: 'HAW 5/22/2022 00:19:29'!
   town

	^town! !
!Address methodsFor: 'twon' stamp: 'HAW 5/22/2022 00:19:29'!
                   town: aTown

	town := aTown! !
!Address methodsFor: 'zip code' stamp: 'HAW 5/22/2022 00:19:29'!
zipCode

	^zipCode! !
!Address methodsFor: 'zip code' stamp: 'HAW 5/22/2022 00:19:29'!
         zipCode: aZipCode

	zipCode := aZipCode! !

Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'af 6/28/2022 21:03:07'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Customer methodsFor: 'addresses' stamp: 'HAW 5/22/2022 00:19:29'!
   addAddress: anAddress

	addresses add: anAddress ! !
!Customer methodsFor: 'addresses' stamp: 'HAW 5/22/2022 17:55:17'!
        addressAt: aStreetName ifNone: aNoneBlock

	^addresses detect: [ :address | address isAt: aStreetName ] ifNone: aNoneBlock ! !
!Customer methodsFor: 'addresses' stamp: 'HAW 5/22/2022 00:19:29'!
                              addresses

	^ addresses! !
!Customer methodsFor: 'addresses' stamp: 'HAW 5/22/2022 19:38:32'!
  isAddressesEmpty

	^addresses isEmpty ! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29'!
                        firstName

	^firstName ! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29'!
       firstName: aName

	firstName := aName! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29'!
                         lastName

	^lastName ! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29'!
         lastName: aLastName

	lastName := aLastName
! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29'!
        identificationNumber

	^identificationNumber ! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29'!
       identificationNumber: anIdentificationNumber

	identificationNumber := anIdentificationNumber! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29'!
                       identificationType

	^identificationType ! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29'!
           identificationType: anIdentificationType

	identificationType := anIdentificationType! !
!Customer methodsFor: 'initialization' stamp: 'HAW 5/22/2022 00:19:29' overrides: 16920235!
           initialize

	super initialize.
	addresses := OrderedCollection new.! !

Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream newCustomer line record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'af 6/28/2022 21:03:07'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream newCustomer line record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'initialization' stamp: 'HAW 5/22/2022 18:06:47'!
                            initializeFrom: aReadStream into: aSession
	session := aSession.
	readStream := aReadStream.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'HAW 5/22/2022 18:48:58' overrides: 16902254!
value

	[ self hasLineToImport ] whileTrue: [
		self createRecord.
		self importRecord ].

	! !
!CustomerImporter methodsFor: 'customer' stamp: 'HAW 5/22/2022 19:59:39'!
                      assertValidCustomerRecord

	^ record size ~= 5 ifTrue: [ self error: self class invalidCustomerRecordErrorDescription ]! !
!CustomerImporter methodsFor: 'customer' stamp: 'HAW 5/22/2022 19:59:39'!
                           importCustomer

	self assertValidCustomerRecord.

	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	session persist: newCustomer! !
!CustomerImporter methodsFor: 'customer' stamp: 'HAW 5/22/2022 19:23:55'!
                        isCustomerRecord

	^ record first = 'C'! !
!CustomerImporter methodsFor: 'address' stamp: 'HAW 5/22/2022 19:58:41'!
            assertCustomerWasImported

	^ newCustomer ifNil: [ self error: self class canNotImportAddressWithoutCustomerErrorDescription ]! !
!CustomerImporter methodsFor: 'address' stamp: 'HAW 5/22/2022 19:59:12'!
                     assertValidAddressRecord

	^ record size ~= 6 ifTrue: [ self error: self class invalidAddressRecordErrorDescription ]! !
!CustomerImporter methodsFor: 'address' stamp: 'HAW 5/22/2022 19:59:12'!
                              importAddress

	| newAddress |

	self assertCustomerWasImported.
	self assertValidAddressRecord.

	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !
!CustomerImporter methodsFor: 'address' stamp: 'HAW 5/22/2022 19:37:45'!
       isAddressRecord

	^ record first = 'A'! !
!CustomerImporter methodsFor: 'evaluating - private' stamp: 'HAW 5/22/2022 20:04:35'!
assertRecordNotEmpty

	record isEmpty ifTrue: [ self error: self class invalidRecordTypeErrorDescription ]! !
!CustomerImporter methodsFor: 'evaluating - private' stamp: 'HAW 5/22/2022 18:47:26'!
                            createRecord

	^ record := line findTokens: $,! !
!CustomerImporter methodsFor: 'evaluating - private' stamp: 'HAW 5/22/2022 18:49:33'!
                        hasLineToImport

	line := readStream nextLine.
	^line notNil! !
!CustomerImporter methodsFor: 'evaluating - private' stamp: 'HAW 5/22/2022 20:04:06'!
          importRecord

	self assertRecordNotEmpty.

	self isCustomerRecord ifTrue: [ ^self importCustomer ].
	self isAddressRecord ifTrue: [ ^self importAddress ].

	self error: self class invalidRecordTypeErrorDescription! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

CustomerImporter class
	instanceVariableNames: ''!

!classDefinition: 'CustomerImporter class' category: 'CustomerImporter' stamp: 'af 6/28/2022 21:03:08'!
CustomerImporter class
	instanceVariableNames: ''!
!CustomerImporter class methodsFor: 'instance creation' stamp: 'HAW 5/22/2022 18:06:47'!
   from: aReadStream into: aSession
	^self new initializeFrom: aReadStream into: aSession! !
!CustomerImporter class methodsFor: 'importing' stamp: 'HAW 5/22/2022 18:11:27'!
                     valueFrom: aReadStream into: aSession

	^(self from: aReadStream into: aSession) value! !
!CustomerImporter class methodsFor: 'error messages' stamp: 'HAW 5/22/2022 19:13:48'!
                canNotImportAddressWithoutCustomerErrorDescription

	^'Cannot import address without customer'! !
!CustomerImporter class methodsFor: 'error messages' stamp: 'HAW 5/22/2022 19:41:39'!
        invalidAddressRecordErrorDescription

	^'Address record has to have six fields'! !
!CustomerImporter class methodsFor: 'error messages' stamp: 'HAW 5/22/2022 19:53:56'!
                       invalidCustomerRecordErrorDescription

	^'Invalid Customer record'! !
!CustomerImporter class methodsFor: 'error messages' stamp: 'HAW 5/22/2022 19:24:11'!
    invalidRecordTypeErrorDescription

	^'Invalid record type'! !

Object subclass: #DataBaseSession
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #DataBaseSession category: 'CustomerImporter' stamp: 'af 6/28/2022 21:03:08'!
Object subclass: #DataBaseSession
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!DataBaseSession methodsFor: 'transaction management' stamp: 'HAW 5/22/2022 00:19:29'!
       beginTransaction

	! !
!DataBaseSession methodsFor: 'transaction management' stamp: 'HAW 5/22/2022 19:17:36'!
                  commit

	(tables at: Customer ifAbsent: [#()]) do: [ :aCustomer | self persistAddressesOf: aCustomer ]
	! !
!DataBaseSession methodsFor: 'closing' stamp: 'HAW 5/22/2022 00:19:29'!
            close

	! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 00:19:29'!
                              defineIdOf: anObject

	anObject instVarNamed: 'id' put: (self newIdFor: anObject).! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 00:19:29'!
                    delay

	(Delay forMilliseconds: 100) wait! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 19:29:06'!
                             objectsOfType: aType

	^ tables at: aType ifAbsent: [ #() ]! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 00:19:29'!
           persistAddressesOf: anObjectWithAddresses

	anObjectWithAddresses addresses do: [ :anAddress | self persist: anAddress ]
	! !
!DataBaseSession methodsFor: 'initialization' stamp: 'HAW 5/22/2022 00:19:29'!
                   initializeFor: aConfiguration

	configuration := aConfiguration.
	tables := Dictionary new.
	id := 0.! !
!DataBaseSession methodsFor: 'id' stamp: 'HAW 5/22/2022 00:19:29'!
                    newIdFor: anObject

	id := id + 1.
	^id! !
!DataBaseSession methodsFor: 'persistance' stamp: 'HAW 5/22/2022 00:19:29'!
         persist: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].! !
!DataBaseSession methodsFor: 'selecting' stamp: 'HAW 5/22/2022 19:29:06'!
       select: aCondition ofType: aType

	self delay.
	^(self objectsOfType: aType) select: aCondition ! !
!DataBaseSession methodsFor: 'selecting' stamp: 'HAW 5/22/2022 19:29:06'!
                  selectAllOfType: aType

	self delay.
	^(self objectsOfType: aType) copy ! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

DataBaseSession class
	instanceVariableNames: ''!

!classDefinition: 'DataBaseSession class' category: 'CustomerImporter' stamp: 'af 6/28/2022 21:03:08'!
DataBaseSession class
	instanceVariableNames: ''!
!DataBaseSession class methodsFor: 'instance creation' stamp: 'HAW 5/22/2022 00:19:29'!
                    for: aConfiguration

	^self new initializeFor: aConfiguration! !

----End fileIn of C:\Users\Felder\Desktop\UBA\2022\Ing soft I\windows64\CustomerImporter-60.st----!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 6/28/2022 21:03:17'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 6/28/2022 21:03:17'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 6/28/2022 21:03:17'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 6/28/2022 21:03:17'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 6/28/2022 21:03:18'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 6/28/2022 21:03:18'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 6/28/2022 21:03:18'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 6/28/2022 21:03:18'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 6/28/2022 21:03:18'!
PASSED!

----STARTUP---- (28 June 2022 22:08:22) as C:\Users\Felder\Desktop\UBA\2022\Ing soft I\windows64\CuisUniversity-5096.image!


TestCase subclass: #ImportTest
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'af 6/28/2022 22:09:31'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:09:11'!
                test01ValidDataIsImportedCorrectly

	CustomerImporter valueFrom: self validImportData into: session..

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:58:00'!
                  test02CanNotImportAddressWithoutCustomer

	self
		should: [ CustomerImporter valueFrom: self addressWithoutCustomerData into: session. ]
		raise: Error - MessageNotUnderstood
		withMessageText: CustomerImporter canNotImportAddressWithoutCustomerErrorDescription

	! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:56:58'!
                   test03DoesNotImportRecordsStartingWithCButMoreCharacters

	self
		shouldFailImporting: self invalidCustomerRecordStartData
		messageText: CustomerImporter invalidRecordTypeErrorDescription
		asserting: [ self assertNoCustomerWasImported ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:49:03'!
          test04DoesNotImportRecordsStartingWithAButMoreCharacters

	self
		shouldFailImporting: self invalidAddressRecordStartData
		messageText: CustomerImporter invalidRecordTypeErrorDescription
		asserting: [ self assertImportedOneCustomerWithoutAddress ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:49:36'!
                               test05CanNotImportAddressRecordWithLessThanSixFields

	self
		shouldFailImporting: self addressRecordWithLessThanSixFields
		messageText: CustomerImporter invalidAddressRecordErrorDescription
		asserting: [ self assertImportedOneCustomerWithoutAddress ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:51:14'!
                           test06CanNotImportAddressRecordWithMoreThanSixFields

	self
		shouldFailImporting: self addressRecordWithMoreThanSixFields
		messageText: CustomerImporter invalidAddressRecordErrorDescription
		asserting: [ self assertImportedOneCustomerWithoutAddress ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:56:58'!
                           test07CanNotImportCustomerRecordWithLessThanFiveFields

	self
		shouldFailImporting: self customerRecordWithLessThanFiveFields
		messageText: CustomerImporter invalidCustomerRecordErrorDescription
		asserting: [ self assertNoCustomerWasImported ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:56:58'!
  test08CanNotImportCustomerRecordWithMoreThanFiveFields

	self
		shouldFailImporting: self customerRecordWithMoreThanFiveFields
		messageText: CustomerImporter invalidCustomerRecordErrorDescription
		asserting: [ self assertNoCustomerWasImported ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 20:01:43'!
  test09CannotImportEmptyLine

	self
		shouldFailImporting: self emptyLine
		messageText: CustomerImporter invalidRecordTypeErrorDescription
		asserting: [ self assertNoCustomerWasImported ]

	! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 18:22:05'!
                       assertAddressOf: importedCustomer at: aStreetName hasNumber: aNumber town: aTown zipCode: aZipCode province: aProvince

	| importedAddress |

	importedAddress := importedCustomer addressAt: aStreetName ifNone: [ self fail ].
	self assert: aStreetName equals: importedAddress streetName.
	self assert: aNumber equals: importedAddress streetNumber.
	self assert: aTown equals: importedAddress town.
	self assert: aZipCode equals: importedAddress zipCode.
	self assert: aProvince equals: importedAddress province.

	! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 18:27:57'!
                     assertCustomerWithIdentificationType: anIdType number: anIdNumber hasFirstName: aFirstName lastName: aLastName

	| importedCustomer |

	importedCustomer := self customerWithIdentificationType: anIdType number: anIdNumber.

	self assert: aFirstName equals: importedCustomer firstName.
	self assert: aLastName equals: importedCustomer lastName.
	self assert: anIdType equals: importedCustomer identificationType.
	self assert: anIdNumber equals: importedCustomer identificationNumber.

	^importedCustomer

	! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 19:45:10'!
                             assertImportedOneCustomerWithoutAddress

	| importedCustomer |

	self assert: 1 equals: self numberOfCustomers.
	importedCustomer := self customerWithIdentificationType: 'D' number: '22333444'.
	self assert: importedCustomer isAddressesEmpty
	! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 19:24:40'!
   assertImportedRightNumberOfCustomers

	^ self assert: 2 equals: self numberOfCustomers! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 18:28:45'!
assertJuanPerezWasImportedCorrectly

	| importedCustomer |

	importedCustomer := self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez'.
	self assertAddressOf: importedCustomer at: 'Alem' hasNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 19:56:58'!
      assertNoCustomerWasImported

	^ self assert: 0 equals: self numberOfCustomers! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 18:28:05'!
         assertPepeSanchezWasImportedCorrecty

	| importedCustomer |

	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assertAddressOf: importedCustomer at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	self assertAddressOf: importedCustomer at: 'Maipu' hasNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'.


	! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 19:47:40'!
  shouldFailImporting: aReadStream messageText: anErrorMessageText asserting: anAssertionBlock

	self
		should: [ CustomerImporter valueFrom: aReadStream into: session. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anErrorMessageText equals: anError messageText.
			anAssertionBlock value ]

	! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'HAW 5/22/2022 00:27:50' overrides: 16961394!
                 setUp

	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.
! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'HAW 5/22/2022 00:28:23' overrides: 16961402!
                     tearDown

	session commit.
	session close.
	! !
!ImportTest methodsFor: 'customer' stamp: 'HAW 5/22/2022 18:14:22'!
            customerWithIdentificationType: anIdType number: anIdNumber

	^ (session
		select: [ :aCustomer | aCustomer identificationType = anIdType and: [ aCustomer identificationNumber = anIdNumber ]]
		ofType: Customer) anyOne! !
!ImportTest methodsFor: 'customer' stamp: 'HAW 5/22/2022 19:24:40'!
                              numberOfCustomers

	^ (session selectAllOfType: Customer) size! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 19:41:20'!
                         addressRecordWithLessThanSixFields

	^ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 19:51:35'!
         addressRecordWithMoreThanSixFields

	^ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs,x'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 19:14:13'!
  addressWithoutCustomerData

	^ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 19:53:41'!
      customerRecordWithLessThanFiveFields

	^ReadStream on: 'C,Pepe,Sanchez,D'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 19:55:59'!
              customerRecordWithMoreThanFiveFields

	^ReadStream on: 'C,Pepe,Sanchez,D,22333444,x'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 20:02:57'!
   emptyLine

	^ReadStream on: '
'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 19:34:25'!
                        invalidAddressRecordStartData

	^ReadStream on: 'C,Pepe,Sanchez,D,22333444
AA,San Martin,3322,Olivos,1636,BsAs'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 19:22:55'!
        invalidCustomerRecordStartData

	^ReadStream on: 'CC,Pepe,Sanchez,D,22333444'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 18:08:08'!
          validImportData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Address category: 'CustomerImporter' stamp: 'af 6/28/2022 22:09:31'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Address methodsFor: 'province' stamp: 'HAW 5/22/2022 00:19:29'!
                              province

	^province! !
!Address methodsFor: 'province' stamp: 'HAW 5/22/2022 00:19:29'!
       province: aProvince

	province := aProvince
	! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 17:55:46'!
                isAt: aStreetName

	^streetName = aStreetName ! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29'!
               streetName

	^streetName ! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29'!
    streetName: aStreetName

	streetName := aStreetName ! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29'!
         streetNumber

	^streetNumber ! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29'!
streetNumber: aStreetNumber

	streetNumber := aStreetNumber ! !
!Address methodsFor: 'twon' stamp: 'HAW 5/22/2022 00:19:29'!
   town

	^town! !
!Address methodsFor: 'twon' stamp: 'HAW 5/22/2022 00:19:29'!
                   town: aTown

	town := aTown! !
!Address methodsFor: 'zip code' stamp: 'HAW 5/22/2022 00:19:29'!
zipCode

	^zipCode! !
!Address methodsFor: 'zip code' stamp: 'HAW 5/22/2022 00:19:29'!
         zipCode: aZipCode

	zipCode := aZipCode! !

Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'af 6/28/2022 22:09:31'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Customer methodsFor: 'addresses' stamp: 'HAW 5/22/2022 00:19:29'!
   addAddress: anAddress

	addresses add: anAddress ! !
!Customer methodsFor: 'addresses' stamp: 'HAW 5/22/2022 17:55:17'!
        addressAt: aStreetName ifNone: aNoneBlock

	^addresses detect: [ :address | address isAt: aStreetName ] ifNone: aNoneBlock ! !
!Customer methodsFor: 'addresses' stamp: 'HAW 5/22/2022 00:19:29'!
                              addresses

	^ addresses! !
!Customer methodsFor: 'addresses' stamp: 'HAW 5/22/2022 19:38:32'!
  isAddressesEmpty

	^addresses isEmpty ! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29'!
                        firstName

	^firstName ! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29'!
       firstName: aName

	firstName := aName! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29'!
                         lastName

	^lastName ! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29'!
         lastName: aLastName

	lastName := aLastName
! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29'!
        identificationNumber

	^identificationNumber ! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29'!
       identificationNumber: anIdentificationNumber

	identificationNumber := anIdentificationNumber! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29'!
                       identificationType

	^identificationType ! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29'!
           identificationType: anIdentificationType

	identificationType := anIdentificationType! !
!Customer methodsFor: 'initialization' stamp: 'HAW 5/22/2022 00:19:29' overrides: 16920235!
           initialize

	super initialize.
	addresses := OrderedCollection new.! !

Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream newCustomer line record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'af 6/28/2022 22:09:32'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream newCustomer line record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'initialization' stamp: 'HAW 5/22/2022 18:06:47'!
                            initializeFrom: aReadStream into: aSession
	session := aSession.
	readStream := aReadStream.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'HAW 5/22/2022 18:48:58' overrides: 16902254!
value

	[ self hasLineToImport ] whileTrue: [
		self createRecord.
		self importRecord ].

	! !
!CustomerImporter methodsFor: 'customer' stamp: 'HAW 5/22/2022 19:59:39'!
                      assertValidCustomerRecord

	^ record size ~= 5 ifTrue: [ self error: self class invalidCustomerRecordErrorDescription ]! !
!CustomerImporter methodsFor: 'customer' stamp: 'HAW 5/22/2022 19:59:39'!
                           importCustomer

	self assertValidCustomerRecord.

	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	session persist: newCustomer! !
!CustomerImporter methodsFor: 'customer' stamp: 'HAW 5/22/2022 19:23:55'!
                        isCustomerRecord

	^ record first = 'C'! !
!CustomerImporter methodsFor: 'address' stamp: 'HAW 5/22/2022 19:58:41'!
            assertCustomerWasImported

	^ newCustomer ifNil: [ self error: self class canNotImportAddressWithoutCustomerErrorDescription ]! !
!CustomerImporter methodsFor: 'address' stamp: 'HAW 5/22/2022 19:59:12'!
                     assertValidAddressRecord

	^ record size ~= 6 ifTrue: [ self error: self class invalidAddressRecordErrorDescription ]! !
!CustomerImporter methodsFor: 'address' stamp: 'HAW 5/22/2022 19:59:12'!
                              importAddress

	| newAddress |

	self assertCustomerWasImported.
	self assertValidAddressRecord.

	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !
!CustomerImporter methodsFor: 'address' stamp: 'HAW 5/22/2022 19:37:45'!
       isAddressRecord

	^ record first = 'A'! !
!CustomerImporter methodsFor: 'evaluating - private' stamp: 'HAW 5/22/2022 20:04:35'!
assertRecordNotEmpty

	record isEmpty ifTrue: [ self error: self class invalidRecordTypeErrorDescription ]! !
!CustomerImporter methodsFor: 'evaluating - private' stamp: 'HAW 5/22/2022 18:47:26'!
                            createRecord

	^ record := line findTokens: $,! !
!CustomerImporter methodsFor: 'evaluating - private' stamp: 'HAW 5/22/2022 18:49:33'!
                        hasLineToImport

	line := readStream nextLine.
	^line notNil! !
!CustomerImporter methodsFor: 'evaluating - private' stamp: 'HAW 5/22/2022 20:04:06'!
          importRecord

	self assertRecordNotEmpty.

	self isCustomerRecord ifTrue: [ ^self importCustomer ].
	self isAddressRecord ifTrue: [ ^self importAddress ].

	self error: self class invalidRecordTypeErrorDescription! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

CustomerImporter class
	instanceVariableNames: ''!

!classDefinition: 'CustomerImporter class' category: 'CustomerImporter' stamp: 'af 6/28/2022 22:09:32'!
CustomerImporter class
	instanceVariableNames: ''!
!CustomerImporter class methodsFor: 'instance creation' stamp: 'HAW 5/22/2022 18:06:47'!
   from: aReadStream into: aSession
	^self new initializeFrom: aReadStream into: aSession! !
!CustomerImporter class methodsFor: 'importing' stamp: 'HAW 5/22/2022 18:11:27'!
                     valueFrom: aReadStream into: aSession

	^(self from: aReadStream into: aSession) value! !
!CustomerImporter class methodsFor: 'error messages' stamp: 'HAW 5/22/2022 19:13:48'!
                canNotImportAddressWithoutCustomerErrorDescription

	^'Cannot import address without customer'! !
!CustomerImporter class methodsFor: 'error messages' stamp: 'HAW 5/22/2022 19:41:39'!
        invalidAddressRecordErrorDescription

	^'Address record has to have six fields'! !
!CustomerImporter class methodsFor: 'error messages' stamp: 'HAW 5/22/2022 19:53:56'!
                       invalidCustomerRecordErrorDescription

	^'Invalid Customer record'! !
!CustomerImporter class methodsFor: 'error messages' stamp: 'HAW 5/22/2022 19:24:11'!
    invalidRecordTypeErrorDescription

	^'Invalid record type'! !

Object subclass: #DataBaseSession
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #DataBaseSession category: 'CustomerImporter' stamp: 'af 6/28/2022 22:09:32'!
Object subclass: #DataBaseSession
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!DataBaseSession methodsFor: 'transaction management' stamp: 'HAW 5/22/2022 00:19:29'!
       beginTransaction

	! !
!DataBaseSession methodsFor: 'transaction management' stamp: 'HAW 5/22/2022 19:17:36'!
                  commit

	(tables at: Customer ifAbsent: [#()]) do: [ :aCustomer | self persistAddressesOf: aCustomer ]
	! !
!DataBaseSession methodsFor: 'closing' stamp: 'HAW 5/22/2022 00:19:29'!
            close

	! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 00:19:29'!
                              defineIdOf: anObject

	anObject instVarNamed: 'id' put: (self newIdFor: anObject).! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 00:19:29'!
                    delay

	(Delay forMilliseconds: 100) wait! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 19:29:06'!
                             objectsOfType: aType

	^ tables at: aType ifAbsent: [ #() ]! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 00:19:29'!
           persistAddressesOf: anObjectWithAddresses

	anObjectWithAddresses addresses do: [ :anAddress | self persist: anAddress ]
	! !
!DataBaseSession methodsFor: 'initialization' stamp: 'HAW 5/22/2022 00:19:29'!
                   initializeFor: aConfiguration

	configuration := aConfiguration.
	tables := Dictionary new.
	id := 0.! !
!DataBaseSession methodsFor: 'id' stamp: 'HAW 5/22/2022 00:19:29'!
                    newIdFor: anObject

	id := id + 1.
	^id! !
!DataBaseSession methodsFor: 'persistance' stamp: 'HAW 5/22/2022 00:19:29'!
         persist: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].! !
!DataBaseSession methodsFor: 'selecting' stamp: 'HAW 5/22/2022 19:29:06'!
       select: aCondition ofType: aType

	self delay.
	^(self objectsOfType: aType) select: aCondition ! !
!DataBaseSession methodsFor: 'selecting' stamp: 'HAW 5/22/2022 19:29:06'!
                  selectAllOfType: aType

	self delay.
	^(self objectsOfType: aType) copy ! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

DataBaseSession class
	instanceVariableNames: ''!

!classDefinition: 'DataBaseSession class' category: 'CustomerImporter' stamp: 'af 6/28/2022 22:09:32'!
DataBaseSession class
	instanceVariableNames: ''!
!DataBaseSession class methodsFor: 'instance creation' stamp: 'HAW 5/22/2022 00:19:29'!
                    for: aConfiguration

	^self new initializeFor: aConfiguration! !

----End fileIn of C:\Users\Felder\Desktop\UBA\2022\Ing soft I\windows64\CustomerImporter-60.st----!

Object subclass: #PersistentCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'af 6/28/2022 22:13:15'!
Object subclass: #PersistentCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!PersistentCustomerSystem methodsFor: 'nil' stamp: 'af 6/28/2022 22:15:44'!
               session
	^session! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'af 6/28/2022 22:15:55'!
               session: aSession
	session := aSession ! !

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'af 6/28/2022 22:17:17'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session system'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'af 6/28/2022 22:17:27' prior: 50332549 overrides: 16961394!
                       setUp
	
	system := PersistentCustomerSystem new.
	system session: (DataBaseSession for: (Array with: Address with: Customer)).
	session beginTransaction.
! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'af 6/28/2022 22:17:46' prior: 50333029 overrides: 16961394!
                     setUp
	
	system := PersistentCustomerSystem new.
	system session: (DataBaseSession for: (Array with: Address with: Customer)).
	system beginTransaction.
! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'af 6/28/2022 22:17:58' prior: 50333038 overrides: 16961394!
                      setUp
	
	system := PersistentCustomerSystem new.
	system session: (DataBaseSession for: (Array with: Address with: Customer)).
	system session beginTransaction.
! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 6/28/2022 22:18:01'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 6/28/2022 22:18:01'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 6/28/2022 22:18:01'!
ERROR!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 6/28/2022 22:18:01'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 6/28/2022 22:18:01'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 6/28/2022 22:18:01'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 6/28/2022 22:18:01'!
ERROR!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 6/28/2022 22:18:01'!
ERROR!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 6/28/2022 22:18:01'!
ERROR!

----STARTUP---- (29 June 2022 18:21:26) as C:\Users\Felder\Desktop\UBA\2022\Ing soft I\windows64\CuisUniversity-5096.image!


TestCase subclass: #ImportTest
	instanceVariableNames: 'system'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'af 6/29/2022 18:21:46'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'system'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'tests' stamp: 'ldmaf 6/27/2022 19:50:50'!
                         test01ValidDataIsImportedCorrectly

	CustomerImporter valueFrom: self validImportData into: system.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!ImportTest methodsFor: 'tests' stamp: 'ldmaf 6/27/2022 19:50:55'!
                  test02CanNotImportAddressWithoutCustomer

	self
		should: [ CustomerImporter valueFrom: self addressWithoutCustomerData into: system. ]
		raise: Error - MessageNotUnderstood
		withMessageText: CustomerImporter canNotImportAddressWithoutCustomerErrorDescription

	! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:56:58'!
                    test03DoesNotImportRecordsStartingWithCButMoreCharacters

	self
		shouldFailImporting: self invalidCustomerRecordStartData
		messageText: CustomerImporter invalidRecordTypeErrorDescription
		asserting: [ self assertNoCustomerWasImported ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:49:03'!
          test04DoesNotImportRecordsStartingWithAButMoreCharacters

	self
		shouldFailImporting: self invalidAddressRecordStartData
		messageText: CustomerImporter invalidRecordTypeErrorDescription
		asserting: [ self assertImportedOneCustomerWithoutAddress ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:49:36'!
                               test05CanNotImportAddressRecordWithLessThanSixFields

	self
		shouldFailImporting: self addressRecordWithLessThanSixFields
		messageText: CustomerImporter invalidAddressRecordErrorDescription
		asserting: [ self assertImportedOneCustomerWithoutAddress ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:51:14'!
                           test06CanNotImportAddressRecordWithMoreThanSixFields

	self
		shouldFailImporting: self addressRecordWithMoreThanSixFields
		messageText: CustomerImporter invalidAddressRecordErrorDescription
		asserting: [ self assertImportedOneCustomerWithoutAddress ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:56:58'!
                           test07CanNotImportCustomerRecordWithLessThanFiveFields

	self
		shouldFailImporting: self customerRecordWithLessThanFiveFields
		messageText: CustomerImporter invalidCustomerRecordErrorDescription
		asserting: [ self assertNoCustomerWasImported ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 19:56:58'!
  test08CanNotImportCustomerRecordWithMoreThanFiveFields

	self
		shouldFailImporting: self customerRecordWithMoreThanFiveFields
		messageText: CustomerImporter invalidCustomerRecordErrorDescription
		asserting: [ self assertNoCustomerWasImported ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'HAW 5/22/2022 20:01:43'!
  test09CannotImportEmptyLine

	self
		shouldFailImporting: self emptyLine
		messageText: CustomerImporter invalidRecordTypeErrorDescription
		asserting: [ self assertNoCustomerWasImported ]

	! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 18:22:05'!
                       assertAddressOf: importedCustomer at: aStreetName hasNumber: aNumber town: aTown zipCode: aZipCode province: aProvince

	| importedAddress |

	importedAddress := importedCustomer addressAt: aStreetName ifNone: [ self fail ].
	self assert: aStreetName equals: importedAddress streetName.
	self assert: aNumber equals: importedAddress streetNumber.
	self assert: aTown equals: importedAddress town.
	self assert: aZipCode equals: importedAddress zipCode.
	self assert: aProvince equals: importedAddress province.

	! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 18:27:57'!
                     assertCustomerWithIdentificationType: anIdType number: anIdNumber hasFirstName: aFirstName lastName: aLastName

	| importedCustomer |

	importedCustomer := self customerWithIdentificationType: anIdType number: anIdNumber.

	self assert: aFirstName equals: importedCustomer firstName.
	self assert: aLastName equals: importedCustomer lastName.
	self assert: anIdType equals: importedCustomer identificationType.
	self assert: anIdNumber equals: importedCustomer identificationNumber.

	^importedCustomer

	! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 19:45:10'!
                             assertImportedOneCustomerWithoutAddress

	| importedCustomer |

	self assert: 1 equals: self numberOfCustomers.
	importedCustomer := self customerWithIdentificationType: 'D' number: '22333444'.
	self assert: importedCustomer isAddressesEmpty
	! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 19:24:40'!
   assertImportedRightNumberOfCustomers

	^ self assert: 2 equals: self numberOfCustomers! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 18:28:45'!
assertJuanPerezWasImportedCorrectly

	| importedCustomer |

	importedCustomer := self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez'.
	self assertAddressOf: importedCustomer at: 'Alem' hasNumber: 1122 town: 'CABA' zipCode: 1001 province: 'CABA'
	! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 19:56:58'!
      assertNoCustomerWasImported

	^ self assert: 0 equals: self numberOfCustomers! !
!ImportTest methodsFor: 'assertions' stamp: 'HAW 5/22/2022 18:28:05'!
         assertPepeSanchezWasImportedCorrecty

	| importedCustomer |

	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assertAddressOf: importedCustomer at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	self assertAddressOf: importedCustomer at: 'Maipu' hasNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'.


	! !
!ImportTest methodsFor: 'assertions' stamp: 'ldmaf 6/27/2022 19:54:08'!
shouldFailImporting: aReadStream messageText: anErrorMessageText asserting: anAssertionBlock

	self
		should: [ CustomerImporter valueFrom: aReadStream into: system. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anErrorMessageText equals: anError messageText.
			anAssertionBlock value ]

	! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'ldmaf 6/27/2022 20:09:18' overrides: 16961394!
                setUp
	system := TrasientCustomerSystem new.
	system start.
	system beginTransaction.
! !
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'ldmaf 6/27/2022 19:42:57' overrides: 16961402!
      tearDown

	system commit.
	system close.
	! !
!ImportTest methodsFor: 'customer' stamp: 'ldmaf 6/27/2022 19:56:40'!
            customerWithIdentificationType: anIdType number: anIdNumber

	^ system customerWithIdentificationType: anIdType number: anIdNumber
	
	
	! !
!ImportTest methodsFor: 'customer' stamp: 'ldmaf 6/27/2022 19:55:06'!
              numberOfCustomers

	^ system numberOfCustomers! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 19:41:20'!
         addressRecordWithLessThanSixFields

	^ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 19:51:35'!
         addressRecordWithMoreThanSixFields

	^ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs,x'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 19:14:13'!
  addressWithoutCustomerData

	^ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 19:53:41'!
      customerRecordWithLessThanFiveFields

	^ReadStream on: 'C,Pepe,Sanchez,D'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 19:55:59'!
              customerRecordWithMoreThanFiveFields

	^ReadStream on: 'C,Pepe,Sanchez,D,22333444,x'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 20:02:57'!
   emptyLine

	^ReadStream on: '
'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 19:34:25'!
                        invalidAddressRecordStartData

	^ReadStream on: 'C,Pepe,Sanchez,D,22333444
AA,San Martin,3322,Olivos,1636,BsAs'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 19:22:55'!
        invalidCustomerRecordStartData

	^ReadStream on: 'CC,Pepe,Sanchez,D,22333444'! !
!ImportTest methodsFor: 'test data' stamp: 'HAW 5/22/2022 18:08:08'!
          validImportData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Address category: 'CustomerImporter' stamp: 'af 6/29/2022 18:21:47'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Address methodsFor: 'province' stamp: 'HAW 5/22/2022 00:19:29'!
                              province

	^province! !
!Address methodsFor: 'province' stamp: 'HAW 5/22/2022 00:19:29'!
       province: aProvince

	province := aProvince
	! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 17:55:46'!
                isAt: aStreetName

	^streetName = aStreetName ! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29'!
               streetName

	^streetName ! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29'!
    streetName: aStreetName

	streetName := aStreetName ! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29'!
         streetNumber

	^streetNumber ! !
!Address methodsFor: 'street' stamp: 'HAW 5/22/2022 00:19:29'!
streetNumber: aStreetNumber

	streetNumber := aStreetNumber ! !
!Address methodsFor: 'twon' stamp: 'HAW 5/22/2022 00:19:29'!
   town

	^town! !
!Address methodsFor: 'twon' stamp: 'HAW 5/22/2022 00:19:29'!
                   town: aTown

	town := aTown! !
!Address methodsFor: 'zip code' stamp: 'HAW 5/22/2022 00:19:29'!
zipCode

	^zipCode! !
!Address methodsFor: 'zip code' stamp: 'HAW 5/22/2022 00:19:29'!
         zipCode: aZipCode

	zipCode := aZipCode! !

Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'af 6/29/2022 18:21:47'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Customer methodsFor: 'addresses' stamp: 'HAW 5/22/2022 00:19:29'!
   addAddress: anAddress

	addresses add: anAddress ! !
!Customer methodsFor: 'addresses' stamp: 'HAW 5/22/2022 17:55:17'!
        addressAt: aStreetName ifNone: aNoneBlock

	^addresses detect: [ :address | address isAt: aStreetName ] ifNone: aNoneBlock ! !
!Customer methodsFor: 'addresses' stamp: 'HAW 5/22/2022 00:19:29'!
                              addresses

	^ addresses! !
!Customer methodsFor: 'addresses' stamp: 'HAW 5/22/2022 19:38:32'!
  isAddressesEmpty

	^addresses isEmpty ! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29'!
                        firstName

	^firstName ! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29'!
       firstName: aName

	firstName := aName! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29'!
                         lastName

	^lastName ! !
!Customer methodsFor: 'name' stamp: 'HAW 5/22/2022 00:19:29'!
         lastName: aLastName

	lastName := aLastName
! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29'!
        identificationNumber

	^identificationNumber ! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29'!
       identificationNumber: anIdentificationNumber

	identificationNumber := anIdentificationNumber! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29'!
                       identificationType

	^identificationType ! !
!Customer methodsFor: 'identification' stamp: 'HAW 5/22/2022 00:19:29'!
           identificationType: anIdentificationType

	identificationType := anIdentificationType! !
!Customer methodsFor: 'initialization' stamp: 'HAW 5/22/2022 00:19:29' overrides: 16920235!
           initialize

	super initialize.
	addresses := OrderedCollection new.! !

Object subclass: #CustomerImporter
	instanceVariableNames: 'readStream newCustomer line record system'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'af 6/29/2022 18:21:47'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'readStream newCustomer line record system'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'initialization' stamp: 'ldmaf 6/27/2022 19:49:11'!
                            initializeFrom: aReadStream into: aSystem
	system := aSystem.
	readStream := aReadStream.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'HAW 5/22/2022 18:48:58' overrides: 16902254!
   value

	[ self hasLineToImport ] whileTrue: [
		self createRecord.
		self importRecord ].

	! !
!CustomerImporter methodsFor: 'customer' stamp: 'HAW 5/22/2022 19:59:39'!
                      assertValidCustomerRecord

	^ record size ~= 5 ifTrue: [ self error: self class invalidCustomerRecordErrorDescription ]! !
!CustomerImporter methodsFor: 'customer' stamp: 'ldmaf 6/27/2022 19:49:29'!
                         importCustomer

	self assertValidCustomerRecord.

	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	system addCustomer: newCustomer! !
!CustomerImporter methodsFor: 'customer' stamp: 'HAW 5/22/2022 19:23:55'!
                     isCustomerRecord

	^ record first = 'C'! !
!CustomerImporter methodsFor: 'address' stamp: 'HAW 5/22/2022 19:58:41'!
            assertCustomerWasImported

	^ newCustomer ifNil: [ self error: self class canNotImportAddressWithoutCustomerErrorDescription ]! !
!CustomerImporter methodsFor: 'address' stamp: 'HAW 5/22/2022 19:59:12'!
                     assertValidAddressRecord

	^ record size ~= 6 ifTrue: [ self error: self class invalidAddressRecordErrorDescription ]! !
!CustomerImporter methodsFor: 'address' stamp: 'HAW 5/22/2022 19:59:12'!
                              importAddress

	| newAddress |

	self assertCustomerWasImported.
	self assertValidAddressRecord.

	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !
!CustomerImporter methodsFor: 'address' stamp: 'HAW 5/22/2022 19:37:45'!
       isAddressRecord

	^ record first = 'A'! !
!CustomerImporter methodsFor: 'evaluating - private' stamp: 'HAW 5/22/2022 20:04:35'!
assertRecordNotEmpty

	record isEmpty ifTrue: [ self error: self class invalidRecordTypeErrorDescription ]! !
!CustomerImporter methodsFor: 'evaluating - private' stamp: 'HAW 5/22/2022 18:47:26'!
                            createRecord

	^ record := line findTokens: $,! !
!CustomerImporter methodsFor: 'evaluating - private' stamp: 'HAW 5/22/2022 18:49:33'!
                        hasLineToImport

	line := readStream nextLine.
	^line notNil! !
!CustomerImporter methodsFor: 'evaluating - private' stamp: 'HAW 5/22/2022 20:04:06'!
          importRecord

	self assertRecordNotEmpty.

	self isCustomerRecord ifTrue: [ ^self importCustomer ].
	self isAddressRecord ifTrue: [ ^self importAddress ].

	self error: self class invalidRecordTypeErrorDescription! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

CustomerImporter class
	instanceVariableNames: ''!

!classDefinition: 'CustomerImporter class' category: 'CustomerImporter' stamp: 'af 6/29/2022 18:21:47'!
CustomerImporter class
	instanceVariableNames: ''!
!CustomerImporter class methodsFor: 'instance creation' stamp: 'ldmaf 6/27/2022 19:48:26'!
 from: aReadStream into: aSystem
	^self new initializeFrom: aReadStream into: aSystem! !
!CustomerImporter class methodsFor: 'importing' stamp: 'HAW 5/22/2022 18:11:27'!
                       valueFrom: aReadStream into: aSession

	^(self from: aReadStream into: aSession) value! !
!CustomerImporter class methodsFor: 'error messages' stamp: 'HAW 5/22/2022 19:13:48'!
                canNotImportAddressWithoutCustomerErrorDescription

	^'Cannot import address without customer'! !
!CustomerImporter class methodsFor: 'error messages' stamp: 'HAW 5/22/2022 19:41:39'!
        invalidAddressRecordErrorDescription

	^'Address record has to have six fields'! !
!CustomerImporter class methodsFor: 'error messages' stamp: 'HAW 5/22/2022 19:53:56'!
                       invalidCustomerRecordErrorDescription

	^'Invalid Customer record'! !
!CustomerImporter class methodsFor: 'error messages' stamp: 'HAW 5/22/2022 19:24:11'!
    invalidRecordTypeErrorDescription

	^'Invalid record type'! !

Object subclass: #CustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerSystem category: 'CustomerImporter' stamp: 'af 6/29/2022 18:21:47'!
Object subclass: #CustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/27/2022 19:59:36'!
            addCustomer: aNewCustomer
	self subclassResponsibility ! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/27/2022 20:00:00'!
                beginTransaction
	self subclassResponsibility ! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/27/2022 20:00:13'!
                         close
	self subclassResponsibility ! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/27/2022 20:00:17'!
    commit
	self subclassResponsibility! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/27/2022 20:00:23'!
    customerWithIdentificationType: anIdType number: anIdNumber
	self subclassResponsibility! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/27/2022 20:00:26'!
               numberOfCustomers
	self subclassResponsibility! !
!CustomerSystem methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/27/2022 20:00:30'!
                         start
	self subclassResponsibility! !

CustomerSystem subclass: #PersistentCustomerSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #PersistentCustomerSystem category: 'CustomerImporter' stamp: 'af 6/29/2022 18:21:48'!
CustomerSystem subclass: #PersistentCustomerSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/27/2022 19:50:11' overrides: 50333654!
      addCustomer: aNewCustomer
	session persist: aNewCustomer! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/27/2022 19:41:39' overrides: 50333659!
                 beginTransaction
	session beginTransaction! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/27/2022 19:43:21' overrides: 50333664!
                               close
	session close! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/27/2022 19:43:08' overrides: 50333668!
                     commit
	session commit! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/27/2022 19:57:02' overrides: 50333672!
                   customerWithIdentificationType: anIdType number: anIdNumber
	^(session
		select: [ :aCustomer | aCustomer identificationType = anIdType and: [ aCustomer identificationNumber = anIdNumber ]]
		ofType: Customer) anyOne! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/27/2022 19:55:34' overrides: 50333678!
                 numberOfCustomers
	^ (session selectAllOfType: Customer) size! !
!PersistentCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/27/2022 19:41:03' overrides: 50333683!
            start
	session := DataBaseSession for: (Array with: Address with: Customer)! !

CustomerSystem subclass: #TrasientCustomerSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #TrasientCustomerSystem category: 'CustomerImporter' stamp: 'af 6/29/2022 18:21:48'!
CustomerSystem subclass: #TrasientCustomerSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!TrasientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/27/2022 20:08:27' overrides: 50333654!
     addCustomer: aNewCustomer
	session add: aNewCustomer! !
!TrasientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/27/2022 20:05:37' overrides: 50333659!
                       beginTransaction
	! !
!TrasientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/27/2022 20:05:43' overrides: 50333664!
                         close! !
!TrasientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/27/2022 20:05:48' overrides: 50333668!
      commit! !
!TrasientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/27/2022 20:17:00' overrides: 50333672!
     customerWithIdentificationType: anIdType number: anIdNumber
	^(session select: [ :aRegister | (aRegister isKindOf: Customer) and: [aRegister identificationType = anIdType and: [ aRegister identificationNumber = anIdNumber ] ]]) anyOne.
! !
!TrasientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/27/2022 20:04:56' overrides: 50333678!
                               numberOfCustomers
	^ (session select: [:aRegister | aRegister isKindOf: Customer]) size.! !
!TrasientCustomerSystem methodsFor: 'as yet unclassified' stamp: 'ldmaf 6/27/2022 20:03:37' overrides: 50333683!
                   start
	session := Set new.! !

Object subclass: #DataBaseSession
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #DataBaseSession category: 'CustomerImporter' stamp: 'af 6/29/2022 18:21:48'!
Object subclass: #DataBaseSession
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!DataBaseSession methodsFor: 'transaction management' stamp: 'HAW 5/22/2022 00:19:29'!
       beginTransaction

	! !
!DataBaseSession methodsFor: 'transaction management' stamp: 'HAW 5/22/2022 19:17:36'!
                  commit

	(tables at: Customer ifAbsent: [#()]) do: [ :aCustomer | self persistAddressesOf: aCustomer ]
	! !
!DataBaseSession methodsFor: 'closing' stamp: 'HAW 5/22/2022 00:19:29'!
            close

	! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 00:19:29'!
                              defineIdOf: anObject

	anObject instVarNamed: 'id' put: (self newIdFor: anObject).! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 00:19:29'!
                    delay

	(Delay forMilliseconds: 100) wait! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 19:29:06'!
                             objectsOfType: aType

	^ tables at: aType ifAbsent: [ #() ]! !
!DataBaseSession methodsFor: 'persistence - private' stamp: 'HAW 5/22/2022 00:19:29'!
           persistAddressesOf: anObjectWithAddresses

	anObjectWithAddresses addresses do: [ :anAddress | self persist: anAddress ]
	! !
!DataBaseSession methodsFor: 'initialization' stamp: 'HAW 5/22/2022 00:19:29'!
                   initializeFor: aConfiguration

	configuration := aConfiguration.
	tables := Dictionary new.
	id := 0.! !
!DataBaseSession methodsFor: 'id' stamp: 'HAW 5/22/2022 00:19:29'!
                    newIdFor: anObject

	id := id + 1.
	^id! !
!DataBaseSession methodsFor: 'persistance' stamp: 'HAW 5/22/2022 00:19:29'!
         persist: anObject

	| table |

	self delay.
	table := tables at: anObject class ifAbsentPut: [ Set new ].

	self defineIdOf: anObject.
	table add: anObject.

	(anObject isKindOf: Customer) ifTrue: [ self persistAddressesOf: anObject ].! !
!DataBaseSession methodsFor: 'selecting' stamp: 'HAW 5/22/2022 19:29:06'!
       select: aCondition ofType: aType

	self delay.
	^(self objectsOfType: aType) select: aCondition ! !
!DataBaseSession methodsFor: 'selecting' stamp: 'HAW 5/22/2022 19:29:06'!
                  selectAllOfType: aType

	self delay.
	^(self objectsOfType: aType) copy ! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

DataBaseSession class
	instanceVariableNames: ''!

!classDefinition: 'DataBaseSession class' category: 'CustomerImporter' stamp: 'af 6/29/2022 18:21:48'!
DataBaseSession class
	instanceVariableNames: ''!
!DataBaseSession class methodsFor: 'instance creation' stamp: 'HAW 5/22/2022 00:19:29'!
                    for: aConfiguration

	^self new initializeFor: aConfiguration! !

----End fileIn of C:\Users\Felder\Desktop\UBA\2022\Ing soft I\windows64\CustomerImporter.st----!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 6/29/2022 18:22:11'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 6/29/2022 18:22:11'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 6/29/2022 18:22:11'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 6/29/2022 18:22:11'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 6/29/2022 18:22:11'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 6/29/2022 18:22:11'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 6/29/2022 18:22:11'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 6/29/2022 18:22:11'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 6/29/2022 18:22:11'!
PASSED!
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'af 6/29/2022 18:22:18' prior: 50333295 overrides: 16961394!
                              setUp
	system := PersistentCustomerSystem new.
	system start.
	system beginTransaction.
! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 6/29/2022 18:22:21'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 6/29/2022 18:22:21'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 6/29/2022 18:22:21'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 6/29/2022 18:22:22'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 6/29/2022 18:22:22'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 6/29/2022 18:22:22'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 6/29/2022 18:22:22'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 6/29/2022 18:22:22'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 6/29/2022 18:22:22'!
PASSED!

!classDefinition: #Environment category: 'CustomerImporter' stamp: 'af 6/29/2022 18:23:31'!
Object subclass: #Environment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'af 6/29/2022 18:23:25' prior: 50333932 overrides: 16961394!
  setUp
	system := Environment createSystem.
	system start.
	system beginTransaction.
! !

Environment subclass: #DevelopmentSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #DevelopmentSystem category: 'CustomerImporter' stamp: 'af 6/29/2022 18:23:59'!
Environment subclass: #DevelopmentSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

Environment subclass: #ProductionSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #ProductionSystem category: 'CustomerImporter' stamp: 'af 6/29/2022 18:24:04'!
Environment subclass: #ProductionSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Environment class methodsFor: 'nil' stamp: 'af 6/29/2022 18:26:48'!
                          createSystem
	^ (self subclasses detect: [:aSubClass | aSubClass isValidForCurrentEnv]) createSystem.! !
!DevelopmentSystem class methodsFor: 'nil' stamp: 'af 6/29/2022 18:27:26'!
            isValidForCurrentEnv
	
	! !
!Environment class methodsFor: 'as yet unclassified' stamp: 'af 6/29/2022 18:28:24' prior: 50334007!
                               createSystem
	^ (self subclasses detect: [:aSubClass | aSubClass isValidFor: (Smalltalk at: #ENV)]) createSystem.! !
!DevelopmentSystem class methodsFor: 'as yet unclassified' stamp: 'af 6/29/2022 18:28:36'!
                isValidFor: anEnvVariable
	
	! !
!DevelopmentSystem class methodsFor: 'as yet unclassified' stamp: 'af 6/29/2022 18:28:56' prior: 50334025!
                    isValidFor: anEnvVariable
	^(anEnvVariable = #DEV)
	
	! !
!ProductionSystem class methodsFor: 'nil' stamp: 'af 6/29/2022 18:29:13'!
                            isValidFor: anEnvVariable
	^(anEnvVariable = #PROD)
	! !

!methodRemoval: DevelopmentSystem class #isValidForCurrentEnv stamp: 'af 6/29/2022 18:29:23'!
isValidForCurrentEnv
	
	!
!DevelopmentSystem class methodsFor: 'as yet unclassified' stamp: 'af 6/29/2022 18:29:41' overrides: 50334018!
                               createSystem
	^TrasientCustomerSystem new.! !
!ProductionSystem class methodsFor: 'as yet unclassified' stamp: 'af 6/29/2022 18:29:54' overrides: 50334018!
    createSystem
	^PersistentCustomerSystem new.! !
!Environment class methodsFor: 'as yet unclassified' stamp: 'af 6/29/2022 18:31:09' prior: 50334018!
           createSystem
	^ (self subclasses detect: [:aSubClass | aSubClass isValidFor: (Smalltalk at: #ENV)] ifNone: [self error: 'No env variable was found.']) createSystem .
! !

Smalltalk at: #ENV put: #PROD!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 6/29/2022 18:32:06'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 6/29/2022 18:32:06'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 6/29/2022 18:32:06'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 6/29/2022 18:32:06'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 6/29/2022 18:32:07'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 6/29/2022 18:32:07'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 6/29/2022 18:32:07'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 6/29/2022 18:32:07'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 6/29/2022 18:32:07'!
PASSED!

Smalltalk at: #ENV put: #DEV!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 6/29/2022 18:32:15'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 6/29/2022 18:32:15'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 6/29/2022 18:32:15'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 6/29/2022 18:32:15'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 6/29/2022 18:32:15'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 6/29/2022 18:32:15'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 6/29/2022 18:32:15'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 6/29/2022 18:32:15'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 6/29/2022 18:32:15'!
PASSED!

----QUIT----(29 June 2022 18:34:28) CuisUniversity-5096.image priorSource: 7246977!